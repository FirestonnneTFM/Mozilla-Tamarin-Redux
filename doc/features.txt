<!--
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
-->

= Feature system =

<P> 2009-04-08 / lhansen@adobe.com

<p> For a while there's been an effort underway to clean up the
configuration of Tamarin: to get rid of hidden ifdefs, to regularize
names, to factor platform detection so that it can be maintained and
reused, to allow other platforms than the ones we know about to use
Tamarin, and so on.  The first part of this system just landed in
redux.

<p> In brief:

<ul> 

<li> core/avmfeatures.as is both a definition file and its
processing script: it defines all the configuration names we know
about, states what they're for and any constraints that exist between
them (dependencies, anti-dependencies, and other things).

<li> Features have two kinds of names, AVMSYSTEM_X for system
properties (architecture, endianness, word size, operating system,
...) and AVMFEATURE_X for functionality (JIT, SELFTEST, ...).  There
might be other kinds in the future.

<li> A feature is always defined and always has the value 0 or 1 

<li> A feature name is never used inside the code, but is translated
to an internal name, which is defined if the feature is on and not
defined if the feature is off.  This seems redundant, but in practice
a single feature often turns into multiple internal definitions.

<li> Tamarin has lots of different naming conventions for internal
names right now, AVMPLUS_X and MMGC_X and FEATURE_X and so on; by
previous agreement, the new naming convention is VMCFG_X.  We should
change our code as we have time.

<li> core/avmfeatures.h is the file generated by core/avmfeatures.as.
It contains a ton of #ifdefs and similar things that check all the
constraints and define the internal names as appropriate.  It is
included into avmplus.h after VMPI.h but before avmbuild.h.

<li> avmbuild.h has been seriously shrunk and will continue to shrink
further; a lot of what happened here before now happens in the
configuration system.

<li> VMPI.h provides feature settings by including the embedder's
feature configuration file.  In the avmshell (when AVMSHELL_BUILD is
defined externally to the source code) this is the file
shell/avmshell-features.h; otherwise it is a file called
"avmhost-features.h" that must be found in the include path somewhere.

<li> The files avmshell-features.h and avmhost-features.h may make use
of the refactored platform detection code to do what was previously
done in avmbuild.h, but may also skip that - which is useful for
platforms not directly supported in the Tamarin code base (more than
half of all the platforms we expect to support).
</ul>

<P> Also part of the cleanup is a refactoring of VMPI.h into
platform-dependent files that provide implementations of the platform
abstractions.

<P> Work that remains to be done:

<ul> 
<li> Reengineer more ad-hoc #defines as features and fold them
into the feature system

<li> In particular, fold mmgc into the feature system somehow; mmgc
has its own build files but imo this situation should not persist

<li> Remove platform #ifdefs throughout the code - there are too many
of them - by either reengineering them as features or moving them into
the platform-specific header files that are included by VMPI.h.

<li> Remove ad-hoc code from avmbuild.h

</ul>

<P> Documentation about the structure of avmfeatures.as may be found
in that file.

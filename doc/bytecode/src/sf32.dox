/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
 /*! \page sf32 

\addindex sf32


\section sf32 sf32

\subsection operation Operation

Store a 32 bit float to global memory

\subsection format Format

\code
sf32
\endcode

\subsection forms Forms
\code
sf32 = 61 (0x3D)
\endcode
\subsection stack Stack

\code
..., value, address => ...
\endcode

\subsection description Description

Store a 32 bit (IEEE 754) float to global memory.

The input value is converted to Number using the equivalent of
convert_d, truncated to 32-bit float, then stored as four bytes
in little-endian order.

The MOPS opcodes all access the backing store of the ByteArray represented by the
current app domain's ApplicationDomain.domainMemory property. Address ranges for
accesses will be range checked using standard comparisons.

\subsection rt_execeptions Runtime exceptions

Range check failures will result in an InvalidRangeError exception.

\subsection notes Notes

None.

*/


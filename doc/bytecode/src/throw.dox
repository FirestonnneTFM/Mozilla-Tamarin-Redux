/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2004-2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */
 /*! \page throw 

\addindex throw


\section throw throw

\subsection operation Operation

Throws an exception.

\subsection format Format

\code
throw
\endcode

\subsection forms Forms
\code
throw = 3 (0x03)
\endcode
\subsection stack Stack

\code
..., value => ...
\endcode

\subsection description Description

The top value of the stack is popped off the stack and then thrown. The thrown value can be of any type.

When a throw is executed, the current methodâ€™s exception handler table is 
searched for an exception handler. An exception handler matches if its range 
of offsets includes the offset of this instruction, and if its type matches 
the type of the thrown object, or is a base class of the type thrown. The first 
handler that matches is the one used.

If a handler is found then the stack is cleared, the exception object is 
pushed onto the stack, and then execution resumes at the instruction offset 
specified by the handler.

If a handler is not found, then the method exits, and the exception is 
rethrown in the invoking method, at which point it is searched for an 
exception handler as described here.

\subsection rt_execeptions Runtime exceptions

None.

\subsection notes Notes

None.

*/


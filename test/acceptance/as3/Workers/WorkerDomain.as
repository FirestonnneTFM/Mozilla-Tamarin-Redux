/* -*- Mode: C++; c-basic-offset: 4; indent-tabs-mode: nil; tab-width: 4 -*- *//* vi: set ts=4 sw=4 expandtab: (add to ~/.vimrc: set modeline modelines=5) *//* This Source Code Form is subject to the terms of the Mozilla Public * License, v. 2.0. If a copy of the MPL was not distributed with this * file, You can obtain one at http://mozilla.org/MPL/2.0/. */  package {    import flash.system.Worker;    import flash.system.WorkerDomain;    import avmplus.System;    if (Worker.current.isPrimordial) {        var SECTION = "Workers";        var VERSION = "as3";        var TITLE   = "WorkerDomain api tests";        startTest();        writeHeaderToLog(SECTION+" "+TITLE);        var wd:WorkerDomain=null;        var exception:String="";    // test WorkerDomain constructor throws exception        try {            wd=new WorkerDomain();        } catch (e) {            exception=e.toString();        }        //AddTestCase("test new WorkerDomain constructor does throws an exception","ArgumentError: Error #2012",exception.substring(0,"ArgumentError: Error #2012".length));        //AddTestCase("test new WorkerDomain is null",true,wd==null);        AddTestCase("test new WorkerDomain constructor does not throw an exception","",exception);        AddTestCase("test new WorkerDomain is not null",true,wd!=null);        try {            wd=WorkerDomain(WorkerDomain.current);        } catch (e) {            exception=e.toString();        }        AddTestCase("test WorkerDomain constructor does not throw an exception","",exception);        AddTestCase("test WorkerDomain constructor is not null",true,wd!=null);        var lw:Vector.<Worker>=null;        lw=WorkerDomain.current.listWorkers();//    trace("listWorker="+lw);        AddTestCase("test WorkerDomain listWorkers has length>=1",true,lw.length>=1);        var worker:Worker=null;        try {            worker=WorkerDomain.current.createWorkerFromByteArray(null);        } catch(e) {            exception=e.toString();        }        //AddTestCase("test createWorker(null) throws an exception","TypeError: Error #2007",exception.substring(0,"TypeError: Error #2007".length));        //AddTestCase("test createWorker(null) does not create a worker",null,worker);        AddTestCase("test createWorker(null) throws does not thrown an exception","",exception);        AddTestCase("test createWorker(null) creates a worker",true,worker!=null);        var count:uint=WorkerDomain.current.listWorkers().length;        worker=WorkerDomain.current.createWorkerFromPrimordial();        AddTestCase("test createWorker(loaderInfo.bytes) successfully creates a worker",worker!=null,true);        worker.start();//        System.sleep(50);//        AddTestCase("test WorkerDomain listWorkers contains an additional element after createWorker",count+1,WorkerDomain.current.listWorkers().length);        worker.terminate();        AddTestCase("test WorkerDomain listWorkers contains one less after terminate",count,WorkerDomain.current.listWorkers().length);        test();    } else {        trace("in background worker");    }}
/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

/*
 *  Test trait definitions, function lookup by name,
 *  explicit function-level metadata
 */
.script_info
{
	init : .function_id(main)
	//  trait_count accumulated and set by the assembler, 
	//  can also be specified
	traits: {
	.trait{ kind:Trait_Slot name:x slot_id:1 type_name:String}
	.trait{ kind:Trait_Slot name:foo }
	.trait{ kind:Trait_Slot name:three slot_id:3 type_name:int}
	}
}

/*
Equivalent syntactic sugar for the above traits:
var x:String
var one:int = 1
var foo
*/

function main():*      
{
	getlocal0
	pushscope
	getglobalscope
	debugfile "functionBindingAndTraits.abs"

	findpropstrict START
	pushstring "Create and bind function and value to slots"
	callproperty START 1

	getlocal0
	newfunction         .function_id(foo)
	setslot             .slot_id(foo)
	pushstring          "hello, x-land"
	getglobalscope
	swap
	setslot             .slot_id(x)

	findpropstrict PASS
	pushstring "Binding"
	callproperty PASS 1

	findpropstrict END
	callproperty END 0

	findpropstrict START
	pushstring "Call bound function"
	callproperty START 1

	debugline 9
	findpropstrict      foo
	callproperty        foo 0
	coerce_a

	findpropstrict END
	callproperty END 0

	returnvalue
}


.method_info
{
	return_type:int
	//param_count:2
	//param_type:{int, int}
	name:foo
}

.method_body_info {
	max_stack:4 local_count:3 init_scope_depth:1 max_scope_depth:2 
	method: .function_id(foo)
	code:
	{
		getlocal0
		pushscope

		findpropstrict COMPARE_STRICTEQ
		pushstring "Access slot in this"
		pushstring          "hello, x-land"
		findpropstrict x
		getslot             .slot_id(x)  //  NOTE: lexical scoping!
		callproperty COMPARE_STRICTEQ 3

		returnvoid
	}
	traits : {
		.trait { kind:Trait_Slot name:poot type_name:String slot_id:1}
	}
}


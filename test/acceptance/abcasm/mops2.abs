/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2009
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

//  Test indirect memory access instructions.

.script_info {
	init: .function_id(main)
}

function main()
{
	getlocal0
	pushscope

	findpropstrict START
	pushstring "Create ByteArray"
	callpropvoid START 1

	newfunction .function_id(initMemory)
	getlocal0
	call 0

	findpropstrict END
	callpropvoid END 0
	

	newfunction .function_id(runTest)
	getlocal0
	call 0

	returnvoid
}

/*
 *  Test the MOPS instructions.
 */
function runTest():void
{
	getlocal0
	pushscope

	findpropstrict START
	pushstring "Testing MOPS instructions"
	callpropvoid START 1

	pushshort 1000
    setlocal0

	pushshort 2000
    setlocal1
    
	pushint  0x007fff80
	getlocal0
	si32

	pushint  -128
	getlocal1
	si32

	pushint  -1
	getlocal1
    pushbyte 4
    add
	si32

	pushint  127
	getlocal1
    pushbyte 8
    add
	si32

	pushint  0
	getlocal1
    pushbyte 12
    add
	si32

    pushbyte 0
    setlocal2

loop: label

	findpropstrict COMPARE_STRICTEQ
	pushstring "Sign-extend 8 (neg, branchy)"

    // expected
	getlocal1
    li32

	pushbyte 255

    getlocal2
    pushbyte 1
    ifeq naked_sx

    // actual
    pop
	getlocal0
	li8

naked_sx:
	sxi8

	callpropvoid COMPARE_STRICTEQ 3

    inclocal_i 0

    inclocal_i 1
    inclocal_i 1
    inclocal_i 1
    inclocal_i 1

    inclocal_i 2

    getlocal2
    pushbyte 4
    ifngt loop

	findpropstrict END
	callpropvoid END 0

	returnvoid
}

/*
 *  Initialize the memory buffer: create a ByteArray and
 *  write 4K of zeroes into it.
 */
function initMemory():void
{
	getlocal0     	
	pushscope     	

	debugfile     	"initMemory"
	debugline     	1

	findpropstrict	{flash.utils}::ByteArray
	constructprop 	{flash.utils}::ByteArray (0)
	setlocal2

	//  Init the loop counter.
	pushbyte      	0
	setlocal3
	
InitLoop: label         	

	getlocal2
	pushbyte      	0
	callpropvoid  	writeByte (1)

	inclocal_i	3   	

	getlocal3
	pushshort     	4096
	iflt          	InitLoop
	
	//  The ByteArray is initialized, set the domain property and exit.
	findpropstrict	{avmplus}::Domain
	getproperty   	{avmplus}::Domain
	getproperty   	currentDomain
	getlocal       	2
	setproperty   	domainMemory

	findpropstrict PASS
	pushstring "create ByteArray"
	callpropvoid PASS 1

	
	returnvoid
}

use decimal;
var SECTION = "Decimal";
var VERSION = "ES4";
var TITLE = "dqRemainder.decTest";
var BUGNUMBER = "";
startTest();
{
//----------------------------------------------------------------------
// dqremainder.dectest -- decquad remainder                           --
// copyright (c) ibm corporation, 1981, 2007.  all rights reserved.   --
//----------------------------------------------------------------------
// please see the document "general decimal arithmetic testcases"     --
// at http://www2.hursley.ibm.com/decimal for the description of      --
// these testcases.                                                   --
//                                                                    --
// these testcases are experimental ('beta' versions), and they       --
// may contain errors.  they are offered on an as-is basis.  in       --
// particular, achieving the same results as the tests here is not    --
// a guarantee that an implementation complies with any standard      --
// or specification.  the tests are not exhaustive.                   --
//                                                                    --
// please send comments, suggestions, and corrections to the author:  --
//   mike cowlishaw, ibm fellow                                       --
//   ibm uk, po box 31, birmingham road, warwick cv34 5jl, uk         --
//   mfc@uk.ibm.com                                                   --
//----------------------------------------------------------------------
// version: 2.55
use rounding HALF_EVEN;
// sanity checks (as base, above)
AddTestCase("dqrem001:p9 r:HALF_EVEN (1 % 1)", 0, 1 % 1);
AddTestCase("dqrem002:p9 r:HALF_EVEN (2 % 1)", 0, 2 % 1);
AddTestCase("dqrem003:p9 r:HALF_EVEN (1 % 2)", 1, 1 % 2);
AddTestCase("dqrem004:p9 r:HALF_EVEN (2 % 2)", 0, 2 % 2);
AddTestCase("dqrem005:p9 r:HALF_EVEN (0 % 1)", 0, 0 % 1);
AddTestCase("dqrem006:p9 r:HALF_EVEN (0 % 2)", 0, 0 % 2);
AddTestCase("dqrem007:p9 r:HALF_EVEN (1 % 3)", 1, 1 % 3);
AddTestCase("dqrem008:p9 r:HALF_EVEN (2 % 3)", 2, 2 % 3);
AddTestCase("dqrem009:p9 r:HALF_EVEN (3 % 3)", 0, 3 % 3);
AddTestCase("dqrem010:p9 r:HALF_EVEN (2.4 % 1)", 0.4, 2.4 % 1);
AddTestCase("dqrem011:p9 r:HALF_EVEN (2.4 % -1)", 0.4, 2.4 % -1);
AddTestCase("dqrem012:p9 r:HALF_EVEN (-2.4 % 1)", -0.4, -2.4 % 1);
AddTestCase("dqrem013:p9 r:HALF_EVEN (-2.4 % -1)", -0.4, -2.4 % -1);
AddTestCase("dqrem014:p9 r:HALF_EVEN (2.40 % 1)", 0.40, 2.40 % 1);
AddTestCase("dqrem015:p9 r:HALF_EVEN (2.400 % 1)", 0.400, 2.400 % 1);
AddTestCase("dqrem016:p9 r:HALF_EVEN (2.4 % 2)", 0.4, 2.4 % 2);
AddTestCase("dqrem017:p9 r:HALF_EVEN (2.400 % 2)", 0.400, 2.400 % 2);
AddTestCase("dqrem018:p9 r:HALF_EVEN (2. % 2)", 0, 2. % 2);
AddTestCase("dqrem019:p9 r:HALF_EVEN (20 % 20)", 0, 20 % 20);
AddTestCase("dqrem020:p9 r:HALF_EVEN (187 % 187)", 0, 187 % 187);
AddTestCase("dqrem021:p9 r:HALF_EVEN (5 % 2)", 1, 5 % 2);
AddTestCase("dqrem022:p9 r:HALF_EVEN (5 % 2.0)", 1.0, 5 % 2.0);
AddTestCase("dqrem023:p9 r:HALF_EVEN (5 % 2.000)", 1.000, 5 % 2.000);
AddTestCase("dqrem024:p9 r:HALF_EVEN (5 % 0.200)", 0.000, 5 % 0.200);
AddTestCase("dqrem025:p9 r:HALF_EVEN (5 % 0.200)", 0.000, 5 % 0.200);
AddTestCase("dqrem030:p9 r:HALF_EVEN (1 % 2)", 1, 1 % 2);
AddTestCase("dqrem031:p9 r:HALF_EVEN (1 % 4)", 1, 1 % 4);
AddTestCase("dqrem032:p9 r:HALF_EVEN (1 % 8)", 1, 1 % 8);
AddTestCase("dqrem033:p9 r:HALF_EVEN (1 % 16)", 1, 1 % 16);
AddTestCase("dqrem034:p9 r:HALF_EVEN (1 % 32)", 1, 1 % 32);
AddTestCase("dqrem035:p9 r:HALF_EVEN (1 % 64)", 1, 1 % 64);
AddTestCase("dqrem040:p9 r:HALF_EVEN (1 % -2)", 1, 1 % -2);
AddTestCase("dqrem041:p9 r:HALF_EVEN (1 % -4)", 1, 1 % -4);
AddTestCase("dqrem042:p9 r:HALF_EVEN (1 % -8)", 1, 1 % -8);
AddTestCase("dqrem043:p9 r:HALF_EVEN (1 % -16)", 1, 1 % -16);
AddTestCase("dqrem044:p9 r:HALF_EVEN (1 % -32)", 1, 1 % -32);
AddTestCase("dqrem045:p9 r:HALF_EVEN (1 % -64)", 1, 1 % -64);
AddTestCase("dqrem050:p9 r:HALF_EVEN (-1 % 2)", -1, -1 % 2);
AddTestCase("dqrem051:p9 r:HALF_EVEN (-1 % 4)", -1, -1 % 4);
AddTestCase("dqrem052:p9 r:HALF_EVEN (-1 % 8)", -1, -1 % 8);
AddTestCase("dqrem053:p9 r:HALF_EVEN (-1 % 16)", -1, -1 % 16);
AddTestCase("dqrem054:p9 r:HALF_EVEN (-1 % 32)", -1, -1 % 32);
AddTestCase("dqrem055:p9 r:HALF_EVEN (-1 % 64)", -1, -1 % 64);
AddTestCase("dqrem060:p9 r:HALF_EVEN (-1 % -2)", -1, -1 % -2);
AddTestCase("dqrem061:p9 r:HALF_EVEN (-1 % -4)", -1, -1 % -4);
AddTestCase("dqrem062:p9 r:HALF_EVEN (-1 % -8)", -1, -1 % -8);
AddTestCase("dqrem063:p9 r:HALF_EVEN (-1 % -16)", -1, -1 % -16);
AddTestCase("dqrem064:p9 r:HALF_EVEN (-1 % -32)", -1, -1 % -32);
AddTestCase("dqrem065:p9 r:HALF_EVEN (-1 % -64)", -1, -1 % -64);
AddTestCase("dqrem066:p9 r:HALF_EVEN (999999999 % 1)", 0, 999999999 % 1);
AddTestCase("dqrem067:p9 r:HALF_EVEN (999999999.4 % 1)", 0.4, 999999999.4 % 1);
AddTestCase("dqrem068:p9 r:HALF_EVEN (999999999.5 % 1)", 0.5, 999999999.5 % 1);
AddTestCase("dqrem069:p9 r:HALF_EVEN (999999999.9 % 1)", 0.9, 999999999.9 % 1);
AddTestCase("dqrem070:p9 r:HALF_EVEN (999999999.999 % 1)", 0.999, 999999999.999 % 1);
AddTestCase("dqrem071:p9 r:HALF_EVEN (999999.999999 % 1)", 0.999999, 999999.999999 % 1);
AddTestCase("dqrem072:p9 r:HALF_EVEN (9 % 1)", 0, 9 % 1);
AddTestCase("dqrem080:p9 r:HALF_EVEN (0. % 1)", 0, 0. % 1);
AddTestCase("dqrem081:p9 r:HALF_EVEN (.0 % 1)", 0.0, .0 % 1);
AddTestCase("dqrem082:p9 r:HALF_EVEN (0.00 % 1)", 0.00, 0.00 % 1);
AddTestCase("dqrem083:p9 r:HALF_EVEN (0.00e+9 % 1)", 0, 0.00e+9 % 1);
AddTestCase("dqrem084:p9 r:HALF_EVEN (0.00e+3 % 1)", 0, 0.00e+3 % 1);
AddTestCase("dqrem085:p9 r:HALF_EVEN (0.00e+2 % 1)", 0, 0.00e+2 % 1);
AddTestCase("dqrem086:p9 r:HALF_EVEN (0.00e+1 % 1)", 0.0, 0.00e+1 % 1);
AddTestCase("dqrem087:p9 r:HALF_EVEN (0.00e+0 % 1)", 0.00, 0.00e+0 % 1);
AddTestCase("dqrem088:p9 r:HALF_EVEN (0.00e-0 % 1)", 0.00, 0.00e-0 % 1);
AddTestCase("dqrem089:p9 r:HALF_EVEN (0.00e-1 % 1)", 0.000, 0.00e-1 % 1);
AddTestCase("dqrem090:p9 r:HALF_EVEN (0.00e-2 % 1)", 0.0000, 0.00e-2 % 1);
AddTestCase("dqrem091:p9 r:HALF_EVEN (0.00e-3 % 1)", 0.00000, 0.00e-3 % 1);
AddTestCase("dqrem092:p9 r:HALF_EVEN (0.00e-4 % 1)", 0.000000, 0.00e-4 % 1);
AddTestCase("dqrem093:p9 r:HALF_EVEN (0.00e-5 % 1)", 0e-7, 0.00e-5 % 1);
AddTestCase("dqrem094:p9 r:HALF_EVEN (0.00e-6 % 1)", 0e-8, 0.00e-6 % 1);
AddTestCase("dqrem095:p9 r:HALF_EVEN (0.0000e-50 % 1)", 0e-54, 0.0000e-50 % 1);
// various flavours of remainder by 0
AddTestCase("dqrem101:p9 r:HALF_EVEN (0 % 0) division_undefined", NaN, 0 % 0);
AddTestCase("dqrem102:p9 r:HALF_EVEN (0 % -0) division_undefined", NaN, 0 % -0);
AddTestCase("dqrem103:p9 r:HALF_EVEN (-0 % 0) division_undefined", NaN, -0 % 0);
AddTestCase("dqrem104:p9 r:HALF_EVEN (-0 % -0) division_undefined", NaN, -0 % -0);
AddTestCase("dqrem105:p9 r:HALF_EVEN (0.0e5 % 0) division_undefined", NaN, 0.0e5 % 0);
AddTestCase("dqrem106:p9 r:HALF_EVEN (0.000 % 0) division_undefined", NaN, 0.000 % 0);
// [some think this next group should be division_by_zero exception, but
// ieee 854 is explicit that it is invalid operation .. for
// remainder-near, anyway]
AddTestCase("dqrem107:p9 r:HALF_EVEN (0.0001 % 0) invalid_operation", NaN, 0.0001 % 0);
AddTestCase("dqrem108:p9 r:HALF_EVEN (0.01 % 0) invalid_operation", NaN, 0.01 % 0);
AddTestCase("dqrem109:p9 r:HALF_EVEN (0.1 % 0) invalid_operation", NaN, 0.1 % 0);
AddTestCase("dqrem110:p9 r:HALF_EVEN (1 % 0) invalid_operation", NaN, 1 % 0);
AddTestCase("dqrem111:p9 r:HALF_EVEN (1 % 0.0) invalid_operation", NaN, 1 % 0.0);
AddTestCase("dqrem112:p9 r:HALF_EVEN (10 % 0.0) invalid_operation", NaN, 10 % 0.0);
AddTestCase("dqrem113:p9 r:HALF_EVEN (1e+100 % 0.0) invalid_operation", NaN, 1e+100 % 0.0);
AddTestCase("dqrem114:p9 r:HALF_EVEN (1e+380 % 0) invalid_operation", NaN, 1e+380 % 0);
AddTestCase("dqrem115:p9 r:HALF_EVEN (0.0001 % -0) invalid_operation", NaN, 0.0001 % -0);
AddTestCase("dqrem116:p9 r:HALF_EVEN (0.01 % -0) invalid_operation", NaN, 0.01 % -0);
AddTestCase("dqrem119:p9 r:HALF_EVEN (0.1 % -0) invalid_operation", NaN, 0.1 % -0);
AddTestCase("dqrem120:p9 r:HALF_EVEN (1 % -0) invalid_operation", NaN, 1 % -0);
AddTestCase("dqrem121:p9 r:HALF_EVEN (1 % -0.0) invalid_operation", NaN, 1 % -0.0);
AddTestCase("dqrem122:p9 r:HALF_EVEN (10 % -0.0) invalid_operation", NaN, 10 % -0.0);
AddTestCase("dqrem123:p9 r:HALF_EVEN (1e+100 % -0.0) invalid_operation", NaN, 1e+100 % -0.0);
AddTestCase("dqrem124:p9 r:HALF_EVEN (1e+384 % -0) invalid_operation", NaN, 1e+384 % -0);
// and zeros on left
AddTestCase("dqrem130:p9 r:HALF_EVEN (0 % 1)", 0, 0 % 1);
AddTestCase("dqrem131:p9 r:HALF_EVEN (0 % -1)", 0, 0 % -1);
AddTestCase("dqrem132:p9 r:HALF_EVEN (0.0 % 1)", 0.0, 0.0 % 1);
AddTestCase("dqrem133:p9 r:HALF_EVEN (0.0 % -1)", 0.0, 0.0 % -1);
AddTestCase("dqrem134:p9 r:HALF_EVEN (-0 % 1)", -0, -0 % 1);
AddTestCase("dqrem135:p9 r:HALF_EVEN (-0 % -1)", -0, -0 % -1);
AddTestCase("dqrem136:p9 r:HALF_EVEN (-0.0 % 1)", -0.0, -0.0 % 1);
AddTestCase("dqrem137:p9 r:HALF_EVEN (-0.0 % -1)", -0.0, -0.0 % -1);
// 0.5ers
AddTestCase("dqrem143:p9 r:HALF_EVEN (0.5 % 2)", 0.5, 0.5 % 2);
AddTestCase("dqrem144:p9 r:HALF_EVEN (0.5 % 2.1)", 0.5, 0.5 % 2.1);
AddTestCase("dqrem145:p9 r:HALF_EVEN (0.5 % 2.01)", 0.50, 0.5 % 2.01);
AddTestCase("dqrem146:p9 r:HALF_EVEN (0.5 % 2.001)", 0.500, 0.5 % 2.001);
AddTestCase("dqrem147:p9 r:HALF_EVEN (0.50 % 2)", 0.50, 0.50 % 2);
AddTestCase("dqrem148:p9 r:HALF_EVEN (0.50 % 2.01)", 0.50, 0.50 % 2.01);
AddTestCase("dqrem149:p9 r:HALF_EVEN (0.50 % 2.001)", 0.500, 0.50 % 2.001);
// steadies
AddTestCase("dqrem150:p9 r:HALF_EVEN (1 % 1)", 0, 1 % 1);
AddTestCase("dqrem151:p9 r:HALF_EVEN (1 % 2)", 1, 1 % 2);
AddTestCase("dqrem152:p9 r:HALF_EVEN (1 % 3)", 1, 1 % 3);
AddTestCase("dqrem153:p9 r:HALF_EVEN (1 % 4)", 1, 1 % 4);
AddTestCase("dqrem154:p9 r:HALF_EVEN (1 % 5)", 1, 1 % 5);
AddTestCase("dqrem155:p9 r:HALF_EVEN (1 % 6)", 1, 1 % 6);
AddTestCase("dqrem156:p9 r:HALF_EVEN (1 % 7)", 1, 1 % 7);
AddTestCase("dqrem157:p9 r:HALF_EVEN (1 % 8)", 1, 1 % 8);
AddTestCase("dqrem158:p9 r:HALF_EVEN (1 % 9)", 1, 1 % 9);
AddTestCase("dqrem159:p9 r:HALF_EVEN (1 % 10)", 1, 1 % 10);
AddTestCase("dqrem160:p9 r:HALF_EVEN (1 % 1)", 0, 1 % 1);
AddTestCase("dqrem161:p9 r:HALF_EVEN (2 % 1)", 0, 2 % 1);
AddTestCase("dqrem162:p9 r:HALF_EVEN (3 % 1)", 0, 3 % 1);
AddTestCase("dqrem163:p9 r:HALF_EVEN (4 % 1)", 0, 4 % 1);
AddTestCase("dqrem164:p9 r:HALF_EVEN (5 % 1)", 0, 5 % 1);
AddTestCase("dqrem165:p9 r:HALF_EVEN (6 % 1)", 0, 6 % 1);
AddTestCase("dqrem166:p9 r:HALF_EVEN (7 % 1)", 0, 7 % 1);
AddTestCase("dqrem167:p9 r:HALF_EVEN (8 % 1)", 0, 8 % 1);
AddTestCase("dqrem168:p9 r:HALF_EVEN (9 % 1)", 0, 9 % 1);
AddTestCase("dqrem169:p9 r:HALF_EVEN (10 % 1)", 0, 10 % 1);
// some differences from remaindernear
AddTestCase("dqrem171:p9 r:HALF_EVEN (0.4 % 1.020)", 0.400, 0.4 % 1.020);
AddTestCase("dqrem172:p9 r:HALF_EVEN (0.50 % 1.020)", 0.500, 0.50 % 1.020);
AddTestCase("dqrem173:p9 r:HALF_EVEN (0.51 % 1.020)", 0.510, 0.51 % 1.020);
AddTestCase("dqrem174:p9 r:HALF_EVEN (0.52 % 1.020)", 0.520, 0.52 % 1.020);
AddTestCase("dqrem175:p9 r:HALF_EVEN (0.6 % 1.020)", 0.600, 0.6 % 1.020);
// more flavours of remainder by 0
AddTestCase("dqrem201:p9 r:HALF_EVEN (0 % 0) division_undefined", NaN, 0 % 0);
AddTestCase("dqrem202:p9 r:HALF_EVEN (0.0e5 % 0) division_undefined", NaN, 0.0e5 % 0);
AddTestCase("dqrem203:p9 r:HALF_EVEN (0.000 % 0) division_undefined", NaN, 0.000 % 0);
AddTestCase("dqrem204:p9 r:HALF_EVEN (0.0001 % 0) invalid_operation", NaN, 0.0001 % 0);
AddTestCase("dqrem205:p9 r:HALF_EVEN (0.01 % 0) invalid_operation", NaN, 0.01 % 0);
AddTestCase("dqrem206:p9 r:HALF_EVEN (0.1 % 0) invalid_operation", NaN, 0.1 % 0);
AddTestCase("dqrem207:p9 r:HALF_EVEN (1 % 0) invalid_operation", NaN, 1 % 0);
AddTestCase("dqrem208:p9 r:HALF_EVEN (1 % 0.0) invalid_operation", NaN, 1 % 0.0);
AddTestCase("dqrem209:p9 r:HALF_EVEN (10 % 0.0) invalid_operation", NaN, 10 % 0.0);
AddTestCase("dqrem210:p9 r:HALF_EVEN (1e+100 % 0.0) invalid_operation", NaN, 1e+100 % 0.0);
AddTestCase("dqrem211:p9 r:HALF_EVEN (1e+380 % 0) invalid_operation", NaN, 1e+380 % 0);
// some differences from remaindernear
AddTestCase("dqrem231:p9 r:HALF_EVEN (-0.4 % 1.020)", -0.400, -0.4 % 1.020);
AddTestCase("dqrem232:p9 r:HALF_EVEN (-0.50 % 1.020)", -0.500, -0.50 % 1.020);
AddTestCase("dqrem233:p9 r:HALF_EVEN (-0.51 % 1.020)", -0.510, -0.51 % 1.020);
AddTestCase("dqrem234:p9 r:HALF_EVEN (-0.52 % 1.020)", -0.520, -0.52 % 1.020);
AddTestCase("dqrem235:p9 r:HALF_EVEN (-0.6 % 1.020)", -0.600, -0.6 % 1.020);
// high xs
AddTestCase("dqrem240:p9 r:HALF_EVEN (1e+2 % 1.00)", 0.00, 1e+2 % 1.00);
// dqrem3xx are from diagbigdecimal
AddTestCase("dqrem301:p9 r:HALF_EVEN (1 % 3)", 1, 1 % 3);
AddTestCase("dqrem302:p9 r:HALF_EVEN (5 % 5)", 0, 5 % 5);
AddTestCase("dqrem303:p9 r:HALF_EVEN (13 % 10)", 3, 13 % 10);
AddTestCase("dqrem304:p9 r:HALF_EVEN (13 % 50)", 13, 13 % 50);
AddTestCase("dqrem305:p9 r:HALF_EVEN (13 % 100)", 13, 13 % 100);
AddTestCase("dqrem306:p9 r:HALF_EVEN (13 % 1000)", 13, 13 % 1000);
AddTestCase("dqrem307:p9 r:HALF_EVEN (.13 % 1)", 0.13, .13 % 1);
AddTestCase("dqrem308:p9 r:HALF_EVEN (0.133 % 1)", 0.133, 0.133 % 1);
AddTestCase("dqrem309:p9 r:HALF_EVEN (0.1033 % 1)", 0.1033, 0.1033 % 1);
AddTestCase("dqrem310:p9 r:HALF_EVEN (1.033 % 1)", 0.033, 1.033 % 1);
AddTestCase("dqrem311:p9 r:HALF_EVEN (10.33 % 1)", 0.33, 10.33 % 1);
AddTestCase("dqrem312:p9 r:HALF_EVEN (10.33 % 10)", 0.33, 10.33 % 10);
AddTestCase("dqrem313:p9 r:HALF_EVEN (103.3 % 1)", 0.3, 103.3 % 1);
AddTestCase("dqrem314:p9 r:HALF_EVEN (133 % 10)", 3, 133 % 10);
AddTestCase("dqrem315:p9 r:HALF_EVEN (1033 % 10)", 3, 1033 % 10);
AddTestCase("dqrem316:p9 r:HALF_EVEN (1033 % 50)", 33, 1033 % 50);
AddTestCase("dqrem317:p9 r:HALF_EVEN (101.0 % 3)", 2.0, 101.0 % 3);
AddTestCase("dqrem318:p9 r:HALF_EVEN (102.0 % 3)", 0.0, 102.0 % 3);
AddTestCase("dqrem319:p9 r:HALF_EVEN (103.0 % 3)", 1.0, 103.0 % 3);
AddTestCase("dqrem320:p9 r:HALF_EVEN (2.40 % 1)", 0.40, 2.40 % 1);
AddTestCase("dqrem321:p9 r:HALF_EVEN (2.400 % 1)", 0.400, 2.400 % 1);
AddTestCase("dqrem322:p9 r:HALF_EVEN (2.4 % 1)", 0.4, 2.4 % 1);
AddTestCase("dqrem323:p9 r:HALF_EVEN (2.4 % 2)", 0.4, 2.4 % 2);
AddTestCase("dqrem324:p9 r:HALF_EVEN (2.400 % 2)", 0.400, 2.400 % 2);
AddTestCase("dqrem325:p9 r:HALF_EVEN (1 % 0.3)", 0.1, 1 % 0.3);
AddTestCase("dqrem326:p9 r:HALF_EVEN (1 % 0.30)", 0.10, 1 % 0.30);
AddTestCase("dqrem327:p9 r:HALF_EVEN (1 % 0.300)", 0.100, 1 % 0.300);
AddTestCase("dqrem328:p9 r:HALF_EVEN (1 % 0.3000)", 0.1000, 1 % 0.3000);
AddTestCase("dqrem329:p9 r:HALF_EVEN (1.0 % 0.3)", 0.1, 1.0 % 0.3);
AddTestCase("dqrem330:p9 r:HALF_EVEN (1.00 % 0.3)", 0.10, 1.00 % 0.3);
AddTestCase("dqrem331:p9 r:HALF_EVEN (1.000 % 0.3)", 0.100, 1.000 % 0.3);
AddTestCase("dqrem332:p9 r:HALF_EVEN (1.0000 % 0.3)", 0.1000, 1.0000 % 0.3);
AddTestCase("dqrem333:p9 r:HALF_EVEN (0.5 % 2)", 0.5, 0.5 % 2);
AddTestCase("dqrem334:p9 r:HALF_EVEN (0.5 % 2.1)", 0.5, 0.5 % 2.1);
AddTestCase("dqrem335:p9 r:HALF_EVEN (0.5 % 2.01)", 0.50, 0.5 % 2.01);
AddTestCase("dqrem336:p9 r:HALF_EVEN (0.5 % 2.001)", 0.500, 0.5 % 2.001);
AddTestCase("dqrem337:p9 r:HALF_EVEN (0.50 % 2)", 0.50, 0.50 % 2);
AddTestCase("dqrem338:p9 r:HALF_EVEN (0.50 % 2.01)", 0.50, 0.50 % 2.01);
AddTestCase("dqrem339:p9 r:HALF_EVEN (0.50 % 2.001)", 0.500, 0.50 % 2.001);
AddTestCase("dqrem340:p9 r:HALF_EVEN (0.5 % 0.5000001)", 0.5000000, 0.5 % 0.5000001);
AddTestCase("dqrem341:p9 r:HALF_EVEN (0.5 % 0.50000001)", 0.50000000, 0.5 % 0.50000001);
AddTestCase("dqrem342:p9 r:HALF_EVEN (0.5 % 0.500000001)", 0.500000000, 0.5 % 0.500000001);
AddTestCase("dqrem343:p9 r:HALF_EVEN (0.5 % 0.5000000001)", 0.5000000000, 0.5 % 0.5000000001);
AddTestCase("dqrem344:p9 r:HALF_EVEN (0.5 % 0.50000000001)", 0.50000000000, 0.5 % 0.50000000001);
AddTestCase("dqrem345:p9 r:HALF_EVEN (0.5 % 0.4999999)", 1e-7, 0.5 % 0.4999999);
AddTestCase("dqrem346:p9 r:HALF_EVEN (0.5 % 0.49999999)", 1e-8, 0.5 % 0.49999999);
AddTestCase("dqrem347:p9 r:HALF_EVEN (0.5 % 0.499999999)", 1e-9, 0.5 % 0.499999999);
AddTestCase("dqrem348:p9 r:HALF_EVEN (0.5 % 0.4999999999)", 1e-10, 0.5 % 0.4999999999);
AddTestCase("dqrem349:p9 r:HALF_EVEN (0.5 % 0.49999999999)", 1e-11, 0.5 % 0.49999999999);
AddTestCase("dqrem350:p9 r:HALF_EVEN (0.5 % 0.499999999999)", 1e-12, 0.5 % 0.499999999999);
AddTestCase("dqrem351:p9 r:HALF_EVEN (0.03 % 7)", 0.03, 0.03 % 7);
AddTestCase("dqrem352:p9 r:HALF_EVEN (5 % 2)", 1, 5 % 2);
AddTestCase("dqrem353:p9 r:HALF_EVEN (4.1 % 2)", 0.1, 4.1 % 2);
AddTestCase("dqrem354:p9 r:HALF_EVEN (4.01 % 2)", 0.01, 4.01 % 2);
AddTestCase("dqrem355:p9 r:HALF_EVEN (4.001 % 2)", 0.001, 4.001 % 2);
AddTestCase("dqrem356:p9 r:HALF_EVEN (4.0001 % 2)", 0.0001, 4.0001 % 2);
AddTestCase("dqrem357:p9 r:HALF_EVEN (4.00001 % 2)", 0.00001, 4.00001 % 2);
AddTestCase("dqrem358:p9 r:HALF_EVEN (4.000001 % 2)", 0.000001, 4.000001 % 2);
AddTestCase("dqrem359:p9 r:HALF_EVEN (4.0000001 % 2)", 1e-7, 4.0000001 % 2);
AddTestCase("dqrem360:p9 r:HALF_EVEN (1.2 % 0.7345)", 0.4655, 1.2 % 0.7345);
AddTestCase("dqrem361:p9 r:HALF_EVEN (0.8 % 12)", 0.8, 0.8 % 12);
AddTestCase("dqrem362:p9 r:HALF_EVEN (0.8 % 0.2)", 0.0, 0.8 % 0.2);
AddTestCase("dqrem363:p9 r:HALF_EVEN (0.8 % 0.3)", 0.2, 0.8 % 0.3);
AddTestCase("dqrem364:p9 r:HALF_EVEN (0.800 % 12)", 0.800, 0.800 % 12);
AddTestCase("dqrem365:p9 r:HALF_EVEN (0.800 % 1.7)", 0.800, 0.800 % 1.7);
AddTestCase("dqrem366:p9 r:HALF_EVEN (2.400 % 2)", 0.400, 2.400 % 2);
AddTestCase("dqrem371:p9 r:HALF_EVEN (2.400 % 2)", 0.400, 2.400 % 2);
AddTestCase("dqrem381:p9 r:HALF_EVEN (12345 % 1)", 0, 12345 % 1);
AddTestCase("dqrem382:p9 r:HALF_EVEN (12345 % 1.0001)", 0.7657, 12345 % 1.0001);
AddTestCase("dqrem383:p9 r:HALF_EVEN (12345 % 1.001)", 0.668, 12345 % 1.001);
AddTestCase("dqrem384:p9 r:HALF_EVEN (12345 % 1.01)", 0.78, 12345 % 1.01);
AddTestCase("dqrem385:p9 r:HALF_EVEN (12345 % 1.1)", 0.8, 12345 % 1.1);
AddTestCase("dqrem386:p9 r:HALF_EVEN (12355 % 4)", 3, 12355 % 4);
AddTestCase("dqrem387:p9 r:HALF_EVEN (12345 % 4)", 1, 12345 % 4);
AddTestCase("dqrem388:p9 r:HALF_EVEN (12355 % 4.0001)", 2.6912, 12355 % 4.0001);
AddTestCase("dqrem389:p9 r:HALF_EVEN (12345 % 4.0001)", 0.6914, 12345 % 4.0001);
AddTestCase("dqrem390:p9 r:HALF_EVEN (12345 % 4.9)", 1.9, 12345 % 4.9);
AddTestCase("dqrem391:p9 r:HALF_EVEN (12345 % 4.99)", 4.73, 12345 % 4.99);
AddTestCase("dqrem392:p9 r:HALF_EVEN (12345 % 4.999)", 2.469, 12345 % 4.999);
AddTestCase("dqrem393:p9 r:HALF_EVEN (12345 % 4.9999)", 0.2469, 12345 % 4.9999);
AddTestCase("dqrem394:p9 r:HALF_EVEN (12345 % 5)", 0, 12345 % 5);
AddTestCase("dqrem395:p9 r:HALF_EVEN (12345 % 5.0001)", 4.7532, 12345 % 5.0001);
AddTestCase("dqrem396:p9 r:HALF_EVEN (12345 % 5.001)", 2.532, 12345 % 5.001);
AddTestCase("dqrem397:p9 r:HALF_EVEN (12345 % 5.01)", 0.36, 12345 % 5.01);
AddTestCase("dqrem398:p9 r:HALF_EVEN (12345 % 5.1)", 3.0, 12345 % 5.1);
// the nasty division-by-1 cases
AddTestCase("dqrem401:p9 r:HALF_EVEN (0.5 % 1)", 0.5, 0.5 % 1);
AddTestCase("dqrem402:p9 r:HALF_EVEN (0.55 % 1)", 0.55, 0.55 % 1);
AddTestCase("dqrem403:p9 r:HALF_EVEN (0.555 % 1)", 0.555, 0.555 % 1);
AddTestCase("dqrem404:p9 r:HALF_EVEN (0.5555 % 1)", 0.5555, 0.5555 % 1);
AddTestCase("dqrem405:p9 r:HALF_EVEN (0.55555 % 1)", 0.55555, 0.55555 % 1);
AddTestCase("dqrem406:p9 r:HALF_EVEN (0.555555 % 1)", 0.555555, 0.555555 % 1);
AddTestCase("dqrem407:p9 r:HALF_EVEN (0.5555555 % 1)", 0.5555555, 0.5555555 % 1);
AddTestCase("dqrem408:p9 r:HALF_EVEN (0.55555555 % 1)", 0.55555555, 0.55555555 % 1);
AddTestCase("dqrem409:p9 r:HALF_EVEN (0.555555555 % 1)", 0.555555555, 0.555555555 % 1);
// folddowns
AddTestCase("dqrem421:p9 r:HALF_EVEN (1e+6144 % 1) division_impossible", NaN, 1e+6144 % 1);
// tinies
AddTestCase("dqrem431:p9 r:HALF_EVEN (1e-6175 % 1e-6176)", 0e-6176, 1e-6175 % 1e-6176);
AddTestCase("dqrem432:p9 r:HALF_EVEN (1e-6175 % 2e-6176)", 0e-6176, 1e-6175 % 2e-6176);
AddTestCase("dqrem435:p9 r:HALF_EVEN (1e-6175 % 5e-6176)", 0e-6176, 1e-6175 % 5e-6176);
AddTestCase("dqrem440:p9 r:HALF_EVEN (1e-6175 % 10e-6176)", 0e-6176, 1e-6175 % 10e-6176);
AddTestCase("dqrem443:p9 r:HALF_EVEN (100e-6175 % 20e-6176)", 0e-6176, 100e-6175 % 20e-6176);
// specials
AddTestCase("dqrem680:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem681:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % -1000) invalid_operation", NaN, decimal.POSITIVE_INFINITY % -1000);
AddTestCase("dqrem682:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % -1) invalid_operation", NaN, decimal.POSITIVE_INFINITY % -1);
AddTestCase("dqrem683:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % 0) invalid_operation", NaN, decimal.POSITIVE_INFINITY % 0);
AddTestCase("dqrem684:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % -0) invalid_operation", NaN, decimal.POSITIVE_INFINITY % -0);
AddTestCase("dqrem685:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % 1) invalid_operation", NaN, decimal.POSITIVE_INFINITY % 1);
AddTestCase("dqrem686:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % 1000) invalid_operation", NaN, decimal.POSITIVE_INFINITY % 1000);
AddTestCase("dqrem687:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % decimal.POSITIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem688:p9 r:HALF_EVEN (-1000 % decimal.POSITIVE_INFINITY)", -1000, -1000 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem689:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % decimal.POSITIVE_INFINITY) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem691:p9 r:HALF_EVEN (-1 % decimal.POSITIVE_INFINITY)", -1, -1 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem692:p9 r:HALF_EVEN (0 % decimal.POSITIVE_INFINITY)", 0, 0 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem693:p9 r:HALF_EVEN (-0 % decimal.POSITIVE_INFINITY)", -0, -0 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem694:p9 r:HALF_EVEN (1 % decimal.POSITIVE_INFINITY)", 1, 1 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem695:p9 r:HALF_EVEN (1000 % decimal.POSITIVE_INFINITY)", 1000, 1000 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem696:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % decimal.POSITIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem700:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem701:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % -1000) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % -1000);
AddTestCase("dqrem702:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % -1) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % -1);
AddTestCase("dqrem703:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % -0) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % -0);
AddTestCase("dqrem704:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % 0) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % 0);
AddTestCase("dqrem705:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % 1) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % 1);
AddTestCase("dqrem706:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % 1000) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % 1000);
AddTestCase("dqrem707:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % decimal.POSITIVE_INFINITY) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem708:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem709:p9 r:HALF_EVEN (-1000 % decimal.POSITIVE_INFINITY)", -1000, -1000 % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem710:p9 r:HALF_EVEN (-1 % decimal.NEGATIVE_INFINITY)", -1, -1 % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem711:p9 r:HALF_EVEN (-0 % decimal.NEGATIVE_INFINITY)", -0, -0 % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem712:p9 r:HALF_EVEN (0 % decimal.NEGATIVE_INFINITY)", 0, 0 % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem713:p9 r:HALF_EVEN (1 % decimal.NEGATIVE_INFINITY)", 1, 1 % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem714:p9 r:HALF_EVEN (1000 % decimal.NEGATIVE_INFINITY)", 1000, 1000 % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem715:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem721:p9 r:HALF_EVEN (NaN % decimal.NEGATIVE_INFINITY)", NaN, NaN % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem722:p9 r:HALF_EVEN (NaN % -1000)", NaN, NaN % -1000);
AddTestCase("dqrem723:p9 r:HALF_EVEN (NaN % -1)", NaN, NaN % -1);
AddTestCase("dqrem724:p9 r:HALF_EVEN (NaN % -0)", NaN, NaN % -0);
AddTestCase("dqrem725:p9 r:HALF_EVEN (-NaN % 0)", -NaN, -NaN % 0);
AddTestCase("dqrem726:p9 r:HALF_EVEN (NaN % 1)", NaN, NaN % 1);
AddTestCase("dqrem727:p9 r:HALF_EVEN (NaN % 1000)", NaN, NaN % 1000);
AddTestCase("dqrem728:p9 r:HALF_EVEN (NaN % decimal.POSITIVE_INFINITY)", NaN, NaN % decimal.POSITIVE_INFINITY);
AddTestCase("dqrem729:p9 r:HALF_EVEN (NaN % -NaN)", NaN, NaN % -NaN);
AddTestCase("dqrem730:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % NaN)", NaN, decimal.NEGATIVE_INFINITY % NaN);
AddTestCase("dqrem731:p9 r:HALF_EVEN (-1000 % NaN)", NaN, -1000 % NaN);
AddTestCase("dqrem732:p9 r:HALF_EVEN (-1 % NaN)", NaN, -1 % NaN);
AddTestCase("dqrem733:p9 r:HALF_EVEN (-0 % -NaN)", -NaN, -0 % -NaN);
AddTestCase("dqrem734:p9 r:HALF_EVEN (0 % NaN)", NaN, 0 % NaN);
AddTestCase("dqrem735:p9 r:HALF_EVEN (1 % -NaN)", -NaN, 1 % -NaN);
AddTestCase("dqrem736:p9 r:HALF_EVEN (1000 % NaN)", NaN, 1000 % NaN);
AddTestCase("dqrem737:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % NaN)", NaN, decimal.POSITIVE_INFINITY % NaN);
AddTestCase("dqrem741:p9 r:HALF_EVEN (NaN % decimal.NEGATIVE_INFINITY) invalid_operation", NaN, NaN % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem742:p9 r:HALF_EVEN (NaN % -1000) invalid_operation", NaN, NaN % -1000);
AddTestCase("dqrem743:p9 r:HALF_EVEN (-NaN % -1) invalid_operation", -NaN, -NaN % -1);
AddTestCase("dqrem744:p9 r:HALF_EVEN (NaN % -0) invalid_operation", NaN, NaN % -0);
AddTestCase("dqrem745:p9 r:HALF_EVEN (NaN % 0) invalid_operation", NaN, NaN % 0);
AddTestCase("dqrem746:p9 r:HALF_EVEN (NaN % 1) invalid_operation", NaN, NaN % 1);
AddTestCase("dqrem747:p9 r:HALF_EVEN (NaN % 1000) invalid_operation", NaN, NaN % 1000);
AddTestCase("dqrem749:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem750:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem751:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem752:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY % NaN) invalid_operation", NaN, decimal.NEGATIVE_INFINITY % NaN);
AddTestCase("dqrem753:p9 r:HALF_EVEN (-1000 % NaN) invalid_operation", NaN, -1000 % NaN);
AddTestCase("dqrem754:p9 r:HALF_EVEN (-1 % NaN) invalid_operation", NaN, -1 % NaN);
AddTestCase("dqrem755:p9 r:HALF_EVEN (-0 % NaN) invalid_operation", NaN, -0 % NaN);
AddTestCase("dqrem756:p9 r:HALF_EVEN (0 % NaN) invalid_operation", NaN, 0 % NaN);
AddTestCase("dqrem757:p9 r:HALF_EVEN (1 % NaN) invalid_operation", NaN, 1 % NaN);
AddTestCase("dqrem758:p9 r:HALF_EVEN (1000 % NaN) invalid_operation", NaN, 1000 % NaN);
AddTestCase("dqrem759:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % -NaN) invalid_operation", -NaN, decimal.POSITIVE_INFINITY % -NaN);
// propaging nans
AddTestCase("dqrem760:p9 r:HALF_EVEN (NaN % NaN)", NaN, NaN % NaN);
AddTestCase("dqrem761:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem762:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem763:p9 r:HALF_EVEN (NaN % NaN) invalid_operation", NaN, NaN % NaN);
AddTestCase("dqrem764:p9 r:HALF_EVEN (15 % NaN)", NaN, 15 % NaN);
AddTestCase("dqrem765:p9 r:HALF_EVEN (NaN % NaN)", NaN, NaN % NaN);
AddTestCase("dqrem766:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY % NaN)", NaN, decimal.POSITIVE_INFINITY % NaN);
AddTestCase("dqrem767:p9 r:HALF_EVEN (NaN % decimal.NEGATIVE_INFINITY)", NaN, NaN % decimal.NEGATIVE_INFINITY);
AddTestCase("dqrem768:p9 r:HALF_EVEN (0 % NaN)", NaN, 0 % NaN);
AddTestCase("dqrem769:p9 r:HALF_EVEN (NaN % -0)", NaN, NaN % -0);
// edge cases of impossible
AddTestCase("dqrem770:p9 r:HALF_EVEN (1234568888888887777777777890123456 % 10)", 6, 1234568888888887777777777890123456 % 10);
AddTestCase("dqrem771:p9 r:HALF_EVEN (1234568888888887777777777890123456 % 1)", 0, 1234568888888887777777777890123456 % 1);
AddTestCase("dqrem772:p9 r:HALF_EVEN (1234568888888887777777777890123456 % 0.1) division_impossible", NaN, 1234568888888887777777777890123456 % 0.1);
AddTestCase("dqrem773:p9 r:HALF_EVEN (1234568888888887777777777890123456 % 0.01) division_impossible", NaN, 1234568888888887777777777890123456 % 0.01);
// long operand checks
AddTestCase("dqrem801:p9 r:HALF_EVEN (12345678000 % 100)", 0, 12345678000 % 100);
AddTestCase("dqrem802:p9 r:HALF_EVEN (1 % 12345678000)", 1, 1 % 12345678000);
AddTestCase("dqrem803:p9 r:HALF_EVEN (1234567800 % 10)", 0, 1234567800 % 10);
AddTestCase("dqrem804:p9 r:HALF_EVEN (1 % 1234567800)", 1, 1 % 1234567800);
AddTestCase("dqrem805:p9 r:HALF_EVEN (1234567890 % 10)", 0, 1234567890 % 10);
AddTestCase("dqrem806:p9 r:HALF_EVEN (1 % 1234567890)", 1, 1 % 1234567890);
AddTestCase("dqrem807:p9 r:HALF_EVEN (1234567891 % 10)", 1, 1234567891 % 10);
AddTestCase("dqrem808:p9 r:HALF_EVEN (1 % 1234567891)", 1, 1 % 1234567891);
AddTestCase("dqrem809:p9 r:HALF_EVEN (12345678901 % 100)", 1, 12345678901 % 100);
AddTestCase("dqrem810:p9 r:HALF_EVEN (1 % 12345678901)", 1, 1 % 12345678901);
AddTestCase("dqrem811:p9 r:HALF_EVEN (1234567896 % 10)", 6, 1234567896 % 10);
AddTestCase("dqrem812:p9 r:HALF_EVEN (1 % 1234567896)", 1, 1 % 1234567896);
AddTestCase("dqrem821:p9 r:HALF_EVEN (12345678000 % 100)", 0, 12345678000 % 100);
AddTestCase("dqrem822:p9 r:HALF_EVEN (1 % 12345678000)", 1, 1 % 12345678000);
AddTestCase("dqrem823:p9 r:HALF_EVEN (1234567800 % 10)", 0, 1234567800 % 10);
AddTestCase("dqrem824:p9 r:HALF_EVEN (1 % 1234567800)", 1, 1 % 1234567800);
AddTestCase("dqrem825:p9 r:HALF_EVEN (1234567890 % 10)", 0, 1234567890 % 10);
AddTestCase("dqrem826:p9 r:HALF_EVEN (1 % 1234567890)", 1, 1 % 1234567890);
AddTestCase("dqrem827:p9 r:HALF_EVEN (1234567891 % 10)", 1, 1234567891 % 10);
AddTestCase("dqrem828:p9 r:HALF_EVEN (1 % 1234567891)", 1, 1 % 1234567891);
AddTestCase("dqrem829:p9 r:HALF_EVEN (12345678901 % 100)", 1, 12345678901 % 100);
AddTestCase("dqrem830:p9 r:HALF_EVEN (1 % 12345678901)", 1, 1 % 12345678901);
AddTestCase("dqrem831:p9 r:HALF_EVEN (1234567896 % 10)", 6, 1234567896 % 10);
AddTestCase("dqrem832:p9 r:HALF_EVEN (1 % 1234567896)", 1, 1 % 1234567896);
// from divideint
AddTestCase("dqrem840:p9 r:HALF_EVEN (100000000.0 % 1)", 0.0, 100000000.0 % 1);
AddTestCase("dqrem841:p9 r:HALF_EVEN (100000000.4 % 1)", 0.4, 100000000.4 % 1);
AddTestCase("dqrem842:p9 r:HALF_EVEN (100000000.5 % 1)", 0.5, 100000000.5 % 1);
AddTestCase("dqrem843:p9 r:HALF_EVEN (100000000.9 % 1)", 0.9, 100000000.9 % 1);
AddTestCase("dqrem844:p9 r:HALF_EVEN (100000000.999 % 1)", 0.999, 100000000.999 % 1);
AddTestCase("dqrem850:p9 r:HALF_EVEN (100000003 % 5)", 3, 100000003 % 5);
AddTestCase("dqrem851:p9 r:HALF_EVEN (10000003 % 5)", 3, 10000003 % 5);
AddTestCase("dqrem852:p9 r:HALF_EVEN (1000003 % 5)", 3, 1000003 % 5);
AddTestCase("dqrem853:p9 r:HALF_EVEN (100003 % 5)", 3, 100003 % 5);
AddTestCase("dqrem854:p9 r:HALF_EVEN (10003 % 5)", 3, 10003 % 5);
AddTestCase("dqrem855:p9 r:HALF_EVEN (1003 % 5)", 3, 1003 % 5);
AddTestCase("dqrem856:p9 r:HALF_EVEN (103 % 5)", 3, 103 % 5);
AddTestCase("dqrem857:p9 r:HALF_EVEN (13 % 5)", 3, 13 % 5);
AddTestCase("dqrem858:p9 r:HALF_EVEN (1 % 5)", 1, 1 % 5);
// vladimir's cases         1234567890123456
AddTestCase("dqrem860:p9 r:HALF_EVEN (123.0e1 % 1000000000000000)", 1230, 123.0e1 % 1000000000000000);
AddTestCase("dqrem861:p9 r:HALF_EVEN (1230 % 1000000000000000)", 1230, 1230 % 1000000000000000);
AddTestCase("dqrem862:p9 r:HALF_EVEN (12.3e2 % 1000000000000000)", 1230, 12.3e2 % 1000000000000000);
AddTestCase("dqrem863:p9 r:HALF_EVEN (1.23e3 % 1000000000000000)", 1230, 1.23e3 % 1000000000000000);
AddTestCase("dqrem864:p9 r:HALF_EVEN (123e1 % 1000000000000000)", 1230, 123e1 % 1000000000000000);
AddTestCase("dqrem870:p9 r:HALF_EVEN (123e1 % 1000000000000000)", 1230, 123e1 % 1000000000000000);
AddTestCase("dqrem871:p9 r:HALF_EVEN (123e1 % 100000000000000)", 1230, 123e1 % 100000000000000);
AddTestCase("dqrem872:p9 r:HALF_EVEN (123e1 % 10000000000000)", 1230, 123e1 % 10000000000000);
AddTestCase("dqrem873:p9 r:HALF_EVEN (123e1 % 1000000000000)", 1230, 123e1 % 1000000000000);
AddTestCase("dqrem874:p9 r:HALF_EVEN (123e1 % 100000000000)", 1230, 123e1 % 100000000000);
AddTestCase("dqrem875:p9 r:HALF_EVEN (123e1 % 10000000000)", 1230, 123e1 % 10000000000);
AddTestCase("dqrem876:p9 r:HALF_EVEN (123e1 % 1000000000)", 1230, 123e1 % 1000000000);
AddTestCase("dqrem877:p9 r:HALF_EVEN (123e1 % 100000000)", 1230, 123e1 % 100000000);
AddTestCase("dqrem878:p9 r:HALF_EVEN (1230 % 100000000)", 1230, 1230 % 100000000);
AddTestCase("dqrem879:p9 r:HALF_EVEN (123e1 % 10000000)", 1230, 123e1 % 10000000);
AddTestCase("dqrem880:p9 r:HALF_EVEN (123e1 % 1000000)", 1230, 123e1 % 1000000);
AddTestCase("dqrem881:p9 r:HALF_EVEN (123e1 % 100000)", 1230, 123e1 % 100000);
AddTestCase("dqrem882:p9 r:HALF_EVEN (123e1 % 10000)", 1230, 123e1 % 10000);
AddTestCase("dqrem883:p9 r:HALF_EVEN (123e1 % 1000)", 230, 123e1 % 1000);
AddTestCase("dqrem884:p9 r:HALF_EVEN (123e1 % 100)", 30, 123e1 % 100);
AddTestCase("dqrem885:p9 r:HALF_EVEN (123e1 % 10)", 0, 123e1 % 10);
AddTestCase("dqrem886:p9 r:HALF_EVEN (123e1 % 1)", 0, 123e1 % 1);
AddTestCase("dqrem890:p9 r:HALF_EVEN (123e1 % 2000000000000000)", 1230, 123e1 % 2000000000000000);
AddTestCase("dqrem891:p9 r:HALF_EVEN (123e1 % 200000000000000)", 1230, 123e1 % 200000000000000);
AddTestCase("dqrem892:p9 r:HALF_EVEN (123e1 % 20000000000000)", 1230, 123e1 % 20000000000000);
AddTestCase("dqrem893:p9 r:HALF_EVEN (123e1 % 2000000000000)", 1230, 123e1 % 2000000000000);
AddTestCase("dqrem894:p9 r:HALF_EVEN (123e1 % 200000000000)", 1230, 123e1 % 200000000000);
AddTestCase("dqrem895:p9 r:HALF_EVEN (123e1 % 20000000000)", 1230, 123e1 % 20000000000);
AddTestCase("dqrem896:p9 r:HALF_EVEN (123e1 % 2000000000)", 1230, 123e1 % 2000000000);
AddTestCase("dqrem897:p9 r:HALF_EVEN (123e1 % 200000000)", 1230, 123e1 % 200000000);
AddTestCase("dqrem899:p9 r:HALF_EVEN (123e1 % 20000000)", 1230, 123e1 % 20000000);
AddTestCase("dqrem900:p9 r:HALF_EVEN (123e1 % 2000000)", 1230, 123e1 % 2000000);
AddTestCase("dqrem901:p9 r:HALF_EVEN (123e1 % 200000)", 1230, 123e1 % 200000);
AddTestCase("dqrem902:p9 r:HALF_EVEN (123e1 % 20000)", 1230, 123e1 % 20000);
AddTestCase("dqrem903:p9 r:HALF_EVEN (123e1 % 2000)", 1230, 123e1 % 2000);
AddTestCase("dqrem904:p9 r:HALF_EVEN (123e1 % 200)", 30, 123e1 % 200);
AddTestCase("dqrem905:p9 r:HALF_EVEN (123e1 % 20)", 10, 123e1 % 20);
AddTestCase("dqrem906:p9 r:HALF_EVEN (123e1 % 2)", 0, 123e1 % 2);
AddTestCase("dqrem910:p9 r:HALF_EVEN (123e1 % 5000000000000000)", 1230, 123e1 % 5000000000000000);
AddTestCase("dqrem911:p9 r:HALF_EVEN (123e1 % 500000000000000)", 1230, 123e1 % 500000000000000);
AddTestCase("dqrem912:p9 r:HALF_EVEN (123e1 % 50000000000000)", 1230, 123e1 % 50000000000000);
AddTestCase("dqrem913:p9 r:HALF_EVEN (123e1 % 5000000000000)", 1230, 123e1 % 5000000000000);
AddTestCase("dqrem914:p9 r:HALF_EVEN (123e1 % 500000000000)", 1230, 123e1 % 500000000000);
AddTestCase("dqrem915:p9 r:HALF_EVEN (123e1 % 50000000000)", 1230, 123e1 % 50000000000);
AddTestCase("dqrem916:p9 r:HALF_EVEN (123e1 % 5000000000)", 1230, 123e1 % 5000000000);
AddTestCase("dqrem917:p9 r:HALF_EVEN (123e1 % 500000000)", 1230, 123e1 % 500000000);
AddTestCase("dqrem919:p9 r:HALF_EVEN (123e1 % 50000000)", 1230, 123e1 % 50000000);
AddTestCase("dqrem920:p9 r:HALF_EVEN (123e1 % 5000000)", 1230, 123e1 % 5000000);
AddTestCase("dqrem921:p9 r:HALF_EVEN (123e1 % 500000)", 1230, 123e1 % 500000);
AddTestCase("dqrem922:p9 r:HALF_EVEN (123e1 % 50000)", 1230, 123e1 % 50000);
AddTestCase("dqrem923:p9 r:HALF_EVEN (123e1 % 5000)", 1230, 123e1 % 5000);
AddTestCase("dqrem924:p9 r:HALF_EVEN (123e1 % 500)", 230, 123e1 % 500);
AddTestCase("dqrem925:p9 r:HALF_EVEN (123e1 % 50)", 30, 123e1 % 50);
AddTestCase("dqrem926:p9 r:HALF_EVEN (123e1 % 5)", 0, 123e1 % 5);
AddTestCase("dqrem930:p9 r:HALF_EVEN (123e1 % 9000000000000000)", 1230, 123e1 % 9000000000000000);
AddTestCase("dqrem931:p9 r:HALF_EVEN (123e1 % 900000000000000)", 1230, 123e1 % 900000000000000);
AddTestCase("dqrem932:p9 r:HALF_EVEN (123e1 % 90000000000000)", 1230, 123e1 % 90000000000000);
AddTestCase("dqrem933:p9 r:HALF_EVEN (123e1 % 9000000000000)", 1230, 123e1 % 9000000000000);
AddTestCase("dqrem934:p9 r:HALF_EVEN (123e1 % 900000000000)", 1230, 123e1 % 900000000000);
AddTestCase("dqrem935:p9 r:HALF_EVEN (123e1 % 90000000000)", 1230, 123e1 % 90000000000);
AddTestCase("dqrem936:p9 r:HALF_EVEN (123e1 % 9000000000)", 1230, 123e1 % 9000000000);
AddTestCase("dqrem937:p9 r:HALF_EVEN (123e1 % 900000000)", 1230, 123e1 % 900000000);
AddTestCase("dqrem939:p9 r:HALF_EVEN (123e1 % 90000000)", 1230, 123e1 % 90000000);
AddTestCase("dqrem940:p9 r:HALF_EVEN (123e1 % 9000000)", 1230, 123e1 % 9000000);
AddTestCase("dqrem941:p9 r:HALF_EVEN (123e1 % 900000)", 1230, 123e1 % 900000);
AddTestCase("dqrem942:p9 r:HALF_EVEN (123e1 % 90000)", 1230, 123e1 % 90000);
AddTestCase("dqrem943:p9 r:HALF_EVEN (123e1 % 9000)", 1230, 123e1 % 9000);
AddTestCase("dqrem944:p9 r:HALF_EVEN (123e1 % 900)", 330, 123e1 % 900);
AddTestCase("dqrem945:p9 r:HALF_EVEN (123e1 % 90)", 60, 123e1 % 90);
AddTestCase("dqrem946:p9 r:HALF_EVEN (123e1 % 9)", 6, 123e1 % 9);
AddTestCase("dqrem950:p9 r:HALF_EVEN (123e1 % 1000000000000000)", 1230, 123e1 % 1000000000000000);
AddTestCase("dqrem961:p9 r:HALF_EVEN (123e1 % 2999999999999999)", 1230, 123e1 % 2999999999999999);
AddTestCase("dqrem962:p9 r:HALF_EVEN (123e1 % 3999999999999999)", 1230, 123e1 % 3999999999999999);
AddTestCase("dqrem963:p9 r:HALF_EVEN (123e1 % 4999999999999999)", 1230, 123e1 % 4999999999999999);
AddTestCase("dqrem964:p9 r:HALF_EVEN (123e1 % 5999999999999999)", 1230, 123e1 % 5999999999999999);
AddTestCase("dqrem965:p9 r:HALF_EVEN (123e1 % 6999999999999999)", 1230, 123e1 % 6999999999999999);
AddTestCase("dqrem966:p9 r:HALF_EVEN (123e1 % 7999999999999999)", 1230, 123e1 % 7999999999999999);
AddTestCase("dqrem967:p9 r:HALF_EVEN (123e1 % 8999999999999999)", 1230, 123e1 % 8999999999999999);
AddTestCase("dqrem968:p9 r:HALF_EVEN (123e1 % 9999999999999999)", 1230, 123e1 % 9999999999999999);
AddTestCase("dqrem969:p9 r:HALF_EVEN (123e1 % 9876543210987654)", 1230, 123e1 % 9876543210987654);
AddTestCase("dqrem980:p9 r:HALF_EVEN (123e1 % 1000e299) -- 123e+1 internally", 1.23e+3, 123e1 % 1000e299);
// overflow and underflow tests [from divide]
AddTestCase("dqrem1051:p9 r:HALF_EVEN (1e+277 % 1e-311) division_impossible", NaN, 1e+277 % 1e-311);
AddTestCase("dqrem1052:p9 r:HALF_EVEN (1e+277 % -1e-311) division_impossible", NaN, 1e+277 % -1e-311);
AddTestCase("dqrem1053:p9 r:HALF_EVEN (-1e+277 % 1e-311) division_impossible", NaN, -1e+277 % 1e-311);
AddTestCase("dqrem1054:p9 r:HALF_EVEN (-1e+277 % -1e-311) division_impossible", NaN, -1e+277 % -1e-311);
AddTestCase("dqrem1055:p9 r:HALF_EVEN (1e-277 % 1e+311)", 1e-277, 1e-277 % 1e+311);
AddTestCase("dqrem1056:p9 r:HALF_EVEN (1e-277 % -1e+311)", 1e-277, 1e-277 % -1e+311);
AddTestCase("dqrem1057:p9 r:HALF_EVEN (-1e-277 % 1e+311)", -1e-277, -1e-277 % 1e+311);
AddTestCase("dqrem1058:p9 r:HALF_EVEN (-1e-277 % -1e+311)", -1e-277, -1e-277 % -1e+311);
// null tests
AddTestCase("dqrem1000:p9 r:HALF_EVEN (10 % null) invalid_operation", NaN, 10 % null);
AddTestCase("dqrem1001:p9 r:HALF_EVEN (null % 10) invalid_operation", 0, null % 10);
}
test();

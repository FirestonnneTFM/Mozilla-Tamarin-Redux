use decimal;
var SECTION = "Decimal";
var VERSION = "ES4";
var TITLE = "dqSubtract.decTest";
var BUGNUMBER = "";
startTest();
{
//----------------------------------------------------------------------
// dqsubtract.dectest -- decquad subtraction                          --
// copyright (c) ibm corporation, 1981, 2007.  all rights reserved.   --
//----------------------------------------------------------------------
// please see the document "general decimal arithmetic testcases"     --
// at http://www2.hursley.ibm.com/decimal for the description of      --
// these testcases.                                                   --
//                                                                    --
// these testcases are experimental ('beta' versions), and they       --
// may contain errors.  they are offered on an as-is basis.  in       --
// particular, achieving the same results as the tests here is not    --
// a guarantee that an implementation complies with any standard      --
// or specification.  the tests are not exhaustive.                   --
//                                                                    --
// please send comments, suggestions, and corrections to the author:  --
//   mike cowlishaw, ibm fellow                                       --
//   ibm uk, po box 31, birmingham road, warwick cv34 5jl, uk         --
//   mfc@uk.ibm.com                                                   --
//----------------------------------------------------------------------
// version: 2.55
// this set of tests are for decquads only; all arguments are
// representable in a decquad
use rounding HALF_EVEN;
// [first group are 'quick confidence check']
AddTestCase("dqsub001:p9 r:HALF_EVEN (0 - 0)", 0, 0 - 0);
AddTestCase("dqsub002:p9 r:HALF_EVEN (1 - 1)", 0, 1 - 1);
AddTestCase("dqsub003:p9 r:HALF_EVEN (1 - 2)", -1, 1 - 2);
AddTestCase("dqsub004:p9 r:HALF_EVEN (2 - 1)", 1, 2 - 1);
AddTestCase("dqsub005:p9 r:HALF_EVEN (2 - 2)", 0, 2 - 2);
AddTestCase("dqsub006:p9 r:HALF_EVEN (3 - 2)", 1, 3 - 2);
AddTestCase("dqsub007:p9 r:HALF_EVEN (2 - 3)", -1, 2 - 3);
AddTestCase("dqsub011:p9 r:HALF_EVEN (-0 - 0)", -0, -0 - 0);
AddTestCase("dqsub012:p9 r:HALF_EVEN (-1 - 1)", -2, -1 - 1);
AddTestCase("dqsub013:p9 r:HALF_EVEN (-1 - 2)", -3, -1 - 2);
AddTestCase("dqsub014:p9 r:HALF_EVEN (-2 - 1)", -3, -2 - 1);
AddTestCase("dqsub015:p9 r:HALF_EVEN (-2 - 2)", -4, -2 - 2);
AddTestCase("dqsub016:p9 r:HALF_EVEN (-3 - 2)", -5, -3 - 2);
AddTestCase("dqsub017:p9 r:HALF_EVEN (-2 - 3)", -5, -2 - 3);
AddTestCase("dqsub021:p9 r:HALF_EVEN (0 - -0)", 0, 0 - -0);
AddTestCase("dqsub022:p9 r:HALF_EVEN (1 - -1)", 2, 1 - -1);
AddTestCase("dqsub023:p9 r:HALF_EVEN (1 - -2)", 3, 1 - -2);
AddTestCase("dqsub024:p9 r:HALF_EVEN (2 - -1)", 3, 2 - -1);
AddTestCase("dqsub025:p9 r:HALF_EVEN (2 - -2)", 4, 2 - -2);
AddTestCase("dqsub026:p9 r:HALF_EVEN (3 - -2)", 5, 3 - -2);
AddTestCase("dqsub027:p9 r:HALF_EVEN (2 - -3)", 5, 2 - -3);
AddTestCase("dqsub030:p9 r:HALF_EVEN (11 - 1)", 10, 11 - 1);
AddTestCase("dqsub031:p9 r:HALF_EVEN (10 - 1)", 9, 10 - 1);
AddTestCase("dqsub032:p9 r:HALF_EVEN (9 - 1)", 8, 9 - 1);
AddTestCase("dqsub033:p9 r:HALF_EVEN (1 - 1)", 0, 1 - 1);
AddTestCase("dqsub034:p9 r:HALF_EVEN (0 - 1)", -1, 0 - 1);
AddTestCase("dqsub035:p9 r:HALF_EVEN (-1 - 1)", -2, -1 - 1);
AddTestCase("dqsub036:p9 r:HALF_EVEN (-9 - 1)", -10, -9 - 1);
AddTestCase("dqsub037:p9 r:HALF_EVEN (-10 - 1)", -11, -10 - 1);
AddTestCase("dqsub038:p9 r:HALF_EVEN (-11 - 1)", -12, -11 - 1);
AddTestCase("dqsub040:p9 r:HALF_EVEN (5.75 - 3.3)", 2.45, 5.75 - 3.3);
AddTestCase("dqsub041:p9 r:HALF_EVEN (5 - -3)", 8, 5 - -3);
AddTestCase("dqsub042:p9 r:HALF_EVEN (-5 - -3)", -2, -5 - -3);
AddTestCase("dqsub043:p9 r:HALF_EVEN (-7 - 2.5)", -9.5, -7 - 2.5);
AddTestCase("dqsub044:p9 r:HALF_EVEN (0.7 - 0.3)", 0.4, 0.7 - 0.3);
AddTestCase("dqsub045:p9 r:HALF_EVEN (1.3 - 0.3)", 1.0, 1.3 - 0.3);
AddTestCase("dqsub046:p9 r:HALF_EVEN (1.25 - 1.25)", 0.00, 1.25 - 1.25);
AddTestCase("dqsub050:p9 r:HALF_EVEN (1.23456789 - 1.00000000)", 0.23456789, 1.23456789 - 1.00000000);
AddTestCase("dqsub051:p9 r:HALF_EVEN (1.23456789 - 1.00000089)", 0.23456700, 1.23456789 - 1.00000089);
AddTestCase("dqsub060:p9 r:HALF_EVEN (70 - 10000e+34) inexact rounded", -1.000000000000000000000000000000000e+38, 70 - 10000e+34);
AddTestCase("dqsub061:p9 r:HALF_EVEN (700 - 10000e+34) inexact rounded", -1.000000000000000000000000000000000e+38, 700 - 10000e+34);
AddTestCase("dqsub062:p9 r:HALF_EVEN (7000 - 10000e+34) inexact rounded", -9.999999999999999999999999999999999e+37, 7000 - 10000e+34);
AddTestCase("dqsub063:p9 r:HALF_EVEN (70000 - 10000e+34) rounded", -9.999999999999999999999999999999993e+37, 70000 - 10000e+34);
AddTestCase("dqsub064:p9 r:HALF_EVEN (700000 - 10000e+34) rounded", -9.999999999999999999999999999999930e+37, 700000 - 10000e+34);
// symmetry:
AddTestCase("dqsub065:p9 r:HALF_EVEN (10000e+34 - 70) inexact rounded", 1.000000000000000000000000000000000e+38, 10000e+34 - 70);
AddTestCase("dqsub066:p9 r:HALF_EVEN (10000e+34 - 700) inexact rounded", 1.000000000000000000000000000000000e+38, 10000e+34 - 700);
AddTestCase("dqsub067:p9 r:HALF_EVEN (10000e+34 - 7000) inexact rounded", 9.999999999999999999999999999999999e+37, 10000e+34 - 7000);
AddTestCase("dqsub068:p9 r:HALF_EVEN (10000e+34 - 70000) rounded", 9.999999999999999999999999999999993e+37, 10000e+34 - 70000);
AddTestCase("dqsub069:p9 r:HALF_EVEN (10000e+34 - 700000) rounded", 9.999999999999999999999999999999930e+37, 10000e+34 - 700000);
// some of the next group are really constructor tests
AddTestCase("dqsub090:p9 r:HALF_EVEN (00.0 - 0.0)", 0.0, 00.0 - 0.0);
AddTestCase("dqsub091:p9 r:HALF_EVEN (00.0 - 0.00)", 0.00, 00.0 - 0.00);
AddTestCase("dqsub092:p9 r:HALF_EVEN (0.00 - 00.0)", 0.00, 0.00 - 00.0);
AddTestCase("dqsub093:p9 r:HALF_EVEN (00.0 - 0.00)", 0.00, 00.0 - 0.00);
AddTestCase("dqsub094:p9 r:HALF_EVEN (0.00 - 00.0)", 0.00, 0.00 - 00.0);
AddTestCase("dqsub095:p9 r:HALF_EVEN (3 - .3)", 2.7, 3 - .3);
AddTestCase("dqsub096:p9 r:HALF_EVEN (3. - .3)", 2.7, 3. - .3);
AddTestCase("dqsub097:p9 r:HALF_EVEN (3.0 - .3)", 2.7, 3.0 - .3);
AddTestCase("dqsub098:p9 r:HALF_EVEN (3.00 - .3)", 2.70, 3.00 - .3);
AddTestCase("dqsub099:p9 r:HALF_EVEN (3 - 3)", 0, 3 - 3);
AddTestCase("dqsub100:p9 r:HALF_EVEN (3 - +3)", 0, 3 - +3);
AddTestCase("dqsub101:p9 r:HALF_EVEN (3 - -3)", 6, 3 - -3);
AddTestCase("dqsub102:p9 r:HALF_EVEN (3 - 0.3)", 2.7, 3 - 0.3);
AddTestCase("dqsub103:p9 r:HALF_EVEN (3. - 0.3)", 2.7, 3. - 0.3);
AddTestCase("dqsub104:p9 r:HALF_EVEN (3.0 - 0.3)", 2.7, 3.0 - 0.3);
AddTestCase("dqsub105:p9 r:HALF_EVEN (3.00 - 0.3)", 2.70, 3.00 - 0.3);
AddTestCase("dqsub106:p9 r:HALF_EVEN (3 - 3.0)", 0.0, 3 - 3.0);
AddTestCase("dqsub107:p9 r:HALF_EVEN (3 - +3.0)", 0.0, 3 - +3.0);
AddTestCase("dqsub108:p9 r:HALF_EVEN (3 - -3.0)", 6.0, 3 - -3.0);
// the above all from add; massaged and extended.  now some new ones...
// [particularly important for comparisons]
// nb: -xe-8 below were non-exponents pre-ansi x3-274, and -1e-7 or 0e-7
// with input rounding.
AddTestCase("dqsub120:p9 r:HALF_EVEN (10.23456784 - 10.23456789)", -5e-8, 10.23456784 - 10.23456789);
AddTestCase("dqsub121:p9 r:HALF_EVEN (10.23456785 - 10.23456789)", -4e-8, 10.23456785 - 10.23456789);
AddTestCase("dqsub122:p9 r:HALF_EVEN (10.23456786 - 10.23456789)", -3e-8, 10.23456786 - 10.23456789);
AddTestCase("dqsub123:p9 r:HALF_EVEN (10.23456787 - 10.23456789)", -2e-8, 10.23456787 - 10.23456789);
AddTestCase("dqsub124:p9 r:HALF_EVEN (10.23456788 - 10.23456789)", -1e-8, 10.23456788 - 10.23456789);
AddTestCase("dqsub125:p9 r:HALF_EVEN (10.23456789 - 10.23456789)", 0e-8, 10.23456789 - 10.23456789);
AddTestCase("dqsub126:p9 r:HALF_EVEN (10.23456790 - 10.23456789)", 1e-8, 10.23456790 - 10.23456789);
AddTestCase("dqsub127:p9 r:HALF_EVEN (10.23456791 - 10.23456789)", 2e-8, 10.23456791 - 10.23456789);
AddTestCase("dqsub128:p9 r:HALF_EVEN (10.23456792 - 10.23456789)", 3e-8, 10.23456792 - 10.23456789);
AddTestCase("dqsub129:p9 r:HALF_EVEN (10.23456793 - 10.23456789)", 4e-8, 10.23456793 - 10.23456789);
AddTestCase("dqsub130:p9 r:HALF_EVEN (10.23456794 - 10.23456789)", 5e-8, 10.23456794 - 10.23456789);
AddTestCase("dqsub131:p9 r:HALF_EVEN (10.23456781 - 10.23456786)", -5e-8, 10.23456781 - 10.23456786);
AddTestCase("dqsub132:p9 r:HALF_EVEN (10.23456782 - 10.23456786)", -4e-8, 10.23456782 - 10.23456786);
AddTestCase("dqsub133:p9 r:HALF_EVEN (10.23456783 - 10.23456786)", -3e-8, 10.23456783 - 10.23456786);
AddTestCase("dqsub134:p9 r:HALF_EVEN (10.23456784 - 10.23456786)", -2e-8, 10.23456784 - 10.23456786);
AddTestCase("dqsub135:p9 r:HALF_EVEN (10.23456785 - 10.23456786)", -1e-8, 10.23456785 - 10.23456786);
AddTestCase("dqsub136:p9 r:HALF_EVEN (10.23456786 - 10.23456786)", 0e-8, 10.23456786 - 10.23456786);
AddTestCase("dqsub137:p9 r:HALF_EVEN (10.23456787 - 10.23456786)", 1e-8, 10.23456787 - 10.23456786);
AddTestCase("dqsub138:p9 r:HALF_EVEN (10.23456788 - 10.23456786)", 2e-8, 10.23456788 - 10.23456786);
AddTestCase("dqsub139:p9 r:HALF_EVEN (10.23456789 - 10.23456786)", 3e-8, 10.23456789 - 10.23456786);
AddTestCase("dqsub140:p9 r:HALF_EVEN (10.23456790 - 10.23456786)", 4e-8, 10.23456790 - 10.23456786);
AddTestCase("dqsub141:p9 r:HALF_EVEN (10.23456791 - 10.23456786)", 5e-8, 10.23456791 - 10.23456786);
AddTestCase("dqsub142:p9 r:HALF_EVEN (1 - 0.999999999)", 1e-9, 1 - 0.999999999);
AddTestCase("dqsub143:p9 r:HALF_EVEN (0.999999999 - 1)", -1e-9, 0.999999999 - 1);
AddTestCase("dqsub144:p9 r:HALF_EVEN (-10.23456780 - -10.23456786)", 6e-8, -10.23456780 - -10.23456786);
AddTestCase("dqsub145:p9 r:HALF_EVEN (-10.23456790 - -10.23456786)", -4e-8, -10.23456790 - -10.23456786);
AddTestCase("dqsub146:p9 r:HALF_EVEN (-10.23456791 - -10.23456786)", -5e-8, -10.23456791 - -10.23456786);
// additional scaled arithmetic tests [0.97 problem]
AddTestCase("dqsub160:p9 r:HALF_EVEN (0 - .1)", -0.1, 0 - .1);
AddTestCase("dqsub161:p9 r:HALF_EVEN (00 - .97983)", -0.97983, 00 - .97983);
AddTestCase("dqsub162:p9 r:HALF_EVEN (0 - .9)", -0.9, 0 - .9);
AddTestCase("dqsub163:p9 r:HALF_EVEN (0 - 0.102)", -0.102, 0 - 0.102);
AddTestCase("dqsub164:p9 r:HALF_EVEN (0 - .4)", -0.4, 0 - .4);
AddTestCase("dqsub165:p9 r:HALF_EVEN (0 - .307)", -0.307, 0 - .307);
AddTestCase("dqsub166:p9 r:HALF_EVEN (0 - .43822)", -0.43822, 0 - .43822);
AddTestCase("dqsub167:p9 r:HALF_EVEN (0 - .911)", -0.911, 0 - .911);
AddTestCase("dqsub168:p9 r:HALF_EVEN (.0 - .02)", -0.02, .0 - .02);
AddTestCase("dqsub169:p9 r:HALF_EVEN (00 - .392)", -0.392, 00 - .392);
AddTestCase("dqsub170:p9 r:HALF_EVEN (0 - .26)", -0.26, 0 - .26);
AddTestCase("dqsub171:p9 r:HALF_EVEN (0 - 0.51)", -0.51, 0 - 0.51);
AddTestCase("dqsub172:p9 r:HALF_EVEN (0 - .2234)", -0.2234, 0 - .2234);
AddTestCase("dqsub173:p9 r:HALF_EVEN (0 - .2)", -0.2, 0 - .2);
AddTestCase("dqsub174:p9 r:HALF_EVEN (.0 - .0008)", -0.0008, .0 - .0008);
// 0. on left
AddTestCase("dqsub180:p9 r:HALF_EVEN (0.0 - -.1)", 0.1, 0.0 - -.1);
AddTestCase("dqsub181:p9 r:HALF_EVEN (0.00 - -.97983)", 0.97983, 0.00 - -.97983);
AddTestCase("dqsub182:p9 r:HALF_EVEN (0.0 - -.9)", 0.9, 0.0 - -.9);
AddTestCase("dqsub183:p9 r:HALF_EVEN (0.0 - -0.102)", 0.102, 0.0 - -0.102);
AddTestCase("dqsub184:p9 r:HALF_EVEN (0.0 - -.4)", 0.4, 0.0 - -.4);
AddTestCase("dqsub185:p9 r:HALF_EVEN (0.0 - -.307)", 0.307, 0.0 - -.307);
AddTestCase("dqsub186:p9 r:HALF_EVEN (0.0 - -.43822)", 0.43822, 0.0 - -.43822);
AddTestCase("dqsub187:p9 r:HALF_EVEN (0.0 - -.911)", 0.911, 0.0 - -.911);
AddTestCase("dqsub188:p9 r:HALF_EVEN (0.0 - -.02)", 0.02, 0.0 - -.02);
AddTestCase("dqsub189:p9 r:HALF_EVEN (0.00 - -.392)", 0.392, 0.00 - -.392);
AddTestCase("dqsub190:p9 r:HALF_EVEN (0.0 - -.26)", 0.26, 0.0 - -.26);
AddTestCase("dqsub191:p9 r:HALF_EVEN (0.0 - -0.51)", 0.51, 0.0 - -0.51);
AddTestCase("dqsub192:p9 r:HALF_EVEN (0.0 - -.2234)", 0.2234, 0.0 - -.2234);
AddTestCase("dqsub193:p9 r:HALF_EVEN (0.0 - -.2)", 0.2, 0.0 - -.2);
AddTestCase("dqsub194:p9 r:HALF_EVEN (0.0 - -.0008)", 0.0008, 0.0 - -.0008);
// negatives of same
AddTestCase("dqsub200:p9 r:HALF_EVEN (0 - -.1)", 0.1, 0 - -.1);
AddTestCase("dqsub201:p9 r:HALF_EVEN (00 - -.97983)", 0.97983, 00 - -.97983);
AddTestCase("dqsub202:p9 r:HALF_EVEN (0 - -.9)", 0.9, 0 - -.9);
AddTestCase("dqsub203:p9 r:HALF_EVEN (0 - -0.102)", 0.102, 0 - -0.102);
AddTestCase("dqsub204:p9 r:HALF_EVEN (0 - -.4)", 0.4, 0 - -.4);
AddTestCase("dqsub205:p9 r:HALF_EVEN (0 - -.307)", 0.307, 0 - -.307);
AddTestCase("dqsub206:p9 r:HALF_EVEN (0 - -.43822)", 0.43822, 0 - -.43822);
AddTestCase("dqsub207:p9 r:HALF_EVEN (0 - -.911)", 0.911, 0 - -.911);
AddTestCase("dqsub208:p9 r:HALF_EVEN (.0 - -.02)", 0.02, .0 - -.02);
AddTestCase("dqsub209:p9 r:HALF_EVEN (00 - -.392)", 0.392, 00 - -.392);
AddTestCase("dqsub210:p9 r:HALF_EVEN (0 - -.26)", 0.26, 0 - -.26);
AddTestCase("dqsub211:p9 r:HALF_EVEN (0 - -0.51)", 0.51, 0 - -0.51);
AddTestCase("dqsub212:p9 r:HALF_EVEN (0 - -.2234)", 0.2234, 0 - -.2234);
AddTestCase("dqsub213:p9 r:HALF_EVEN (0 - -.2)", 0.2, 0 - -.2);
AddTestCase("dqsub214:p9 r:HALF_EVEN (.0 - -.0008)", 0.0008, .0 - -.0008);
// more fixed, lhs swaps [really the same as testcases under add]
AddTestCase("dqsub220:p9 r:HALF_EVEN (-56267e-12 - 0)", -5.6267e-8, -56267e-12 - 0);
AddTestCase("dqsub221:p9 r:HALF_EVEN (-56267e-11 - 0)", -5.6267e-7, -56267e-11 - 0);
AddTestCase("dqsub222:p9 r:HALF_EVEN (-56267e-10 - 0)", -0.0000056267, -56267e-10 - 0);
AddTestCase("dqsub223:p9 r:HALF_EVEN (-56267e-9 - 0)", -0.000056267, -56267e-9 - 0);
AddTestCase("dqsub224:p9 r:HALF_EVEN (-56267e-8 - 0)", -0.00056267, -56267e-8 - 0);
AddTestCase("dqsub225:p9 r:HALF_EVEN (-56267e-7 - 0)", -0.0056267, -56267e-7 - 0);
AddTestCase("dqsub226:p9 r:HALF_EVEN (-56267e-6 - 0)", -0.056267, -56267e-6 - 0);
AddTestCase("dqsub227:p9 r:HALF_EVEN (-56267e-5 - 0)", -0.56267, -56267e-5 - 0);
AddTestCase("dqsub228:p9 r:HALF_EVEN (-56267e-2 - 0)", -562.67, -56267e-2 - 0);
AddTestCase("dqsub229:p9 r:HALF_EVEN (-56267e-1 - 0)", -5626.7, -56267e-1 - 0);
AddTestCase("dqsub230:p9 r:HALF_EVEN (-56267e-0 - 0)", -56267, -56267e-0 - 0);
// symmetry ...
AddTestCase("dqsub240:p9 r:HALF_EVEN (0 - -56267e-12)", 5.6267e-8, 0 - -56267e-12);
AddTestCase("dqsub241:p9 r:HALF_EVEN (0 - -56267e-11)", 5.6267e-7, 0 - -56267e-11);
AddTestCase("dqsub242:p9 r:HALF_EVEN (0 - -56267e-10)", 0.0000056267, 0 - -56267e-10);
AddTestCase("dqsub243:p9 r:HALF_EVEN (0 - -56267e-9)", 0.000056267, 0 - -56267e-9);
AddTestCase("dqsub244:p9 r:HALF_EVEN (0 - -56267e-8)", 0.00056267, 0 - -56267e-8);
AddTestCase("dqsub245:p9 r:HALF_EVEN (0 - -56267e-7)", 0.0056267, 0 - -56267e-7);
AddTestCase("dqsub246:p9 r:HALF_EVEN (0 - -56267e-6)", 0.056267, 0 - -56267e-6);
AddTestCase("dqsub247:p9 r:HALF_EVEN (0 - -56267e-5)", 0.56267, 0 - -56267e-5);
AddTestCase("dqsub248:p9 r:HALF_EVEN (0 - -56267e-2)", 562.67, 0 - -56267e-2);
AddTestCase("dqsub249:p9 r:HALF_EVEN (0 - -56267e-1)", 5626.7, 0 - -56267e-1);
AddTestCase("dqsub250:p9 r:HALF_EVEN (0 - -56267e-0)", 56267, 0 - -56267e-0);
// now some more from the 'new' add
AddTestCase("dqsub301:p9 r:HALF_EVEN (1.23456789 - 1.00000000)", 0.23456789, 1.23456789 - 1.00000000);
AddTestCase("dqsub302:p9 r:HALF_EVEN (1.23456789 - 1.00000011)", 0.23456778, 1.23456789 - 1.00000011);
// some carrying effects
AddTestCase("dqsub321:p9 r:HALF_EVEN (0.9998 - 0.0000)", 0.9998, 0.9998 - 0.0000);
AddTestCase("dqsub322:p9 r:HALF_EVEN (0.9998 - 0.0001)", 0.9997, 0.9998 - 0.0001);
AddTestCase("dqsub323:p9 r:HALF_EVEN (0.9998 - 0.0002)", 0.9996, 0.9998 - 0.0002);
AddTestCase("dqsub324:p9 r:HALF_EVEN (0.9998 - 0.0003)", 0.9995, 0.9998 - 0.0003);
AddTestCase("dqsub325:p9 r:HALF_EVEN (0.9998 - -0.0000)", 0.9998, 0.9998 - -0.0000);
AddTestCase("dqsub326:p9 r:HALF_EVEN (0.9998 - -0.0001)", 0.9999, 0.9998 - -0.0001);
AddTestCase("dqsub327:p9 r:HALF_EVEN (0.9998 - -0.0002)", 1.0000, 0.9998 - -0.0002);
AddTestCase("dqsub328:p9 r:HALF_EVEN (0.9998 - -0.0003)", 1.0001, 0.9998 - -0.0003);
// internal boundaries
AddTestCase("dqsub346:p9 r:HALF_EVEN (10000e+9 - 7)", 9999999999993, 10000e+9 - 7);
AddTestCase("dqsub347:p9 r:HALF_EVEN (10000e+9 - 70)", 9999999999930, 10000e+9 - 70);
AddTestCase("dqsub348:p9 r:HALF_EVEN (10000e+9 - 700)", 9999999999300, 10000e+9 - 700);
AddTestCase("dqsub349:p9 r:HALF_EVEN (10000e+9 - 7000)", 9999999993000, 10000e+9 - 7000);
AddTestCase("dqsub350:p9 r:HALF_EVEN (10000e+9 - 70000)", 9999999930000, 10000e+9 - 70000);
AddTestCase("dqsub351:p9 r:HALF_EVEN (10000e+9 - 700000)", 9999999300000, 10000e+9 - 700000);
AddTestCase("dqsub352:p9 r:HALF_EVEN (7 - 10000e+9)", -9999999999993, 7 - 10000e+9);
AddTestCase("dqsub353:p9 r:HALF_EVEN (70 - 10000e+9)", -9999999999930, 70 - 10000e+9);
AddTestCase("dqsub354:p9 r:HALF_EVEN (700 - 10000e+9)", -9999999999300, 700 - 10000e+9);
AddTestCase("dqsub355:p9 r:HALF_EVEN (7000 - 10000e+9)", -9999999993000, 7000 - 10000e+9);
AddTestCase("dqsub356:p9 r:HALF_EVEN (70000 - 10000e+9)", -9999999930000, 70000 - 10000e+9);
AddTestCase("dqsub357:p9 r:HALF_EVEN (700000 - 10000e+9)", -9999999300000, 700000 - 10000e+9);
// zero preservation
AddTestCase("dqsub361:p9 r:HALF_EVEN (1 - 0.0001)", 0.9999, 1 - 0.0001);
AddTestCase("dqsub362:p9 r:HALF_EVEN (1 - 0.00001)", 0.99999, 1 - 0.00001);
AddTestCase("dqsub363:p9 r:HALF_EVEN (1 - 0.000001)", 0.999999, 1 - 0.000001);
AddTestCase("dqsub364:p9 r:HALF_EVEN (1 - 0.0000000000000000000000000000000001)", 0.9999999999999999999999999999999999, 1 - 0.0000000000000000000000000000000001);
AddTestCase("dqsub365:p9 r:HALF_EVEN (1 - 0.00000000000000000000000000000000001) inexact rounded", 1.000000000000000000000000000000000, 1 - 0.00000000000000000000000000000000001);
AddTestCase("dqsub366:p9 r:HALF_EVEN (1 - 0.000000000000000000000000000000000001) inexact rounded", 1.000000000000000000000000000000000, 1 - 0.000000000000000000000000000000000001);
// some funny zeros [in case of bad signum]
AddTestCase("dqsub370:p9 r:HALF_EVEN (1 - 0)", 1, 1 - 0);
AddTestCase("dqsub371:p9 r:HALF_EVEN (1 - 0.)", 1, 1 - 0.);
AddTestCase("dqsub372:p9 r:HALF_EVEN (1 - .0)", 1.0, 1 - .0);
AddTestCase("dqsub373:p9 r:HALF_EVEN (1 - 0.0)", 1.0, 1 - 0.0);
AddTestCase("dqsub374:p9 r:HALF_EVEN (0 - 1)", -1, 0 - 1);
AddTestCase("dqsub375:p9 r:HALF_EVEN (0. - 1)", -1, 0. - 1);
AddTestCase("dqsub376:p9 r:HALF_EVEN (.0 - 1)", -1.0, .0 - 1);
AddTestCase("dqsub377:p9 r:HALF_EVEN (0.0 - 1)", -1.0, 0.0 - 1);
// leading 0 digit before round
AddTestCase("dqsub910:p9 r:HALF_EVEN (-103519362 - -51897955.3)", -51621406.7, -103519362 - -51897955.3);
AddTestCase("dqsub911:p9 r:HALF_EVEN (159579.444 - 89827.5229)", 69751.9211, 159579.444 - 89827.5229);
AddTestCase("dqsub920:p9 r:HALF_EVEN (333.0000000000000000000000000123456 - 33.00000000000000000000000001234566) inexact rounded", 299.9999999999999999999999999999999, 333.0000000000000000000000000123456 - 33.00000000000000000000000001234566);
AddTestCase("dqsub921:p9 r:HALF_EVEN (333.0000000000000000000000000123456 - 33.00000000000000000000000001234565) inexact rounded", 300.0000000000000000000000000000000, 333.0000000000000000000000000123456 - 33.00000000000000000000000001234565);
AddTestCase("dqsub922:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 33.00000000000000000000000001234565)", 99.99999999999999999999999999999995, 133.0000000000000000000000000123456 - 33.00000000000000000000000001234565);
AddTestCase("dqsub923:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 33.00000000000000000000000001234564)", 99.99999999999999999999999999999996, 133.0000000000000000000000000123456 - 33.00000000000000000000000001234564);
AddTestCase("dqsub924:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 33.00000000000000000000000001234540) rounded", 100.0000000000000000000000000000002, 133.0000000000000000000000000123456 - 33.00000000000000000000000001234540);
AddTestCase("dqsub925:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 43.00000000000000000000000001234560)", 90.00000000000000000000000000000000, 133.0000000000000000000000000123456 - 43.00000000000000000000000001234560);
AddTestCase("dqsub926:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 43.00000000000000000000000001234561)", 89.99999999999999999999999999999999, 133.0000000000000000000000000123456 - 43.00000000000000000000000001234561);
AddTestCase("dqsub927:p9 r:HALF_EVEN (133.0000000000000000000000000123456 - 43.00000000000000000000000001234566)", 89.99999999999999999999999999999994, 133.0000000000000000000000000123456 - 43.00000000000000000000000001234566);
AddTestCase("dqsub928:p9 r:HALF_EVEN (101.0000000000000000000000000123456 - 91.00000000000000000000000001234566)", 9.99999999999999999999999999999994, 101.0000000000000000000000000123456 - 91.00000000000000000000000001234566);
AddTestCase("dqsub929:p9 r:HALF_EVEN (101.0000000000000000000000000123456 - 99.00000000000000000000000001234566)", 1.99999999999999999999999999999994, 101.0000000000000000000000000123456 - 99.00000000000000000000000001234566);
// more lhs swaps [were fixed]
AddTestCase("dqsub390:p9 r:HALF_EVEN (-56267e-10 - 0)", -0.0000056267, -56267e-10 - 0);
AddTestCase("dqsub391:p9 r:HALF_EVEN (-56267e-6 - 0)", -0.056267, -56267e-6 - 0);
AddTestCase("dqsub392:p9 r:HALF_EVEN (-56267e-5 - 0)", -0.56267, -56267e-5 - 0);
AddTestCase("dqsub393:p9 r:HALF_EVEN (-56267e-4 - 0)", -5.6267, -56267e-4 - 0);
AddTestCase("dqsub394:p9 r:HALF_EVEN (-56267e-3 - 0)", -56.267, -56267e-3 - 0);
AddTestCase("dqsub395:p9 r:HALF_EVEN (-56267e-2 - 0)", -562.67, -56267e-2 - 0);
AddTestCase("dqsub396:p9 r:HALF_EVEN (-56267e-1 - 0)", -5626.7, -56267e-1 - 0);
AddTestCase("dqsub397:p9 r:HALF_EVEN (-56267e-0 - 0)", -56267, -56267e-0 - 0);
AddTestCase("dqsub398:p9 r:HALF_EVEN (-5e-10 - 0)", -5e-10, -5e-10 - 0);
AddTestCase("dqsub399:p9 r:HALF_EVEN (-5e-7 - 0)", -5e-7, -5e-7 - 0);
AddTestCase("dqsub400:p9 r:HALF_EVEN (-5e-6 - 0)", -0.000005, -5e-6 - 0);
AddTestCase("dqsub401:p9 r:HALF_EVEN (-5e-5 - 0)", -0.00005, -5e-5 - 0);
AddTestCase("dqsub402:p9 r:HALF_EVEN (-5e-4 - 0)", -0.0005, -5e-4 - 0);
AddTestCase("dqsub403:p9 r:HALF_EVEN (-5e-1 - 0)", -0.5, -5e-1 - 0);
AddTestCase("dqsub404:p9 r:HALF_EVEN (-5e0 - 0)", -5, -5e0 - 0);
AddTestCase("dqsub405:p9 r:HALF_EVEN (-5e1 - 0)", -50, -5e1 - 0);
AddTestCase("dqsub406:p9 r:HALF_EVEN (-5e5 - 0)", -500000, -5e5 - 0);
AddTestCase("dqsub407:p9 r:HALF_EVEN (-5e33 - 0)", -5000000000000000000000000000000000, -5e33 - 0);
AddTestCase("dqsub408:p9 r:HALF_EVEN (-5e34 - 0) rounded", -5.000000000000000000000000000000000e+34, -5e34 - 0);
AddTestCase("dqsub409:p9 r:HALF_EVEN (-5e35 - 0) rounded", -5.000000000000000000000000000000000e+35, -5e35 - 0);
AddTestCase("dqsub410:p9 r:HALF_EVEN (-5e36 - 0) rounded", -5.000000000000000000000000000000000e+36, -5e36 - 0);
AddTestCase("dqsub411:p9 r:HALF_EVEN (-5e100 - 0) rounded", -5.000000000000000000000000000000000e+100, -5e100 - 0);
// more rhs swaps [were fixed]
AddTestCase("dqsub420:p9 r:HALF_EVEN (0 - -56267e-10)", 0.0000056267, 0 - -56267e-10);
AddTestCase("dqsub421:p9 r:HALF_EVEN (0 - -56267e-6)", 0.056267, 0 - -56267e-6);
AddTestCase("dqsub422:p9 r:HALF_EVEN (0 - -56267e-5)", 0.56267, 0 - -56267e-5);
AddTestCase("dqsub423:p9 r:HALF_EVEN (0 - -56267e-4)", 5.6267, 0 - -56267e-4);
AddTestCase("dqsub424:p9 r:HALF_EVEN (0 - -56267e-3)", 56.267, 0 - -56267e-3);
AddTestCase("dqsub425:p9 r:HALF_EVEN (0 - -56267e-2)", 562.67, 0 - -56267e-2);
AddTestCase("dqsub426:p9 r:HALF_EVEN (0 - -56267e-1)", 5626.7, 0 - -56267e-1);
AddTestCase("dqsub427:p9 r:HALF_EVEN (0 - -56267e-0)", 56267, 0 - -56267e-0);
AddTestCase("dqsub428:p9 r:HALF_EVEN (0 - -5e-10)", 5e-10, 0 - -5e-10);
AddTestCase("dqsub429:p9 r:HALF_EVEN (0 - -5e-7)", 5e-7, 0 - -5e-7);
AddTestCase("dqsub430:p9 r:HALF_EVEN (0 - -5e-6)", 0.000005, 0 - -5e-6);
AddTestCase("dqsub431:p9 r:HALF_EVEN (0 - -5e-5)", 0.00005, 0 - -5e-5);
AddTestCase("dqsub432:p9 r:HALF_EVEN (0 - -5e-4)", 0.0005, 0 - -5e-4);
AddTestCase("dqsub433:p9 r:HALF_EVEN (0 - -5e-1)", 0.5, 0 - -5e-1);
AddTestCase("dqsub434:p9 r:HALF_EVEN (0 - -5e0)", 5, 0 - -5e0);
AddTestCase("dqsub435:p9 r:HALF_EVEN (0 - -5e1)", 50, 0 - -5e1);
AddTestCase("dqsub436:p9 r:HALF_EVEN (0 - -5e5)", 500000, 0 - -5e5);
AddTestCase("dqsub437:p9 r:HALF_EVEN (0 - -5e33)", 5000000000000000000000000000000000, 0 - -5e33);
AddTestCase("dqsub438:p9 r:HALF_EVEN (0 - -5e34) rounded", 5.000000000000000000000000000000000e+34, 0 - -5e34);
AddTestCase("dqsub439:p9 r:HALF_EVEN (0 - -5e35) rounded", 5.000000000000000000000000000000000e+35, 0 - -5e35);
AddTestCase("dqsub440:p9 r:HALF_EVEN (0 - -5e36) rounded", 5.000000000000000000000000000000000e+36, 0 - -5e36);
AddTestCase("dqsub441:p9 r:HALF_EVEN (0 - -5e100) rounded", 5.000000000000000000000000000000000e+100, 0 - -5e100);
// try borderline precision, with carries, etc.
AddTestCase("dqsub461:p9 r:HALF_EVEN (1e+16 - 1)", 9999999999999999, 1e+16 - 1);
AddTestCase("dqsub462:p9 r:HALF_EVEN (1e+12 - -1.111)", 1000000000001.111, 1e+12 - -1.111);
AddTestCase("dqsub463:p9 r:HALF_EVEN (1.111 - -1e+12)", 1000000000001.111, 1.111 - -1e+12);
AddTestCase("dqsub464:p9 r:HALF_EVEN (-1 - -1e+16)", 9999999999999999, -1 - -1e+16);
AddTestCase("dqsub465:p9 r:HALF_EVEN (7e+15 - 1)", 6999999999999999, 7e+15 - 1);
AddTestCase("dqsub466:p9 r:HALF_EVEN (7e+12 - -1.111)", 7000000000001.111, 7e+12 - -1.111);
AddTestCase("dqsub467:p9 r:HALF_EVEN (1.111 - -7e+12)", 7000000000001.111, 1.111 - -7e+12);
AddTestCase("dqsub468:p9 r:HALF_EVEN (-1 - -7e+15)", 6999999999999999, -1 - -7e+15);
//                   1234567890123456       1234567890123456      1 23456789012345
AddTestCase("dqsub470:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555563) inexact rounded", 1.000000000000000000000000000000001, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555563);
AddTestCase("dqsub471:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555562) inexact rounded", 1.000000000000000000000000000000001, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555562);
AddTestCase("dqsub472:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555561) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555561);
AddTestCase("dqsub473:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555560) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555560);
AddTestCase("dqsub474:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555559) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555559);
AddTestCase("dqsub475:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555558) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555558);
AddTestCase("dqsub476:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555557) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555557);
AddTestCase("dqsub477:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555556) rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555556);
AddTestCase("dqsub478:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555555)", 0.9999999999999999999999999999999999, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555555);
AddTestCase("dqsub479:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555554)", 0.9999999999999999999999999999999998, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555554);
AddTestCase("dqsub480:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555553)", 0.9999999999999999999999999999999997, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555553);
AddTestCase("dqsub481:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555552)", 0.9999999999999999999999999999999996, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555552);
AddTestCase("dqsub482:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555551)", 0.9999999999999999999999999999999995, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555551);
AddTestCase("dqsub483:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555550)", 0.9999999999999999999999999999999994, 0.4444444444444444444444444444444444 - -0.5555555555555555555555555555555550);
// and some more, including residue effects and different roundings
{
	use rounding HALF_UP;
	AddTestCase("dqsub500:p9 r:HALF_UP (1231234555555555555555555567456789 - 0)", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0);
	AddTestCase("dqsub501:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.000000001) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.000000001);
	AddTestCase("dqsub502:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.000001) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.000001);
	AddTestCase("dqsub503:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.1) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.1);
	AddTestCase("dqsub504:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.4) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.4);
	AddTestCase("dqsub505:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.49) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.49);
	AddTestCase("dqsub506:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.499999) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.499999);
	AddTestCase("dqsub507:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.499999999) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.499999999);
	AddTestCase("dqsub508:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.5) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.5);
	AddTestCase("dqsub509:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.500000001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.500000001);
	AddTestCase("dqsub510:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.500001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.500001);
	AddTestCase("dqsub511:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.51) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.51);
	AddTestCase("dqsub512:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.6) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.6);
	AddTestCase("dqsub513:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.9) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.9);
	AddTestCase("dqsub514:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.99999) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.99999);
	AddTestCase("dqsub515:p9 r:HALF_UP (1231234555555555555555555567456789 - 0.999999999) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.999999999);
	AddTestCase("dqsub516:p9 r:HALF_UP (1231234555555555555555555567456789 - 1)", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1);
	AddTestCase("dqsub517:p9 r:HALF_UP (1231234555555555555555555567456789 - 1.000000001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.000000001);
	AddTestCase("dqsub518:p9 r:HALF_UP (1231234555555555555555555567456789 - 1.00001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.00001);
	AddTestCase("dqsub519:p9 r:HALF_UP (1231234555555555555555555567456789 - 1.1) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.1);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqsub520:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0)", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0);
	AddTestCase("dqsub521:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.000000001) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.000000001);
	AddTestCase("dqsub522:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.000001) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.000001);
	AddTestCase("dqsub523:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.1) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.1);
	AddTestCase("dqsub524:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.4) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.4);
	AddTestCase("dqsub525:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.49) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.49);
	AddTestCase("dqsub526:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.499999) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.499999);
	AddTestCase("dqsub527:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.499999999) inexact rounded", 1231234555555555555555555567456789, 1231234555555555555555555567456789 - 0.499999999);
	AddTestCase("dqsub528:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.5) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.5);
	AddTestCase("dqsub529:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.500000001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.500000001);
	AddTestCase("dqsub530:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.500001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.500001);
	AddTestCase("dqsub531:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.51) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.51);
	AddTestCase("dqsub532:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.6) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.6);
	AddTestCase("dqsub533:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.9) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.9);
	AddTestCase("dqsub534:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.99999) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.99999);
	AddTestCase("dqsub535:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 0.999999999) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 0.999999999);
	AddTestCase("dqsub536:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 1)", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1);
	AddTestCase("dqsub537:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 1.00000001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.00000001);
	AddTestCase("dqsub538:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 1.00001) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.00001);
	AddTestCase("dqsub539:p9 r:HALF_EVEN (1231234555555555555555555567456789 - 1.1) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456789 - 1.1);
	// critical few with even bottom digit...
	AddTestCase("dqsub540:p9 r:HALF_EVEN (1231234555555555555555555567456788 - 0.499999999) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456788 - 0.499999999);
	AddTestCase("dqsub541:p9 r:HALF_EVEN (1231234555555555555555555567456788 - 0.5) inexact rounded", 1231234555555555555555555567456788, 1231234555555555555555555567456788 - 0.5);
	AddTestCase("dqsub542:p9 r:HALF_EVEN (1231234555555555555555555567456788 - 0.500000001) inexact rounded", 1231234555555555555555555567456787, 1231234555555555555555555567456788 - 0.500000001);
	// symmetry...
}
{
	use rounding HALF_UP;
	AddTestCase("dqsub600:p9 r:HALF_UP (0 - 1231234555555555555555555567456789)", -1231234555555555555555555567456789, 0 - 1231234555555555555555555567456789);
	AddTestCase("dqsub601:p9 r:HALF_UP (0.000000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.000000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub602:p9 r:HALF_UP (0.000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub603:p9 r:HALF_UP (0.1 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.1 - 1231234555555555555555555567456789);
	AddTestCase("dqsub604:p9 r:HALF_UP (0.4 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.4 - 1231234555555555555555555567456789);
	AddTestCase("dqsub605:p9 r:HALF_UP (0.49 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.49 - 1231234555555555555555555567456789);
	AddTestCase("dqsub606:p9 r:HALF_UP (0.499999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.499999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub607:p9 r:HALF_UP (0.499999999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.499999999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub608:p9 r:HALF_UP (0.5 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.5 - 1231234555555555555555555567456789);
	AddTestCase("dqsub609:p9 r:HALF_UP (0.500000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.500000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub610:p9 r:HALF_UP (0.500001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.500001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub611:p9 r:HALF_UP (0.51 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.51 - 1231234555555555555555555567456789);
	AddTestCase("dqsub612:p9 r:HALF_UP (0.6 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.6 - 1231234555555555555555555567456789);
	AddTestCase("dqsub613:p9 r:HALF_UP (0.9 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.9 - 1231234555555555555555555567456789);
	AddTestCase("dqsub614:p9 r:HALF_UP (0.99999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.99999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub615:p9 r:HALF_UP (0.999999999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.999999999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub616:p9 r:HALF_UP (1 - 1231234555555555555555555567456789)", -1231234555555555555555555567456788, 1 - 1231234555555555555555555567456789);
	AddTestCase("dqsub617:p9 r:HALF_UP (1.000000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.000000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub618:p9 r:HALF_UP (1.00001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.00001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub619:p9 r:HALF_UP (1.1 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.1 - 1231234555555555555555555567456789);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqsub620:p9 r:HALF_EVEN (0 - 1231234555555555555555555567456789)", -1231234555555555555555555567456789, 0 - 1231234555555555555555555567456789);
	AddTestCase("dqsub621:p9 r:HALF_EVEN (0.000000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.000000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub622:p9 r:HALF_EVEN (0.000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub623:p9 r:HALF_EVEN (0.1 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.1 - 1231234555555555555555555567456789);
	AddTestCase("dqsub624:p9 r:HALF_EVEN (0.4 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.4 - 1231234555555555555555555567456789);
	AddTestCase("dqsub625:p9 r:HALF_EVEN (0.49 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.49 - 1231234555555555555555555567456789);
	AddTestCase("dqsub626:p9 r:HALF_EVEN (0.499999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.499999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub627:p9 r:HALF_EVEN (0.499999999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456789, 0.499999999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub628:p9 r:HALF_EVEN (0.5 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.5 - 1231234555555555555555555567456789);
	AddTestCase("dqsub629:p9 r:HALF_EVEN (0.500000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.500000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub630:p9 r:HALF_EVEN (0.500001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.500001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub631:p9 r:HALF_EVEN (0.51 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.51 - 1231234555555555555555555567456789);
	AddTestCase("dqsub632:p9 r:HALF_EVEN (0.6 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.6 - 1231234555555555555555555567456789);
	AddTestCase("dqsub633:p9 r:HALF_EVEN (0.9 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.9 - 1231234555555555555555555567456789);
	AddTestCase("dqsub634:p9 r:HALF_EVEN (0.99999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.99999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub635:p9 r:HALF_EVEN (0.999999999 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 0.999999999 - 1231234555555555555555555567456789);
	AddTestCase("dqsub636:p9 r:HALF_EVEN (1 - 1231234555555555555555555567456789)", -1231234555555555555555555567456788, 1 - 1231234555555555555555555567456789);
	AddTestCase("dqsub637:p9 r:HALF_EVEN (1.00000001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.00000001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub638:p9 r:HALF_EVEN (1.00001 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.00001 - 1231234555555555555555555567456789);
	AddTestCase("dqsub639:p9 r:HALF_EVEN (1.1 - 1231234555555555555555555567456789) inexact rounded", -1231234555555555555555555567456788, 1.1 - 1231234555555555555555555567456789);
	// critical few with even bottom digit...
	AddTestCase("dqsub640:p9 r:HALF_EVEN (0.499999999 - 1231234555555555555555555567456788) inexact rounded", -1231234555555555555555555567456788, 0.499999999 - 1231234555555555555555555567456788);
	AddTestCase("dqsub641:p9 r:HALF_EVEN (0.5 - 1231234555555555555555555567456788) inexact rounded", -1231234555555555555555555567456788, 0.5 - 1231234555555555555555555567456788);
	AddTestCase("dqsub642:p9 r:HALF_EVEN (0.500000001 - 1231234555555555555555555567456788) inexact rounded", -1231234555555555555555555567456787, 0.500000001 - 1231234555555555555555555567456788);
	// lots of leading zeros in intermediate result, and showing effects of
	// input rounding would have affected the following
}
{
	use rounding HALF_UP;
	AddTestCase("dqsub670:p9 r:HALF_UP (1234567456789 - 1234567456788.1)", 0.9, 1234567456789 - 1234567456788.1);
	AddTestCase("dqsub671:p9 r:HALF_UP (1234567456789 - 1234567456788.9)", 0.1, 1234567456789 - 1234567456788.9);
	AddTestCase("dqsub672:p9 r:HALF_UP (1234567456789 - 1234567456789.1)", -0.1, 1234567456789 - 1234567456789.1);
	AddTestCase("dqsub673:p9 r:HALF_UP (1234567456789 - 1234567456789.5)", -0.5, 1234567456789 - 1234567456789.5);
	AddTestCase("dqsub674:p9 r:HALF_UP (1234567456789 - 1234567456789.9)", -0.9, 1234567456789 - 1234567456789.9);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqsub680:p9 r:HALF_EVEN (1234567456789 - 1234567456788.1)", 0.9, 1234567456789 - 1234567456788.1);
	AddTestCase("dqsub681:p9 r:HALF_EVEN (1234567456789 - 1234567456788.9)", 0.1, 1234567456789 - 1234567456788.9);
	AddTestCase("dqsub682:p9 r:HALF_EVEN (1234567456789 - 1234567456789.1)", -0.1, 1234567456789 - 1234567456789.1);
	AddTestCase("dqsub683:p9 r:HALF_EVEN (1234567456789 - 1234567456789.5)", -0.5, 1234567456789 - 1234567456789.5);
	AddTestCase("dqsub684:p9 r:HALF_EVEN (1234567456789 - 1234567456789.9)", -0.9, 1234567456789 - 1234567456789.9);
	AddTestCase("dqsub685:p9 r:HALF_EVEN (1234567456788 - 1234567456787.1)", 0.9, 1234567456788 - 1234567456787.1);
	AddTestCase("dqsub686:p9 r:HALF_EVEN (1234567456788 - 1234567456787.9)", 0.1, 1234567456788 - 1234567456787.9);
	AddTestCase("dqsub687:p9 r:HALF_EVEN (1234567456788 - 1234567456788.1)", -0.1, 1234567456788 - 1234567456788.1);
	AddTestCase("dqsub688:p9 r:HALF_EVEN (1234567456788 - 1234567456788.5)", -0.5, 1234567456788 - 1234567456788.5);
	AddTestCase("dqsub689:p9 r:HALF_EVEN (1234567456788 - 1234567456788.9)", -0.9, 1234567456788 - 1234567456788.9);
	// specials
	// propagating nans
	// edge case spills
	// subnormals and overflows covered under add
	// examples from sql proposal (krishna kulkarni)
	// null tests
	}
}
test();

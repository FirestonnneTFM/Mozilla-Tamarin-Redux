use decimal;
var SECTION = "Decimal";
var VERSION = "ES4";
var TITLE = "dqAdd.decTest";
var BUGNUMBER = "";
startTest();
{
//----------------------------------------------------------------------
// dqadd.dectest -- decquad addition                                  --
// copyright (c) ibm corporation, 1981, 2007.  all rights reserved.   --
//----------------------------------------------------------------------
// please see the document "general decimal arithmetic testcases"     --
// at http://www2.hursley.ibm.com/decimal for the description of      --
// these testcases.                                                   --
//                                                                    --
// these testcases are experimental ('beta' versions), and they       --
// may contain errors.  they are offered on an as-is basis.  in       --
// particular, achieving the same results as the tests here is not    --
// a guarantee that an implementation complies with any standard      --
// or specification.  the tests are not exhaustive.                   --
//                                                                    --
// please send comments, suggestions, and corrections to the author:  --
//   mike cowlishaw, ibm fellow                                       --
//   ibm uk, po box 31, birmingham road, warwick cv34 5jl, uk         --
//   mfc@uk.ibm.com                                                   --
//----------------------------------------------------------------------
// version: 2.55
// this set of tests are for decquads only; all arguments are
// representable in a decquad
use rounding HALF_EVEN;
// [first group are 'quick confidence check']
AddTestCase("dqadd001:p9 r:HALF_EVEN (1 + 1)", 2, 1 + 1);
AddTestCase("dqadd002:p9 r:HALF_EVEN (2 + 3)", 5, 2 + 3);
AddTestCase("dqadd003:p9 r:HALF_EVEN (5.75 + 3.3)", 9.05, 5.75 + 3.3);
AddTestCase("dqadd004:p9 r:HALF_EVEN (5 + -3)", 2, 5 + -3);
AddTestCase("dqadd005:p9 r:HALF_EVEN (-5 + -3)", -8, -5 + -3);
AddTestCase("dqadd006:p9 r:HALF_EVEN (-7 + 2.5)", -4.5, -7 + 2.5);
AddTestCase("dqadd007:p9 r:HALF_EVEN (0.7 + 0.3)", 1.0, 0.7 + 0.3);
AddTestCase("dqadd008:p9 r:HALF_EVEN (1.25 + 1.25)", 2.50, 1.25 + 1.25);
AddTestCase("dqadd009:p9 r:HALF_EVEN (1.23456789 + 1.00000000)", 2.23456789, 1.23456789 + 1.00000000);
AddTestCase("dqadd010:p9 r:HALF_EVEN (1.23456789 + 1.00000011)", 2.23456800, 1.23456789 + 1.00000011);
//             1234567890123456      1234567890123456
AddTestCase("dqadd011:p9 r:HALF_EVEN (0.4444444444444444444444444444444446 + 0.5555555555555555555555555555555555) inexact rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444446 + 0.5555555555555555555555555555555555);
AddTestCase("dqadd012:p9 r:HALF_EVEN (0.4444444444444444444444444444444445 + 0.5555555555555555555555555555555555) rounded", 1.000000000000000000000000000000000, 0.4444444444444444444444444444444445 + 0.5555555555555555555555555555555555);
AddTestCase("dqadd013:p9 r:HALF_EVEN (0.4444444444444444444444444444444444 + 0.5555555555555555555555555555555555)", 0.9999999999999999999999999999999999, 0.4444444444444444444444444444444444 + 0.5555555555555555555555555555555555);
AddTestCase("dqadd014:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.49) inexact rounded", 4444444444444444444444444444444444, 4444444444444444444444444444444444 + 0.49);
AddTestCase("dqadd015:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.499) inexact rounded", 4444444444444444444444444444444444, 4444444444444444444444444444444444 + 0.499);
AddTestCase("dqadd016:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.4999) inexact rounded", 4444444444444444444444444444444444, 4444444444444444444444444444444444 + 0.4999);
AddTestCase("dqadd017:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.5000) inexact rounded", 4444444444444444444444444444444444, 4444444444444444444444444444444444 + 0.5000);
AddTestCase("dqadd018:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.5001) inexact rounded", 4444444444444444444444444444444445, 4444444444444444444444444444444444 + 0.5001);
AddTestCase("dqadd019:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.501) inexact rounded", 4444444444444444444444444444444445, 4444444444444444444444444444444444 + 0.501);
AddTestCase("dqadd020:p9 r:HALF_EVEN (4444444444444444444444444444444444 + 0.51) inexact rounded", 4444444444444444444444444444444445, 4444444444444444444444444444444444 + 0.51);
AddTestCase("dqadd021:p9 r:HALF_EVEN (0 + 1)", 1, 0 + 1);
AddTestCase("dqadd022:p9 r:HALF_EVEN (1 + 1)", 2, 1 + 1);
AddTestCase("dqadd023:p9 r:HALF_EVEN (2 + 1)", 3, 2 + 1);
AddTestCase("dqadd024:p9 r:HALF_EVEN (3 + 1)", 4, 3 + 1);
AddTestCase("dqadd025:p9 r:HALF_EVEN (4 + 1)", 5, 4 + 1);
AddTestCase("dqadd026:p9 r:HALF_EVEN (5 + 1)", 6, 5 + 1);
AddTestCase("dqadd027:p9 r:HALF_EVEN (6 + 1)", 7, 6 + 1);
AddTestCase("dqadd028:p9 r:HALF_EVEN (7 + 1)", 8, 7 + 1);
AddTestCase("dqadd029:p9 r:HALF_EVEN (8 + 1)", 9, 8 + 1);
AddTestCase("dqadd030:p9 r:HALF_EVEN (9 + 1)", 10, 9 + 1);
// some carrying effects
AddTestCase("dqadd031:p9 r:HALF_EVEN (0.9998 + 0.0000)", 0.9998, 0.9998 + 0.0000);
AddTestCase("dqadd032:p9 r:HALF_EVEN (0.9998 + 0.0001)", 0.9999, 0.9998 + 0.0001);
AddTestCase("dqadd033:p9 r:HALF_EVEN (0.9998 + 0.0002)", 1.0000, 0.9998 + 0.0002);
AddTestCase("dqadd034:p9 r:HALF_EVEN (0.9998 + 0.0003)", 1.0001, 0.9998 + 0.0003);
AddTestCase("dqadd035:p9 r:HALF_EVEN (70 + 10000e+34) inexact rounded", 1.000000000000000000000000000000000e+38, 70 + 10000e+34);
AddTestCase("dqadd036:p9 r:HALF_EVEN (700 + 10000e+34) inexact rounded", 1.000000000000000000000000000000000e+38, 700 + 10000e+34);
AddTestCase("dqadd037:p9 r:HALF_EVEN (7000 + 10000e+34) inexact rounded", 1.000000000000000000000000000000000e+38, 7000 + 10000e+34);
AddTestCase("dqadd038:p9 r:HALF_EVEN (70000 + 10000e+34) inexact rounded", 1.000000000000000000000000000000001e+38, 70000 + 10000e+34);
AddTestCase("dqadd039:p9 r:HALF_EVEN (700000 + 10000e+34) rounded", 1.000000000000000000000000000000007e+38, 700000 + 10000e+34);
// symmetry:
AddTestCase("dqadd040:p9 r:HALF_EVEN (10000e+34 + 70) inexact rounded", 1.000000000000000000000000000000000e+38, 10000e+34 + 70);
AddTestCase("dqadd041:p9 r:HALF_EVEN (10000e+34 + 700) inexact rounded", 1.000000000000000000000000000000000e+38, 10000e+34 + 700);
AddTestCase("dqadd042:p9 r:HALF_EVEN (10000e+34 + 7000) inexact rounded", 1.000000000000000000000000000000000e+38, 10000e+34 + 7000);
AddTestCase("dqadd044:p9 r:HALF_EVEN (10000e+34 + 70000) inexact rounded", 1.000000000000000000000000000000001e+38, 10000e+34 + 70000);
AddTestCase("dqadd045:p9 r:HALF_EVEN (10000e+34 + 700000) rounded", 1.000000000000000000000000000000007e+38, 10000e+34 + 700000);
// same, without rounding
AddTestCase("dqadd046:p9 r:HALF_EVEN (10000e+9 + 7)", 10000000000007, 10000e+9 + 7);
AddTestCase("dqadd047:p9 r:HALF_EVEN (10000e+9 + 70)", 10000000000070, 10000e+9 + 70);
AddTestCase("dqadd048:p9 r:HALF_EVEN (10000e+9 + 700)", 10000000000700, 10000e+9 + 700);
AddTestCase("dqadd049:p9 r:HALF_EVEN (10000e+9 + 7000)", 10000000007000, 10000e+9 + 7000);
AddTestCase("dqadd050:p9 r:HALF_EVEN (10000e+9 + 70000)", 10000000070000, 10000e+9 + 70000);
AddTestCase("dqadd051:p9 r:HALF_EVEN (10000e+9 + 700000)", 10000000700000, 10000e+9 + 700000);
AddTestCase("dqadd052:p9 r:HALF_EVEN (10000e+9 + 7000000)", 10000007000000, 10000e+9 + 7000000);
// examples from decarith
AddTestCase("dqadd053:p9 r:HALF_EVEN (12 + 7.00)", 19.00, 12 + 7.00);
AddTestCase("dqadd054:p9 r:HALF_EVEN (1.3 + -1.07)", 0.23, 1.3 + -1.07);
AddTestCase("dqadd055:p9 r:HALF_EVEN (1.3 + -1.30)", 0.00, 1.3 + -1.30);
AddTestCase("dqadd056:p9 r:HALF_EVEN (1.3 + -2.07)", -0.77, 1.3 + -2.07);
AddTestCase("dqadd057:p9 r:HALF_EVEN (1e+2 + 1e+4)", 1.01e+4, 1e+2 + 1e+4);
// leading zero preservation
AddTestCase("dqadd061:p9 r:HALF_EVEN (1 + 0.0001)", 1.0001, 1 + 0.0001);
AddTestCase("dqadd062:p9 r:HALF_EVEN (1 + 0.00001)", 1.00001, 1 + 0.00001);
AddTestCase("dqadd063:p9 r:HALF_EVEN (1 + 0.000001)", 1.000001, 1 + 0.000001);
AddTestCase("dqadd064:p9 r:HALF_EVEN (1 + 0.0000001)", 1.0000001, 1 + 0.0000001);
AddTestCase("dqadd065:p9 r:HALF_EVEN (1 + 0.00000001)", 1.00000001, 1 + 0.00000001);
// some funny zeros [in case of bad signum]
AddTestCase("dqadd070:p9 r:HALF_EVEN (1 + 0)", 1, 1 + 0);
AddTestCase("dqadd071:p9 r:HALF_EVEN (1 + 0.)", 1, 1 + 0.);
AddTestCase("dqadd072:p9 r:HALF_EVEN (1 + .0)", 1.0, 1 + .0);
AddTestCase("dqadd073:p9 r:HALF_EVEN (1 + 0.0)", 1.0, 1 + 0.0);
AddTestCase("dqadd074:p9 r:HALF_EVEN (1 + 0.00)", 1.00, 1 + 0.00);
AddTestCase("dqadd075:p9 r:HALF_EVEN (0 + 1)", 1, 0 + 1);
AddTestCase("dqadd076:p9 r:HALF_EVEN (0. + 1)", 1, 0. + 1);
AddTestCase("dqadd077:p9 r:HALF_EVEN (.0 + 1)", 1.0, .0 + 1);
AddTestCase("dqadd078:p9 r:HALF_EVEN (0.0 + 1)", 1.0, 0.0 + 1);
AddTestCase("dqadd079:p9 r:HALF_EVEN (0.00 + 1)", 1.00, 0.00 + 1);
// some carries
AddTestCase("dqadd080:p9 r:HALF_EVEN (999999998 + 1)", 999999999, 999999998 + 1);
AddTestCase("dqadd081:p9 r:HALF_EVEN (999999999 + 1)", 1000000000, 999999999 + 1);
AddTestCase("dqadd082:p9 r:HALF_EVEN (99999999 + 1)", 100000000, 99999999 + 1);
AddTestCase("dqadd083:p9 r:HALF_EVEN (9999999 + 1)", 10000000, 9999999 + 1);
AddTestCase("dqadd084:p9 r:HALF_EVEN (999999 + 1)", 1000000, 999999 + 1);
AddTestCase("dqadd085:p9 r:HALF_EVEN (99999 + 1)", 100000, 99999 + 1);
AddTestCase("dqadd086:p9 r:HALF_EVEN (9999 + 1)", 10000, 9999 + 1);
AddTestCase("dqadd087:p9 r:HALF_EVEN (999 + 1)", 1000, 999 + 1);
AddTestCase("dqadd088:p9 r:HALF_EVEN (99 + 1)", 100, 99 + 1);
AddTestCase("dqadd089:p9 r:HALF_EVEN (9 + 1)", 10, 9 + 1);
// more lhs swaps
AddTestCase("dqadd090:p9 r:HALF_EVEN (-56267e-10 + 0)", -0.0000056267, -56267e-10 + 0);
AddTestCase("dqadd091:p9 r:HALF_EVEN (-56267e-6 + 0)", -0.056267, -56267e-6 + 0);
AddTestCase("dqadd092:p9 r:HALF_EVEN (-56267e-5 + 0)", -0.56267, -56267e-5 + 0);
AddTestCase("dqadd093:p9 r:HALF_EVEN (-56267e-4 + 0)", -5.6267, -56267e-4 + 0);
AddTestCase("dqadd094:p9 r:HALF_EVEN (-56267e-3 + 0)", -56.267, -56267e-3 + 0);
AddTestCase("dqadd095:p9 r:HALF_EVEN (-56267e-2 + 0)", -562.67, -56267e-2 + 0);
AddTestCase("dqadd096:p9 r:HALF_EVEN (-56267e-1 + 0)", -5626.7, -56267e-1 + 0);
AddTestCase("dqadd097:p9 r:HALF_EVEN (-56267e-0 + 0)", -56267, -56267e-0 + 0);
AddTestCase("dqadd098:p9 r:HALF_EVEN (-5e-10 + 0)", -5e-10, -5e-10 + 0);
AddTestCase("dqadd099:p9 r:HALF_EVEN (-5e-7 + 0)", -5e-7, -5e-7 + 0);
AddTestCase("dqadd100:p9 r:HALF_EVEN (-5e-6 + 0)", -0.000005, -5e-6 + 0);
AddTestCase("dqadd101:p9 r:HALF_EVEN (-5e-5 + 0)", -0.00005, -5e-5 + 0);
AddTestCase("dqadd102:p9 r:HALF_EVEN (-5e-4 + 0)", -0.0005, -5e-4 + 0);
AddTestCase("dqadd103:p9 r:HALF_EVEN (-5e-1 + 0)", -0.5, -5e-1 + 0);
AddTestCase("dqadd104:p9 r:HALF_EVEN (-5e0 + 0)", -5, -5e0 + 0);
AddTestCase("dqadd105:p9 r:HALF_EVEN (-5e1 + 0)", -50, -5e1 + 0);
AddTestCase("dqadd106:p9 r:HALF_EVEN (-5e5 + 0)", -500000, -5e5 + 0);
AddTestCase("dqadd107:p9 r:HALF_EVEN (-5e33 + 0)", -5000000000000000000000000000000000, -5e33 + 0);
AddTestCase("dqadd108:p9 r:HALF_EVEN (-5e34 + 0) rounded", -5.000000000000000000000000000000000e+34, -5e34 + 0);
AddTestCase("dqadd109:p9 r:HALF_EVEN (-5e35 + 0) rounded", -5.000000000000000000000000000000000e+35, -5e35 + 0);
AddTestCase("dqadd110:p9 r:HALF_EVEN (-5e36 + 0) rounded", -5.000000000000000000000000000000000e+36, -5e36 + 0);
AddTestCase("dqadd111:p9 r:HALF_EVEN (-5e100 + 0) rounded", -5.000000000000000000000000000000000e+100, -5e100 + 0);
// more rhs swaps
AddTestCase("dqadd113:p9 r:HALF_EVEN (0 + -56267e-10)", -0.0000056267, 0 + -56267e-10);
AddTestCase("dqadd114:p9 r:HALF_EVEN (0 + -56267e-6)", -0.056267, 0 + -56267e-6);
AddTestCase("dqadd116:p9 r:HALF_EVEN (0 + -56267e-5)", -0.56267, 0 + -56267e-5);
AddTestCase("dqadd117:p9 r:HALF_EVEN (0 + -56267e-4)", -5.6267, 0 + -56267e-4);
AddTestCase("dqadd119:p9 r:HALF_EVEN (0 + -56267e-3)", -56.267, 0 + -56267e-3);
AddTestCase("dqadd120:p9 r:HALF_EVEN (0 + -56267e-2)", -562.67, 0 + -56267e-2);
AddTestCase("dqadd121:p9 r:HALF_EVEN (0 + -56267e-1)", -5626.7, 0 + -56267e-1);
AddTestCase("dqadd122:p9 r:HALF_EVEN (0 + -56267e-0)", -56267, 0 + -56267e-0);
AddTestCase("dqadd123:p9 r:HALF_EVEN (0 + -5e-10)", -5e-10, 0 + -5e-10);
AddTestCase("dqadd124:p9 r:HALF_EVEN (0 + -5e-7)", -5e-7, 0 + -5e-7);
AddTestCase("dqadd125:p9 r:HALF_EVEN (0 + -5e-6)", -0.000005, 0 + -5e-6);
AddTestCase("dqadd126:p9 r:HALF_EVEN (0 + -5e-5)", -0.00005, 0 + -5e-5);
AddTestCase("dqadd127:p9 r:HALF_EVEN (0 + -5e-4)", -0.0005, 0 + -5e-4);
AddTestCase("dqadd128:p9 r:HALF_EVEN (0 + -5e-1)", -0.5, 0 + -5e-1);
AddTestCase("dqadd129:p9 r:HALF_EVEN (0 + -5e0)", -5, 0 + -5e0);
AddTestCase("dqadd130:p9 r:HALF_EVEN (0 + -5e1)", -50, 0 + -5e1);
AddTestCase("dqadd131:p9 r:HALF_EVEN (0 + -5e5)", -500000, 0 + -5e5);
AddTestCase("dqadd132:p9 r:HALF_EVEN (0 + -5e33)", -5000000000000000000000000000000000, 0 + -5e33);
AddTestCase("dqadd133:p9 r:HALF_EVEN (0 + -5e34) rounded", -5.000000000000000000000000000000000e+34, 0 + -5e34);
AddTestCase("dqadd134:p9 r:HALF_EVEN (0 + -5e35) rounded", -5.000000000000000000000000000000000e+35, 0 + -5e35);
AddTestCase("dqadd135:p9 r:HALF_EVEN (0 + -5e36) rounded", -5.000000000000000000000000000000000e+36, 0 + -5e36);
AddTestCase("dqadd136:p9 r:HALF_EVEN (0 + -5e100) rounded", -5.000000000000000000000000000000000e+100, 0 + -5e100);
// related
AddTestCase("dqadd137:p9 r:HALF_EVEN (1 + 0e-39) rounded", 1.000000000000000000000000000000000, 1 + 0e-39);
AddTestCase("dqadd138:p9 r:HALF_EVEN (-1 + 0e-39) rounded", -1.000000000000000000000000000000000, -1 + 0e-39);
AddTestCase("dqadd139:p9 r:HALF_EVEN (0e-39 + 1) rounded", 1.000000000000000000000000000000000, 0e-39 + 1);
AddTestCase("dqadd140:p9 r:HALF_EVEN (0e-39 + -1) rounded", -1.000000000000000000000000000000000, 0e-39 + -1);
AddTestCase("dqadd141:p9 r:HALF_EVEN (1e+29 + 0.0000)", 100000000000000000000000000000.0000, 1e+29 + 0.0000);
AddTestCase("dqadd142:p9 r:HALF_EVEN (1e+29 + 0.00000) rounded", 100000000000000000000000000000.0000, 1e+29 + 0.00000);
AddTestCase("dqadd143:p9 r:HALF_EVEN (0.000 + 1e+30)", 1000000000000000000000000000000.000, 0.000 + 1e+30);
AddTestCase("dqadd144:p9 r:HALF_EVEN (0.0000 + 1e+30) rounded", 1000000000000000000000000000000.000, 0.0000 + 1e+30);
// [some of the next group are really constructor tests]
AddTestCase("dqadd146:p9 r:HALF_EVEN (00.0 + 0)", 0.0, 00.0 + 0);
AddTestCase("dqadd147:p9 r:HALF_EVEN (0.00 + 0)", 0.00, 0.00 + 0);
AddTestCase("dqadd148:p9 r:HALF_EVEN (0 + 0.00)", 0.00, 0 + 0.00);
AddTestCase("dqadd149:p9 r:HALF_EVEN (0 + 00.0)", 0.0, 0 + 00.0);
AddTestCase("dqadd150:p9 r:HALF_EVEN (00.0 + 0.00)", 0.00, 00.0 + 0.00);
AddTestCase("dqadd151:p9 r:HALF_EVEN (0.00 + 00.0)", 0.00, 0.00 + 00.0);
AddTestCase("dqadd152:p9 r:HALF_EVEN (3 + .3)", 3.3, 3 + .3);
AddTestCase("dqadd153:p9 r:HALF_EVEN (3. + .3)", 3.3, 3. + .3);
AddTestCase("dqadd154:p9 r:HALF_EVEN (3.0 + .3)", 3.3, 3.0 + .3);
AddTestCase("dqadd155:p9 r:HALF_EVEN (3.00 + .3)", 3.30, 3.00 + .3);
AddTestCase("dqadd156:p9 r:HALF_EVEN (3 + 3)", 6, 3 + 3);
AddTestCase("dqadd157:p9 r:HALF_EVEN (3 + +3)", 6, 3 + +3);
AddTestCase("dqadd158:p9 r:HALF_EVEN (3 + -3)", 0, 3 + -3);
AddTestCase("dqadd159:p9 r:HALF_EVEN (0.3 + -0.3)", 0.0, 0.3 + -0.3);
AddTestCase("dqadd160:p9 r:HALF_EVEN (0.03 + -0.03)", 0.00, 0.03 + -0.03);
// try borderline precision, with carries, etc.
AddTestCase("dqadd161:p9 r:HALF_EVEN (1e+12 + -1)", 999999999999, 1e+12 + -1);
AddTestCase("dqadd162:p9 r:HALF_EVEN (1e+12 + 1.11)", 1000000000001.11, 1e+12 + 1.11);
AddTestCase("dqadd163:p9 r:HALF_EVEN (1.11 + 1e+12)", 1000000000001.11, 1.11 + 1e+12);
AddTestCase("dqadd164:p9 r:HALF_EVEN (-1 + 1e+12)", 999999999999, -1 + 1e+12);
AddTestCase("dqadd165:p9 r:HALF_EVEN (7e+12 + -1)", 6999999999999, 7e+12 + -1);
AddTestCase("dqadd166:p9 r:HALF_EVEN (7e+12 + 1.11)", 7000000000001.11, 7e+12 + 1.11);
AddTestCase("dqadd167:p9 r:HALF_EVEN (1.11 + 7e+12)", 7000000000001.11, 1.11 + 7e+12);
AddTestCase("dqadd168:p9 r:HALF_EVEN (-1 + 7e+12)", 6999999999999, -1 + 7e+12);
{
	use rounding HALF_UP;
	AddTestCase("dqadd170:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555567) inexact rounded", 5.000000000000000000000000000000001, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555567);
	AddTestCase("dqadd171:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555566) inexact rounded", 5.000000000000000000000000000000001, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555566);
	AddTestCase("dqadd172:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555565) inexact rounded", 5.000000000000000000000000000000001, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555565);
	AddTestCase("dqadd173:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555564) inexact rounded", 5.000000000000000000000000000000000, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555564);
	AddTestCase("dqadd174:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555553) inexact rounded", 4.999999999999999999999999999999999, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555553);
	AddTestCase("dqadd175:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555552) inexact rounded", 4.999999999999999999999999999999999, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555552);
	AddTestCase("dqadd176:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555551) inexact rounded", 4.999999999999999999999999999999999, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555551);
	AddTestCase("dqadd177:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555550) rounded", 4.999999999999999999999999999999999, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555550);
	AddTestCase("dqadd178:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555545) inexact rounded", 4.999999999999999999999999999999999, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555545);
	AddTestCase("dqadd179:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555544) inexact rounded", 4.999999999999999999999999999999998, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555544);
	AddTestCase("dqadd180:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555543) inexact rounded", 4.999999999999999999999999999999998, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555543);
	AddTestCase("dqadd181:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555542) inexact rounded", 4.999999999999999999999999999999998, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555542);
	AddTestCase("dqadd182:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555541) inexact rounded", 4.999999999999999999999999999999998, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555541);
	AddTestCase("dqadd183:p9 r:HALF_UP (4.444444444444444444444444444444444 + 0.5555555555555555555555555555555540) rounded", 4.999999999999999999999999999999998, 4.444444444444444444444444444444444 + 0.5555555555555555555555555555555540);
	// and some more, including residue effects and different roundings
}
{
	use rounding HALF_UP;
	AddTestCase("dqadd200:p9 r:HALF_UP (1231234567890123456784560123456789 + 0)", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0);
	AddTestCase("dqadd201:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.000000001) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.000000001);
	AddTestCase("dqadd202:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.000001) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.000001);
	AddTestCase("dqadd203:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.1) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.1);
	AddTestCase("dqadd204:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.4) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.4);
	AddTestCase("dqadd205:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.49) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.49);
	AddTestCase("dqadd206:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.499999) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.499999);
	AddTestCase("dqadd207:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.499999999) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.499999999);
	AddTestCase("dqadd208:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.5) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.5);
	AddTestCase("dqadd209:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.500000001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.500000001);
	AddTestCase("dqadd210:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.500001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.500001);
	AddTestCase("dqadd211:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.51) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.51);
	AddTestCase("dqadd212:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.6) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.6);
	AddTestCase("dqadd213:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.9) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.9);
	AddTestCase("dqadd214:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.99999) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.99999);
	AddTestCase("dqadd215:p9 r:HALF_UP (1231234567890123456784560123456789 + 0.999999999) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.999999999);
	AddTestCase("dqadd216:p9 r:HALF_UP (1231234567890123456784560123456789 + 1)", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1);
	AddTestCase("dqadd217:p9 r:HALF_UP (1231234567890123456784560123456789 + 1.000000001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.000000001);
	AddTestCase("dqadd218:p9 r:HALF_UP (1231234567890123456784560123456789 + 1.00001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.00001);
	AddTestCase("dqadd219:p9 r:HALF_UP (1231234567890123456784560123456789 + 1.1) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.1);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd220:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0)", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0);
	AddTestCase("dqadd221:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.000000001) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.000000001);
	AddTestCase("dqadd222:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.000001) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.000001);
	AddTestCase("dqadd223:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.1) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.1);
	AddTestCase("dqadd224:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.4) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.4);
	AddTestCase("dqadd225:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.49) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.49);
	AddTestCase("dqadd226:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.499999) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.499999);
	AddTestCase("dqadd227:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.499999999) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456789 + 0.499999999);
	AddTestCase("dqadd228:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.5) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.5);
	AddTestCase("dqadd229:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.500000001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.500000001);
	AddTestCase("dqadd230:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.500001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.500001);
	AddTestCase("dqadd231:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.51) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.51);
	AddTestCase("dqadd232:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.6) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.6);
	AddTestCase("dqadd233:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.9) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.9);
	AddTestCase("dqadd234:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.99999) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.99999);
	AddTestCase("dqadd235:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 0.999999999) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 0.999999999);
	AddTestCase("dqadd236:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 1)", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1);
	AddTestCase("dqadd237:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 1.00000001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.00000001);
	AddTestCase("dqadd238:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 1.00001) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.00001);
	AddTestCase("dqadd239:p9 r:HALF_EVEN (1231234567890123456784560123456789 + 1.1) inexact rounded", 1231234567890123456784560123456790, 1231234567890123456784560123456789 + 1.1);
	// critical few with even bottom digit...
	AddTestCase("dqadd240:p9 r:HALF_EVEN (1231234567890123456784560123456788 + 0.499999999) inexact rounded", 1231234567890123456784560123456788, 1231234567890123456784560123456788 + 0.499999999);
	AddTestCase("dqadd241:p9 r:HALF_EVEN (1231234567890123456784560123456788 + 0.5) inexact rounded", 1231234567890123456784560123456788, 1231234567890123456784560123456788 + 0.5);
	AddTestCase("dqadd242:p9 r:HALF_EVEN (1231234567890123456784560123456788 + 0.500000001) inexact rounded", 1231234567890123456784560123456789, 1231234567890123456784560123456788 + 0.500000001);
	// 1 in last place tests
}
{
	use rounding HALF_UP;
	AddTestCase("dqadd301:p9 r:HALF_UP (-1 + 1)", 0, -1 + 1);
	AddTestCase("dqadd302:p9 r:HALF_UP (0 + 1)", 1, 0 + 1);
	AddTestCase("dqadd303:p9 r:HALF_UP (1 + 1)", 2, 1 + 1);
	AddTestCase("dqadd304:p9 r:HALF_UP (12 + 1)", 13, 12 + 1);
	AddTestCase("dqadd305:p9 r:HALF_UP (98 + 1)", 99, 98 + 1);
	AddTestCase("dqadd306:p9 r:HALF_UP (99 + 1)", 100, 99 + 1);
	AddTestCase("dqadd307:p9 r:HALF_UP (100 + 1)", 101, 100 + 1);
	AddTestCase("dqadd308:p9 r:HALF_UP (101 + 1)", 102, 101 + 1);
	AddTestCase("dqadd309:p9 r:HALF_UP (-1 + -1)", -2, -1 + -1);
	AddTestCase("dqadd310:p9 r:HALF_UP (0 + -1)", -1, 0 + -1);
	AddTestCase("dqadd311:p9 r:HALF_UP (1 + -1)", 0, 1 + -1);
	AddTestCase("dqadd312:p9 r:HALF_UP (12 + -1)", 11, 12 + -1);
	AddTestCase("dqadd313:p9 r:HALF_UP (98 + -1)", 97, 98 + -1);
	AddTestCase("dqadd314:p9 r:HALF_UP (99 + -1)", 98, 99 + -1);
	AddTestCase("dqadd315:p9 r:HALF_UP (100 + -1)", 99, 100 + -1);
	AddTestCase("dqadd316:p9 r:HALF_UP (101 + -1)", 100, 101 + -1);
	AddTestCase("dqadd321:p9 r:HALF_UP (-0.01 + 0.01)", 0.00, -0.01 + 0.01);
	AddTestCase("dqadd322:p9 r:HALF_UP (0.00 + 0.01)", 0.01, 0.00 + 0.01);
	AddTestCase("dqadd323:p9 r:HALF_UP (0.01 + 0.01)", 0.02, 0.01 + 0.01);
	AddTestCase("dqadd324:p9 r:HALF_UP (0.12 + 0.01)", 0.13, 0.12 + 0.01);
	AddTestCase("dqadd325:p9 r:HALF_UP (0.98 + 0.01)", 0.99, 0.98 + 0.01);
	AddTestCase("dqadd326:p9 r:HALF_UP (0.99 + 0.01)", 1.00, 0.99 + 0.01);
	AddTestCase("dqadd327:p9 r:HALF_UP (1.00 + 0.01)", 1.01, 1.00 + 0.01);
	AddTestCase("dqadd328:p9 r:HALF_UP (1.01 + 0.01)", 1.02, 1.01 + 0.01);
	AddTestCase("dqadd329:p9 r:HALF_UP (-0.01 + -0.01)", -0.02, -0.01 + -0.01);
	AddTestCase("dqadd330:p9 r:HALF_UP (0.00 + -0.01)", -0.01, 0.00 + -0.01);
	AddTestCase("dqadd331:p9 r:HALF_UP (0.01 + -0.01)", 0.00, 0.01 + -0.01);
	AddTestCase("dqadd332:p9 r:HALF_UP (0.12 + -0.01)", 0.11, 0.12 + -0.01);
	AddTestCase("dqadd333:p9 r:HALF_UP (0.98 + -0.01)", 0.97, 0.98 + -0.01);
	AddTestCase("dqadd334:p9 r:HALF_UP (0.99 + -0.01)", 0.98, 0.99 + -0.01);
	AddTestCase("dqadd335:p9 r:HALF_UP (1.00 + -0.01)", 0.99, 1.00 + -0.01);
	AddTestCase("dqadd336:p9 r:HALF_UP (1.01 + -0.01)", 1.00, 1.01 + -0.01);
	// some more cases where adding 0 affects the coefficient
	AddTestCase("dqadd340:p9 r:HALF_UP (1e+3 + 0)", 1000, 1e+3 + 0);
	AddTestCase("dqadd341:p9 r:HALF_UP (1e+33 + 0)", 1000000000000000000000000000000000, 1e+33 + 0);
	AddTestCase("dqadd342:p9 r:HALF_UP (1e+34 + 0) rounded", 1.000000000000000000000000000000000e+34, 1e+34 + 0);
	AddTestCase("dqadd343:p9 r:HALF_UP (1e+35 + 0) rounded", 1.000000000000000000000000000000000e+35, 1e+35 + 0);
	// which simply follow from these cases ...
	AddTestCase("dqadd344:p9 r:HALF_UP (1e+3 + 1)", 1001, 1e+3 + 1);
	AddTestCase("dqadd345:p9 r:HALF_UP (1e+33 + 1)", 1000000000000000000000000000000001, 1e+33 + 1);
	AddTestCase("dqadd346:p9 r:HALF_UP (1e+34 + 1) inexact rounded", 1.000000000000000000000000000000000e+34, 1e+34 + 1);
	AddTestCase("dqadd347:p9 r:HALF_UP (1e+35 + 1) inexact rounded", 1.000000000000000000000000000000000e+35, 1e+35 + 1);
	AddTestCase("dqadd348:p9 r:HALF_UP (1e+3 + 7)", 1007, 1e+3 + 7);
	AddTestCase("dqadd349:p9 r:HALF_UP (1e+33 + 7)", 1000000000000000000000000000000007, 1e+33 + 7);
	AddTestCase("dqadd350:p9 r:HALF_UP (1e+34 + 7) inexact rounded", 1.000000000000000000000000000000001e+34, 1e+34 + 7);
	AddTestCase("dqadd351:p9 r:HALF_UP (1e+35 + 7) inexact rounded", 1.000000000000000000000000000000000e+35, 1e+35 + 7);
	// tryzeros cases
}
{
	use rounding HALF_UP;
	AddTestCase("dqadd360:p9 r:HALF_UP (0e+50 + 10000e+1)", 1.0000e+5, 0e+50 + 10000e+1);
	AddTestCase("dqadd361:p9 r:HALF_UP (0e-50 + 10000e+1) rounded", 100000.0000000000000000000000000000, 0e-50 + 10000e+1);
	AddTestCase("dqadd362:p9 r:HALF_UP (10000e+1 + 0e-50) rounded", 100000.0000000000000000000000000000, 10000e+1 + 0e-50);
	AddTestCase("dqadd363:p9 r:HALF_UP (10000e+1 + 10000e-50) rounded inexact", 100000.0000000000000000000000000000, 10000e+1 + 10000e-50);
	AddTestCase("dqadd364:p9 r:HALF_UP (9.999999999999999999999999999999999e+6144 + -9.999999999999999999999999999999999e+6144)", 0e+6111, 9.999999999999999999999999999999999e+6144 + -9.999999999999999999999999999999999e+6144);
	//            1 234567890123456789012345678901234
	// a curiosity from jsr 13 testing
}
{
	use rounding HALF_DOWN;
	AddTestCase("dqadd370:p9 r:HALF_DOWN (999999999999999999999999999999999 + 815)", 1000000000000000000000000000000814, 999999999999999999999999999999999 + 815);
	AddTestCase("dqadd371:p9 r:HALF_DOWN (9999999999999999999999999999999999 + 815) rounded inexact", 1.000000000000000000000000000000081e+34, 9999999999999999999999999999999999 + 815);
}
{
	use rounding HALF_UP;
	AddTestCase("dqadd372:p9 r:HALF_UP (999999999999999999999999999999999 + 815)", 1000000000000000000000000000000814, 999999999999999999999999999999999 + 815);
	AddTestCase("dqadd373:p9 r:HALF_UP (9999999999999999999999999999999999 + 815) rounded inexact", 1.000000000000000000000000000000081e+34, 9999999999999999999999999999999999 + 815);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd374:p9 r:HALF_EVEN (999999999999999999999999999999999 + 815)", 1000000000000000000000000000000814, 999999999999999999999999999999999 + 815);
	AddTestCase("dqadd375:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 815) rounded inexact", 1.000000000000000000000000000000081e+34, 9999999999999999999999999999999999 + 815);
	// ulp replacement tests
	AddTestCase("dqadd400:p9 r:HALF_EVEN (1 + 77e-32)", 1.00000000000000000000000000000077, 1 + 77e-32);
	AddTestCase("dqadd401:p9 r:HALF_EVEN (1 + 77e-33)", 1.000000000000000000000000000000077, 1 + 77e-33);
	AddTestCase("dqadd402:p9 r:HALF_EVEN (1 + 77e-34) inexact rounded", 1.000000000000000000000000000000008, 1 + 77e-34);
	AddTestCase("dqadd403:p9 r:HALF_EVEN (1 + 77e-35) inexact rounded", 1.000000000000000000000000000000001, 1 + 77e-35);
	AddTestCase("dqadd404:p9 r:HALF_EVEN (1 + 77e-36) inexact rounded", 1.000000000000000000000000000000000, 1 + 77e-36);
	AddTestCase("dqadd405:p9 r:HALF_EVEN (1 + 77e-37) inexact rounded", 1.000000000000000000000000000000000, 1 + 77e-37);
	AddTestCase("dqadd406:p9 r:HALF_EVEN (1 + 77e-299) inexact rounded", 1.000000000000000000000000000000000, 1 + 77e-299);
	AddTestCase("dqadd410:p9 r:HALF_EVEN (10 + 77e-32)", 10.00000000000000000000000000000077, 10 + 77e-32);
	AddTestCase("dqadd411:p9 r:HALF_EVEN (10 + 77e-33) inexact rounded", 10.00000000000000000000000000000008, 10 + 77e-33);
	AddTestCase("dqadd412:p9 r:HALF_EVEN (10 + 77e-34) inexact rounded", 10.00000000000000000000000000000001, 10 + 77e-34);
	AddTestCase("dqadd413:p9 r:HALF_EVEN (10 + 77e-35) inexact rounded", 10.00000000000000000000000000000000, 10 + 77e-35);
	AddTestCase("dqadd414:p9 r:HALF_EVEN (10 + 77e-36) inexact rounded", 10.00000000000000000000000000000000, 10 + 77e-36);
	AddTestCase("dqadd415:p9 r:HALF_EVEN (10 + 77e-37) inexact rounded", 10.00000000000000000000000000000000, 10 + 77e-37);
	AddTestCase("dqadd416:p9 r:HALF_EVEN (10 + 77e-299) inexact rounded", 10.00000000000000000000000000000000, 10 + 77e-299);
	AddTestCase("dqadd420:p9 r:HALF_EVEN (77e-32 + 1)", 1.00000000000000000000000000000077, 77e-32 + 1);
	AddTestCase("dqadd421:p9 r:HALF_EVEN (77e-33 + 1)", 1.000000000000000000000000000000077, 77e-33 + 1);
	AddTestCase("dqadd422:p9 r:HALF_EVEN (77e-34 + 1) inexact rounded", 1.000000000000000000000000000000008, 77e-34 + 1);
	AddTestCase("dqadd423:p9 r:HALF_EVEN (77e-35 + 1) inexact rounded", 1.000000000000000000000000000000001, 77e-35 + 1);
	AddTestCase("dqadd424:p9 r:HALF_EVEN (77e-36 + 1) inexact rounded", 1.000000000000000000000000000000000, 77e-36 + 1);
	AddTestCase("dqadd425:p9 r:HALF_EVEN (77e-37 + 1) inexact rounded", 1.000000000000000000000000000000000, 77e-37 + 1);
	AddTestCase("dqadd426:p9 r:HALF_EVEN (77e-299 + 1) inexact rounded", 1.000000000000000000000000000000000, 77e-299 + 1);
	AddTestCase("dqadd430:p9 r:HALF_EVEN (77e-32 + 10)", 10.00000000000000000000000000000077, 77e-32 + 10);
	AddTestCase("dqadd431:p9 r:HALF_EVEN (77e-33 + 10) inexact rounded", 10.00000000000000000000000000000008, 77e-33 + 10);
	AddTestCase("dqadd432:p9 r:HALF_EVEN (77e-34 + 10) inexact rounded", 10.00000000000000000000000000000001, 77e-34 + 10);
	AddTestCase("dqadd433:p9 r:HALF_EVEN (77e-35 + 10) inexact rounded", 10.00000000000000000000000000000000, 77e-35 + 10);
	AddTestCase("dqadd434:p9 r:HALF_EVEN (77e-36 + 10) inexact rounded", 10.00000000000000000000000000000000, 77e-36 + 10);
	AddTestCase("dqadd435:p9 r:HALF_EVEN (77e-37 + 10) inexact rounded", 10.00000000000000000000000000000000, 77e-37 + 10);
	AddTestCase("dqadd436:p9 r:HALF_EVEN (77e-299 + 10) inexact rounded", 10.00000000000000000000000000000000, 77e-299 + 10);
	// negative ulps
	AddTestCase("dqadd6440:p9 r:HALF_EVEN (1 + -77e-32)", 0.99999999999999999999999999999923, 1 + -77e-32);
	AddTestCase("dqadd6441:p9 r:HALF_EVEN (1 + -77e-33)", 0.999999999999999999999999999999923, 1 + -77e-33);
	AddTestCase("dqadd6442:p9 r:HALF_EVEN (1 + -77e-34)", 0.9999999999999999999999999999999923, 1 + -77e-34);
	AddTestCase("dqadd6443:p9 r:HALF_EVEN (1 + -77e-35) inexact rounded", 0.9999999999999999999999999999999992, 1 + -77e-35);
	AddTestCase("dqadd6444:p9 r:HALF_EVEN (1 + -77e-36) inexact rounded", 0.9999999999999999999999999999999999, 1 + -77e-36);
	AddTestCase("dqadd6445:p9 r:HALF_EVEN (1 + -77e-37) inexact rounded", 1.000000000000000000000000000000000, 1 + -77e-37);
	AddTestCase("dqadd6446:p9 r:HALF_EVEN (1 + -77e-99) inexact rounded", 1.000000000000000000000000000000000, 1 + -77e-99);
	AddTestCase("dqadd6450:p9 r:HALF_EVEN (10 + -77e-32)", 9.99999999999999999999999999999923, 10 + -77e-32);
	AddTestCase("dqadd6451:p9 r:HALF_EVEN (10 + -77e-33)", 9.999999999999999999999999999999923, 10 + -77e-33);
	AddTestCase("dqadd6452:p9 r:HALF_EVEN (10 + -77e-34) inexact rounded", 9.999999999999999999999999999999992, 10 + -77e-34);
	AddTestCase("dqadd6453:p9 r:HALF_EVEN (10 + -77e-35) inexact rounded", 9.999999999999999999999999999999999, 10 + -77e-35);
	AddTestCase("dqadd6454:p9 r:HALF_EVEN (10 + -77e-36) inexact rounded", 10.00000000000000000000000000000000, 10 + -77e-36);
	AddTestCase("dqadd6455:p9 r:HALF_EVEN (10 + -77e-37) inexact rounded", 10.00000000000000000000000000000000, 10 + -77e-37);
	AddTestCase("dqadd6456:p9 r:HALF_EVEN (10 + -77e-99) inexact rounded", 10.00000000000000000000000000000000, 10 + -77e-99);
	AddTestCase("dqadd6460:p9 r:HALF_EVEN (-77e-32 + 1)", 0.99999999999999999999999999999923, -77e-32 + 1);
	AddTestCase("dqadd6461:p9 r:HALF_EVEN (-77e-33 + 1)", 0.999999999999999999999999999999923, -77e-33 + 1);
	AddTestCase("dqadd6462:p9 r:HALF_EVEN (-77e-34 + 1)", 0.9999999999999999999999999999999923, -77e-34 + 1);
	AddTestCase("dqadd6463:p9 r:HALF_EVEN (-77e-35 + 1) inexact rounded", 0.9999999999999999999999999999999992, -77e-35 + 1);
	AddTestCase("dqadd6464:p9 r:HALF_EVEN (-77e-36 + 1) inexact rounded", 0.9999999999999999999999999999999999, -77e-36 + 1);
	AddTestCase("dqadd6465:p9 r:HALF_EVEN (-77e-37 + 1) inexact rounded", 1.000000000000000000000000000000000, -77e-37 + 1);
	AddTestCase("dqadd6466:p9 r:HALF_EVEN (-77e-99 + 1) inexact rounded", 1.000000000000000000000000000000000, -77e-99 + 1);
	AddTestCase("dqadd6470:p9 r:HALF_EVEN (-77e-32 + 10)", 9.99999999999999999999999999999923, -77e-32 + 10);
	AddTestCase("dqadd6471:p9 r:HALF_EVEN (-77e-33 + 10)", 9.999999999999999999999999999999923, -77e-33 + 10);
	AddTestCase("dqadd6472:p9 r:HALF_EVEN (-77e-34 + 10) inexact rounded", 9.999999999999999999999999999999992, -77e-34 + 10);
	AddTestCase("dqadd6473:p9 r:HALF_EVEN (-77e-35 + 10) inexact rounded", 9.999999999999999999999999999999999, -77e-35 + 10);
	AddTestCase("dqadd6474:p9 r:HALF_EVEN (-77e-36 + 10) inexact rounded", 10.00000000000000000000000000000000, -77e-36 + 10);
	AddTestCase("dqadd6475:p9 r:HALF_EVEN (-77e-37 + 10) inexact rounded", 10.00000000000000000000000000000000, -77e-37 + 10);
	AddTestCase("dqadd6476:p9 r:HALF_EVEN (-77e-99 + 10) inexact rounded", 10.00000000000000000000000000000000, -77e-99 + 10);
	// negative ulps
	AddTestCase("dqadd6480:p9 r:HALF_EVEN (-1 + 77e-32)", -0.99999999999999999999999999999923, -1 + 77e-32);
	AddTestCase("dqadd6481:p9 r:HALF_EVEN (-1 + 77e-33)", -0.999999999999999999999999999999923, -1 + 77e-33);
	AddTestCase("dqadd6482:p9 r:HALF_EVEN (-1 + 77e-34)", -0.9999999999999999999999999999999923, -1 + 77e-34);
	AddTestCase("dqadd6483:p9 r:HALF_EVEN (-1 + 77e-35) inexact rounded", -0.9999999999999999999999999999999992, -1 + 77e-35);
	AddTestCase("dqadd6484:p9 r:HALF_EVEN (-1 + 77e-36) inexact rounded", -0.9999999999999999999999999999999999, -1 + 77e-36);
	AddTestCase("dqadd6485:p9 r:HALF_EVEN (-1 + 77e-37) inexact rounded", -1.000000000000000000000000000000000, -1 + 77e-37);
	AddTestCase("dqadd6486:p9 r:HALF_EVEN (-1 + 77e-99) inexact rounded", -1.000000000000000000000000000000000, -1 + 77e-99);
	AddTestCase("dqadd6490:p9 r:HALF_EVEN (-10 + 77e-32)", -9.99999999999999999999999999999923, -10 + 77e-32);
	AddTestCase("dqadd6491:p9 r:HALF_EVEN (-10 + 77e-33)", -9.999999999999999999999999999999923, -10 + 77e-33);
	AddTestCase("dqadd6492:p9 r:HALF_EVEN (-10 + 77e-34) inexact rounded", -9.999999999999999999999999999999992, -10 + 77e-34);
	AddTestCase("dqadd6493:p9 r:HALF_EVEN (-10 + 77e-35) inexact rounded", -9.999999999999999999999999999999999, -10 + 77e-35);
	AddTestCase("dqadd6494:p9 r:HALF_EVEN (-10 + 77e-36) inexact rounded", -10.00000000000000000000000000000000, -10 + 77e-36);
	AddTestCase("dqadd6495:p9 r:HALF_EVEN (-10 + 77e-37) inexact rounded", -10.00000000000000000000000000000000, -10 + 77e-37);
	AddTestCase("dqadd6496:p9 r:HALF_EVEN (-10 + 77e-99) inexact rounded", -10.00000000000000000000000000000000, -10 + 77e-99);
	AddTestCase("dqadd6500:p9 r:HALF_EVEN (77e-32 + -1)", -0.99999999999999999999999999999923, 77e-32 + -1);
	AddTestCase("dqadd6501:p9 r:HALF_EVEN (77e-33 + -1)", -0.999999999999999999999999999999923, 77e-33 + -1);
	AddTestCase("dqadd6502:p9 r:HALF_EVEN (77e-34 + -1)", -0.9999999999999999999999999999999923, 77e-34 + -1);
	AddTestCase("dqadd6503:p9 r:HALF_EVEN (77e-35 + -1) inexact rounded", -0.9999999999999999999999999999999992, 77e-35 + -1);
	AddTestCase("dqadd6504:p9 r:HALF_EVEN (77e-36 + -1) inexact rounded", -0.9999999999999999999999999999999999, 77e-36 + -1);
	AddTestCase("dqadd6505:p9 r:HALF_EVEN (77e-37 + -1) inexact rounded", -1.000000000000000000000000000000000, 77e-37 + -1);
	AddTestCase("dqadd6506:p9 r:HALF_EVEN (77e-99 + -1) inexact rounded", -1.000000000000000000000000000000000, 77e-99 + -1);
	AddTestCase("dqadd6510:p9 r:HALF_EVEN (77e-32 + -10)", -9.99999999999999999999999999999923, 77e-32 + -10);
	AddTestCase("dqadd6511:p9 r:HALF_EVEN (77e-33 + -10)", -9.999999999999999999999999999999923, 77e-33 + -10);
	AddTestCase("dqadd6512:p9 r:HALF_EVEN (77e-34 + -10) inexact rounded", -9.999999999999999999999999999999992, 77e-34 + -10);
	AddTestCase("dqadd6513:p9 r:HALF_EVEN (77e-35 + -10) inexact rounded", -9.999999999999999999999999999999999, 77e-35 + -10);
	AddTestCase("dqadd6514:p9 r:HALF_EVEN (77e-36 + -10) inexact rounded", -10.00000000000000000000000000000000, 77e-36 + -10);
	AddTestCase("dqadd6515:p9 r:HALF_EVEN (77e-37 + -10) inexact rounded", -10.00000000000000000000000000000000, 77e-37 + -10);
	AddTestCase("dqadd6516:p9 r:HALF_EVEN (77e-99 + -10) inexact rounded", -10.00000000000000000000000000000000, 77e-99 + -10);
	// and some more residue effects and different roundings
}
{
	use rounding HALF_UP;
	AddTestCase("dqadd6540:p9 r:HALF_UP (9876543219876543216543210123456789 + 0)", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0);
	AddTestCase("dqadd6541:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.000000001) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.000000001);
	AddTestCase("dqadd6542:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.000001) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.000001);
	AddTestCase("dqadd6543:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.1) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.1);
	AddTestCase("dqadd6544:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.4) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.4);
	AddTestCase("dqadd6545:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.49) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.49);
	AddTestCase("dqadd6546:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.499999) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.499999);
	AddTestCase("dqadd6547:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.499999999) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.499999999);
	AddTestCase("dqadd6548:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.5) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.5);
	AddTestCase("dqadd6549:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.500000001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.500000001);
	AddTestCase("dqadd6550:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.500001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.500001);
	AddTestCase("dqadd6551:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.51) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.51);
	AddTestCase("dqadd6552:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.6) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.6);
	AddTestCase("dqadd6553:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.9) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.9);
	AddTestCase("dqadd6554:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.99999) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.99999);
	AddTestCase("dqadd6555:p9 r:HALF_UP (9876543219876543216543210123456789 + 0.999999999) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.999999999);
	AddTestCase("dqadd6556:p9 r:HALF_UP (9876543219876543216543210123456789 + 1)", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1);
	AddTestCase("dqadd6557:p9 r:HALF_UP (9876543219876543216543210123456789 + 1.000000001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.000000001);
	AddTestCase("dqadd6558:p9 r:HALF_UP (9876543219876543216543210123456789 + 1.00001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.00001);
	AddTestCase("dqadd6559:p9 r:HALF_UP (9876543219876543216543210123456789 + 1.1) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.1);
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd6560:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0)", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0);
	AddTestCase("dqadd6561:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.000000001) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.000000001);
	AddTestCase("dqadd6562:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.000001) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.000001);
	AddTestCase("dqadd6563:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.1) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.1);
	AddTestCase("dqadd6564:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.4) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.4);
	AddTestCase("dqadd6565:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.49) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.49);
	AddTestCase("dqadd6566:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.499999) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.499999);
	AddTestCase("dqadd6567:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.499999999) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456789 + 0.499999999);
	AddTestCase("dqadd6568:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.5) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.5);
	AddTestCase("dqadd6569:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.500000001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.500000001);
	AddTestCase("dqadd6570:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.500001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.500001);
	AddTestCase("dqadd6571:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.51) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.51);
	AddTestCase("dqadd6572:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.6) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.6);
	AddTestCase("dqadd6573:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.9) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.9);
	AddTestCase("dqadd6574:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.99999) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.99999);
	AddTestCase("dqadd6575:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 0.999999999) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 0.999999999);
	AddTestCase("dqadd6576:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 1)", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1);
	AddTestCase("dqadd6577:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 1.00000001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.00000001);
	AddTestCase("dqadd6578:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 1.00001) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.00001);
	AddTestCase("dqadd6579:p9 r:HALF_EVEN (9876543219876543216543210123456789 + 1.1) inexact rounded", 9876543219876543216543210123456790, 9876543219876543216543210123456789 + 1.1);
	// critical few with even bottom digit...
	AddTestCase("dqadd7540:p9 r:HALF_EVEN (9876543219876543216543210123456788 + 0.499999999) inexact rounded", 9876543219876543216543210123456788, 9876543219876543216543210123456788 + 0.499999999);
	AddTestCase("dqadd7541:p9 r:HALF_EVEN (9876543219876543216543210123456788 + 0.5) inexact rounded", 9876543219876543216543210123456788, 9876543219876543216543210123456788 + 0.5);
	AddTestCase("dqadd7542:p9 r:HALF_EVEN (9876543219876543216543210123456788 + 0.500000001) inexact rounded", 9876543219876543216543210123456789, 9876543219876543216543210123456788 + 0.500000001);
	// more zeros, etc.
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd7701:p9 r:HALF_EVEN (5.00 + 1.00e-3)", 5.00100, 5.00 + 1.00e-3);
	AddTestCase("dqadd7702:p9 r:HALF_EVEN (00.00 + 0.000)", 0.000, 00.00 + 0.000);
	AddTestCase("dqadd7703:p9 r:HALF_EVEN (00.00 + 0e-3)", 0.000, 00.00 + 0e-3);
	AddTestCase("dqadd7704:p9 r:HALF_EVEN (0e-3 + 00.00)", 0.000, 0e-3 + 00.00);
	AddTestCase("dqadd7710:p9 r:HALF_EVEN (0e+3 + 00.00)", 0.00, 0e+3 + 00.00);
	AddTestCase("dqadd7711:p9 r:HALF_EVEN (0e+3 + 00.0)", 0.0, 0e+3 + 00.0);
	AddTestCase("dqadd7712:p9 r:HALF_EVEN (0e+3 + 00.)", 0, 0e+3 + 00.);
	AddTestCase("dqadd7713:p9 r:HALF_EVEN (0e+3 + 00.e+1)", 0e+1, 0e+3 + 00.e+1);
	AddTestCase("dqadd7714:p9 r:HALF_EVEN (0e+3 + 00.e+2)", 0e+2, 0e+3 + 00.e+2);
	AddTestCase("dqadd7715:p9 r:HALF_EVEN (0e+3 + 00.e+3)", 0e+3, 0e+3 + 00.e+3);
	AddTestCase("dqadd7716:p9 r:HALF_EVEN (0e+3 + 00.e+4)", 0e+3, 0e+3 + 00.e+4);
	AddTestCase("dqadd7717:p9 r:HALF_EVEN (0e+3 + 00.e+5)", 0e+3, 0e+3 + 00.e+5);
	AddTestCase("dqadd7718:p9 r:HALF_EVEN (0e+3 + -00.0)", 0.0, 0e+3 + -00.0);
	AddTestCase("dqadd7719:p9 r:HALF_EVEN (0e+3 + -00.)", 0, 0e+3 + -00.);
	AddTestCase("dqadd7731:p9 r:HALF_EVEN (0e+3 + -00.e+1)", 0e+1, 0e+3 + -00.e+1);
	AddTestCase("dqadd7720:p9 r:HALF_EVEN (00.00 + 0e+3)", 0.00, 00.00 + 0e+3);
	AddTestCase("dqadd7721:p9 r:HALF_EVEN (00.0 + 0e+3)", 0.0, 00.0 + 0e+3);
	AddTestCase("dqadd7722:p9 r:HALF_EVEN (00. + 0e+3)", 0, 00. + 0e+3);
	AddTestCase("dqadd7723:p9 r:HALF_EVEN (00.e+1 + 0e+3)", 0e+1, 00.e+1 + 0e+3);
	AddTestCase("dqadd7724:p9 r:HALF_EVEN (00.e+2 + 0e+3)", 0e+2, 00.e+2 + 0e+3);
	AddTestCase("dqadd7725:p9 r:HALF_EVEN (00.e+3 + 0e+3)", 0e+3, 00.e+3 + 0e+3);
	AddTestCase("dqadd7726:p9 r:HALF_EVEN (00.e+4 + 0e+3)", 0e+3, 00.e+4 + 0e+3);
	AddTestCase("dqadd7727:p9 r:HALF_EVEN (00.e+5 + 0e+3)", 0e+3, 00.e+5 + 0e+3);
	AddTestCase("dqadd7728:p9 r:HALF_EVEN (-00.00 + 0e+3)", 0.00, -00.00 + 0e+3);
	AddTestCase("dqadd7729:p9 r:HALF_EVEN (-00.0 + 0e+3)", 0.0, -00.0 + 0e+3);
	AddTestCase("dqadd7730:p9 r:HALF_EVEN (-00. + 0e+3)", 0, -00. + 0e+3);
	AddTestCase("dqadd7732:p9 r:HALF_EVEN (0 + 0)", 0, 0 + 0);
	AddTestCase("dqadd7733:p9 r:HALF_EVEN (0 + -0)", 0, 0 + -0);
	AddTestCase("dqadd7734:p9 r:HALF_EVEN (-0 + 0)", 0, -0 + 0);
	AddTestCase("dqadd7735:p9 r:HALF_EVEN (-0 + -0) -- ieee 854 special case", -0, -0 + -0);
	AddTestCase("dqadd7736:p9 r:HALF_EVEN (1 + -1)", 0, 1 + -1);
	AddTestCase("dqadd7737:p9 r:HALF_EVEN (-1 + -1)", -2, -1 + -1);
	AddTestCase("dqadd7738:p9 r:HALF_EVEN (1 + 1)", 2, 1 + 1);
	AddTestCase("dqadd7739:p9 r:HALF_EVEN (-1 + 1)", 0, -1 + 1);
	AddTestCase("dqadd7741:p9 r:HALF_EVEN (0 + -1)", -1, 0 + -1);
	AddTestCase("dqadd7742:p9 r:HALF_EVEN (-0 + -1)", -1, -0 + -1);
	AddTestCase("dqadd7743:p9 r:HALF_EVEN (0 + 1)", 1, 0 + 1);
	AddTestCase("dqadd7744:p9 r:HALF_EVEN (-0 + 1)", 1, -0 + 1);
	AddTestCase("dqadd7745:p9 r:HALF_EVEN (-1 + 0)", -1, -1 + 0);
	AddTestCase("dqadd7746:p9 r:HALF_EVEN (-1 + -0)", -1, -1 + -0);
	AddTestCase("dqadd7747:p9 r:HALF_EVEN (1 + 0)", 1, 1 + 0);
	AddTestCase("dqadd7748:p9 r:HALF_EVEN (1 + -0)", 1, 1 + -0);
	AddTestCase("dqadd7751:p9 r:HALF_EVEN (0.0 + -1)", -1.0, 0.0 + -1);
	AddTestCase("dqadd7752:p9 r:HALF_EVEN (-0.0 + -1)", -1.0, -0.0 + -1);
	AddTestCase("dqadd7753:p9 r:HALF_EVEN (0.0 + 1)", 1.0, 0.0 + 1);
	AddTestCase("dqadd7754:p9 r:HALF_EVEN (-0.0 + 1)", 1.0, -0.0 + 1);
	AddTestCase("dqadd7755:p9 r:HALF_EVEN (-1.0 + 0)", -1.0, -1.0 + 0);
	AddTestCase("dqadd7756:p9 r:HALF_EVEN (-1.0 + -0)", -1.0, -1.0 + -0);
	AddTestCase("dqadd7757:p9 r:HALF_EVEN (1.0 + 0)", 1.0, 1.0 + 0);
	AddTestCase("dqadd7758:p9 r:HALF_EVEN (1.0 + -0)", 1.0, 1.0 + -0);
	AddTestCase("dqadd7761:p9 r:HALF_EVEN (0 + -1.0)", -1.0, 0 + -1.0);
	AddTestCase("dqadd7762:p9 r:HALF_EVEN (-0 + -1.0)", -1.0, -0 + -1.0);
	AddTestCase("dqadd7763:p9 r:HALF_EVEN (0 + 1.0)", 1.0, 0 + 1.0);
	AddTestCase("dqadd7764:p9 r:HALF_EVEN (-0 + 1.0)", 1.0, -0 + 1.0);
	AddTestCase("dqadd7765:p9 r:HALF_EVEN (-1 + 0.0)", -1.0, -1 + 0.0);
	AddTestCase("dqadd7766:p9 r:HALF_EVEN (-1 + -0.0)", -1.0, -1 + -0.0);
	AddTestCase("dqadd7767:p9 r:HALF_EVEN (1 + 0.0)", 1.0, 1 + 0.0);
	AddTestCase("dqadd7768:p9 r:HALF_EVEN (1 + -0.0)", 1.0, 1 + -0.0);
	AddTestCase("dqadd7771:p9 r:HALF_EVEN (0.0 + -1.0)", -1.0, 0.0 + -1.0);
	AddTestCase("dqadd7772:p9 r:HALF_EVEN (-0.0 + -1.0)", -1.0, -0.0 + -1.0);
	AddTestCase("dqadd7773:p9 r:HALF_EVEN (0.0 + 1.0)", 1.0, 0.0 + 1.0);
	AddTestCase("dqadd7774:p9 r:HALF_EVEN (-0.0 + 1.0)", 1.0, -0.0 + 1.0);
	AddTestCase("dqadd7775:p9 r:HALF_EVEN (-1.0 + 0.0)", -1.0, -1.0 + 0.0);
	AddTestCase("dqadd7776:p9 r:HALF_EVEN (-1.0 + -0.0)", -1.0, -1.0 + -0.0);
	AddTestCase("dqadd7777:p9 r:HALF_EVEN (1.0 + 0.0)", 1.0, 1.0 + 0.0);
	AddTestCase("dqadd7778:p9 r:HALF_EVEN (1.0 + -0.0)", 1.0, 1.0 + -0.0);
	// specials
	AddTestCase("dqadd7780:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7781:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + -1000)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + -1000);
	AddTestCase("dqadd7782:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + -1)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + -1);
	AddTestCase("dqadd7783:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + -0)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + -0);
	AddTestCase("dqadd7784:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + 0)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + 0);
	AddTestCase("dqadd7785:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + 1)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + 1);
	AddTestCase("dqadd7786:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + 1000)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + 1000);
	AddTestCase("dqadd7787:p9 r:HALF_EVEN (-1000 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, -1000 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7788:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, decimal.NEGATIVE_INFINITY + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7789:p9 r:HALF_EVEN (-1 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, -1 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7790:p9 r:HALF_EVEN (-0 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, -0 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7791:p9 r:HALF_EVEN (0 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, 0 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7792:p9 r:HALF_EVEN (1 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, 1 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7793:p9 r:HALF_EVEN (1000 + decimal.NEGATIVE_INFINITY)", decimal.NEGATIVE_INFINITY, 1000 + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7794:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7800:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + decimal.NEGATIVE_INFINITY) invalid_operation", NaN, decimal.POSITIVE_INFINITY + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7801:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + -1000)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + -1000);
	AddTestCase("dqadd7802:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + -1)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + -1);
	AddTestCase("dqadd7803:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + -0)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + -0);
	AddTestCase("dqadd7804:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + 0)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + 0);
	AddTestCase("dqadd7805:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + 1)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + 1);
	AddTestCase("dqadd7806:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + 1000)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + 1000);
	AddTestCase("dqadd7807:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7808:p9 r:HALF_EVEN (-1000 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, -1000 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7809:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + decimal.POSITIVE_INFINITY) invalid_operation", NaN, decimal.NEGATIVE_INFINITY + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7810:p9 r:HALF_EVEN (-1 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, -1 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7811:p9 r:HALF_EVEN (-0 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, -0 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7812:p9 r:HALF_EVEN (0 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, 0 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7813:p9 r:HALF_EVEN (1 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, 1 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7814:p9 r:HALF_EVEN (1000 + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, 1000 + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7815:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + decimal.POSITIVE_INFINITY)", decimal.POSITIVE_INFINITY, decimal.POSITIVE_INFINITY + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7821:p9 r:HALF_EVEN (NaN + decimal.NEGATIVE_INFINITY)", NaN, NaN + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7822:p9 r:HALF_EVEN (NaN + -1000)", NaN, NaN + -1000);
	AddTestCase("dqadd7823:p9 r:HALF_EVEN (NaN + -1)", NaN, NaN + -1);
	AddTestCase("dqadd7824:p9 r:HALF_EVEN (NaN + -0)", NaN, NaN + -0);
	AddTestCase("dqadd7825:p9 r:HALF_EVEN (NaN + 0)", NaN, NaN + 0);
	AddTestCase("dqadd7826:p9 r:HALF_EVEN (NaN + 1)", NaN, NaN + 1);
	AddTestCase("dqadd7827:p9 r:HALF_EVEN (NaN + 1000)", NaN, NaN + 1000);
	AddTestCase("dqadd7828:p9 r:HALF_EVEN (NaN + decimal.POSITIVE_INFINITY)", NaN, NaN + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7829:p9 r:HALF_EVEN (NaN + NaN)", NaN, NaN + NaN);
	AddTestCase("dqadd7830:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + NaN)", NaN, decimal.NEGATIVE_INFINITY + NaN);
	AddTestCase("dqadd7831:p9 r:HALF_EVEN (-1000 + NaN)", NaN, -1000 + NaN);
	AddTestCase("dqadd7832:p9 r:HALF_EVEN (-1 + NaN)", NaN, -1 + NaN);
	AddTestCase("dqadd7833:p9 r:HALF_EVEN (-0 + NaN)", NaN, -0 + NaN);
	AddTestCase("dqadd7834:p9 r:HALF_EVEN (0 + NaN)", NaN, 0 + NaN);
	AddTestCase("dqadd7835:p9 r:HALF_EVEN (1 + NaN)", NaN, 1 + NaN);
	AddTestCase("dqadd7836:p9 r:HALF_EVEN (1000 + NaN)", NaN, 1000 + NaN);
	AddTestCase("dqadd7837:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + NaN)", NaN, decimal.POSITIVE_INFINITY + NaN);
	AddTestCase("dqadd7841:p9 r:HALF_EVEN (NaN + decimal.NEGATIVE_INFINITY) invalid_operation", NaN, NaN + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7842:p9 r:HALF_EVEN (NaN + -1000) invalid_operation", NaN, NaN + -1000);
	AddTestCase("dqadd7843:p9 r:HALF_EVEN (NaN + -1) invalid_operation", NaN, NaN + -1);
	AddTestCase("dqadd7844:p9 r:HALF_EVEN (NaN + -0) invalid_operation", NaN, NaN + -0);
	AddTestCase("dqadd7845:p9 r:HALF_EVEN (NaN + 0) invalid_operation", NaN, NaN + 0);
	AddTestCase("dqadd7846:p9 r:HALF_EVEN (NaN + 1) invalid_operation", NaN, NaN + 1);
	AddTestCase("dqadd7847:p9 r:HALF_EVEN (NaN + 1000) invalid_operation", NaN, NaN + 1000);
	AddTestCase("dqadd7848:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7849:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7850:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7851:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + NaN) invalid_operation", NaN, decimal.NEGATIVE_INFINITY + NaN);
	AddTestCase("dqadd7852:p9 r:HALF_EVEN (-1000 + NaN) invalid_operation", NaN, -1000 + NaN);
	AddTestCase("dqadd7853:p9 r:HALF_EVEN (-1 + NaN) invalid_operation", NaN, -1 + NaN);
	AddTestCase("dqadd7854:p9 r:HALF_EVEN (-0 + NaN) invalid_operation", NaN, -0 + NaN);
	AddTestCase("dqadd7855:p9 r:HALF_EVEN (0 + NaN) invalid_operation", NaN, 0 + NaN);
	AddTestCase("dqadd7856:p9 r:HALF_EVEN (1 + NaN) invalid_operation", NaN, 1 + NaN);
	AddTestCase("dqadd7857:p9 r:HALF_EVEN (1000 + NaN) invalid_operation", NaN, 1000 + NaN);
	AddTestCase("dqadd7858:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + NaN) invalid_operation", NaN, decimal.POSITIVE_INFINITY + NaN);
	AddTestCase("dqadd7859:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	// propagating nans
	AddTestCase("dqadd7861:p9 r:HALF_EVEN (NaN + decimal.NEGATIVE_INFINITY)", NaN, NaN + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7862:p9 r:HALF_EVEN (+NaN + -1000)", NaN, +NaN + -1000);
	AddTestCase("dqadd7863:p9 r:HALF_EVEN (NaN + 1000)", NaN, NaN + 1000);
	AddTestCase("dqadd7864:p9 r:HALF_EVEN (NaN + decimal.POSITIVE_INFINITY)", NaN, NaN + decimal.POSITIVE_INFINITY);
	AddTestCase("dqadd7865:p9 r:HALF_EVEN (NaN + +NaN)", NaN, NaN + +NaN);
	AddTestCase("dqadd7866:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + NaN)", NaN, decimal.NEGATIVE_INFINITY + NaN);
	AddTestCase("dqadd7867:p9 r:HALF_EVEN (-1000 + NaN)", NaN, -1000 + NaN);
	AddTestCase("dqadd7868:p9 r:HALF_EVEN (1000 + NaN)", NaN, 1000 + NaN);
	AddTestCase("dqadd7869:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + +NaN)", NaN, decimal.POSITIVE_INFINITY + +NaN);
	AddTestCase("dqadd7871:p9 r:HALF_EVEN (NaN + decimal.NEGATIVE_INFINITY) invalid_operation", NaN, NaN + decimal.NEGATIVE_INFINITY);
	AddTestCase("dqadd7872:p9 r:HALF_EVEN (NaN + -1000) invalid_operation", NaN, NaN + -1000);
	AddTestCase("dqadd7873:p9 r:HALF_EVEN (NaN + 1000) invalid_operation", NaN, NaN + 1000);
	AddTestCase("dqadd7874:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7875:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7876:p9 r:HALF_EVEN (NaN + NaN) invalid_operation", NaN, NaN + NaN);
	AddTestCase("dqadd7877:p9 r:HALF_EVEN (decimal.NEGATIVE_INFINITY + +NaN) invalid_operation", NaN, decimal.NEGATIVE_INFINITY + +NaN);
	AddTestCase("dqadd7878:p9 r:HALF_EVEN (-1000 + NaN) invalid_operation", NaN, -1000 + NaN);
	AddTestCase("dqadd7879:p9 r:HALF_EVEN (1000 + NaN) invalid_operation", NaN, 1000 + NaN);
	AddTestCase("dqadd7880:p9 r:HALF_EVEN (decimal.POSITIVE_INFINITY + NaN) invalid_operation", NaN, decimal.POSITIVE_INFINITY + NaN);
	AddTestCase("dqadd7881:p9 r:HALF_EVEN (+NaN + +NaN) invalid_operation", NaN, +NaN + +NaN);
	AddTestCase("dqadd7882:p9 r:HALF_EVEN (-NaN + NaN)", -NaN, -NaN + NaN);
	AddTestCase("dqadd7883:p9 r:HALF_EVEN (-NaN + NaN) invalid_operation", -NaN, -NaN + NaN);
	AddTestCase("dqadd7884:p9 r:HALF_EVEN (1000 + -NaN)", -NaN, 1000 + -NaN);
	AddTestCase("dqadd7885:p9 r:HALF_EVEN (1000 + -NaN) invalid_operation", -NaN, 1000 + -NaN);
	// here we explore near the boundary of rounding a subnormal to nmin
	// check overflow edge case
	//               1234567890123456
	AddTestCase("dqadd7973:p9 r:HALF_EVEN (9.999999999999999999999999999999999e+6144 + 1) inexact rounded", 9.999999999999999999999999999999999e+6144, 9.999999999999999999999999999999999e+6144 + 1);
	AddTestCase("dqadd7974:p9 r:HALF_EVEN (9999999999999999999999999999999999e+6111 + 1) inexact rounded", 9.999999999999999999999999999999999e+6144, 9999999999999999999999999999999999e+6111 + 1);
	AddTestCase("dqadd7981:p9 r:HALF_EVEN (9999999999999999999999999999999999e+6111 + 4e+6110) inexact rounded", 9.999999999999999999999999999999999e+6144, 9999999999999999999999999999999999e+6111 + 4e+6110);
	AddTestCase("dqadd7982:p9 r:HALF_EVEN (9999999999999999999999999999999999e+6111 + 3e+6110) inexact rounded", 9.999999999999999999999999999999999e+6144, 9999999999999999999999999999999999e+6111 + 3e+6110);
	AddTestCase("dqadd7983:p9 r:HALF_EVEN (9999999999999999999999999999999999e+6111 + 2e+6110) inexact rounded", 9.999999999999999999999999999999999e+6144, 9999999999999999999999999999999999e+6111 + 2e+6110);
	AddTestCase("dqadd7984:p9 r:HALF_EVEN (9999999999999999999999999999999999e+6111 + 1e+6110) inexact rounded", 9.999999999999999999999999999999999e+6144, 9999999999999999999999999999999999e+6111 + 1e+6110);
	AddTestCase("dqadd7986:p9 r:HALF_EVEN (-9.999999999999999999999999999999999e+6144 + -1) inexact rounded", -9.999999999999999999999999999999999e+6144, -9.999999999999999999999999999999999e+6144 + -1);
	AddTestCase("dqadd7987:p9 r:HALF_EVEN (-9999999999999999999999999999999999e+6111 + -1) inexact rounded", -9.999999999999999999999999999999999e+6144, -9999999999999999999999999999999999e+6111 + -1);
	AddTestCase("dqadd7994:p9 r:HALF_EVEN (-9999999999999999999999999999999999e+6111 + -4e+6110) inexact rounded", -9.999999999999999999999999999999999e+6144, -9999999999999999999999999999999999e+6111 + -4e+6110);
	AddTestCase("dqadd7995:p9 r:HALF_EVEN (-9999999999999999999999999999999999e+6111 + -3e+6110) inexact rounded", -9.999999999999999999999999999999999e+6144, -9999999999999999999999999999999999e+6111 + -3e+6110);
	AddTestCase("dqadd7996:p9 r:HALF_EVEN (-9999999999999999999999999999999999e+6111 + -2e+6110) inexact rounded", -9.999999999999999999999999999999999e+6144, -9999999999999999999999999999999999e+6111 + -2e+6110);
	AddTestCase("dqadd7997:p9 r:HALF_EVEN (-9999999999999999999999999999999999e+6111 + -1e+6110) inexact rounded", -9.999999999999999999999999999999999e+6144, -9999999999999999999999999999999999e+6111 + -1e+6110);
	// and for round down full and subnormal results
}
{
	use rounding CEILING;
	AddTestCase("dqadd71110:p9 r:CEILING (-1e+2 + +1e-6143) rounded inexact", -99.99999999999999999999999999999999, -1e+2 + +1e-6143);
	AddTestCase("dqadd71111:p9 r:CEILING (-1e+1 + +1e-6143) rounded inexact", -9.999999999999999999999999999999999, -1e+1 + +1e-6143);
	AddTestCase("dqadd71113:p9 r:CEILING (-1 + +1e-6143) rounded inexact", -0.9999999999999999999999999999999999, -1 + +1e-6143);
	AddTestCase("dqadd71114:p9 r:CEILING (-1e-1 + +1e-6143) rounded inexact", -0.09999999999999999999999999999999999, -1e-1 + +1e-6143);
	AddTestCase("dqadd71115:p9 r:CEILING (-1e-2 + +1e-6143) rounded inexact", -0.009999999999999999999999999999999999, -1e-2 + +1e-6143);
	AddTestCase("dqadd71116:p9 r:CEILING (-1e-3 + +1e-6143) rounded inexact", -0.0009999999999999999999999999999999999, -1e-3 + +1e-6143);
	AddTestCase("dqadd71117:p9 r:CEILING (-1e-4 + +1e-6143) rounded inexact", -0.00009999999999999999999999999999999999, -1e-4 + +1e-6143);
	AddTestCase("dqadd71118:p9 r:CEILING (-1e-5 + +1e-6143) rounded inexact", -0.000009999999999999999999999999999999999, -1e-5 + +1e-6143);
	AddTestCase("dqadd71119:p9 r:CEILING (-1e-6 + +1e-6143) rounded inexact", -9.999999999999999999999999999999999e-7, -1e-6 + +1e-6143);
	// tests based on gunnar degnbol's edge case
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd71300:p9 r:HALF_EVEN (1e34 + -0.5) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5);
	AddTestCase("dqadd71310:p9 r:HALF_EVEN (1e34 + -0.51) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.51);
	AddTestCase("dqadd71311:p9 r:HALF_EVEN (1e34 + -0.501) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.501);
	AddTestCase("dqadd71312:p9 r:HALF_EVEN (1e34 + -0.5001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.5001);
	AddTestCase("dqadd71313:p9 r:HALF_EVEN (1e34 + -0.50001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.50001);
	AddTestCase("dqadd71314:p9 r:HALF_EVEN (1e34 + -0.500001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.500001);
	AddTestCase("dqadd71315:p9 r:HALF_EVEN (1e34 + -0.5000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.5000001);
	AddTestCase("dqadd71316:p9 r:HALF_EVEN (1e34 + -0.50000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.50000001);
	AddTestCase("dqadd71317:p9 r:HALF_EVEN (1e34 + -0.500000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.500000001);
	AddTestCase("dqadd71318:p9 r:HALF_EVEN (1e34 + -0.5000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.5000000001);
	AddTestCase("dqadd71319:p9 r:HALF_EVEN (1e34 + -0.50000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.50000000001);
	AddTestCase("dqadd71320:p9 r:HALF_EVEN (1e34 + -0.500000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.500000000001);
	AddTestCase("dqadd71321:p9 r:HALF_EVEN (1e34 + -0.5000000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.5000000000001);
	AddTestCase("dqadd71322:p9 r:HALF_EVEN (1e34 + -0.50000000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.50000000000001);
	AddTestCase("dqadd71323:p9 r:HALF_EVEN (1e34 + -0.500000000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.500000000000001);
	AddTestCase("dqadd71324:p9 r:HALF_EVEN (1e34 + -0.5000000000000001) inexact rounded", 9999999999999999999999999999999999, 1e34 + -0.5000000000000001);
	AddTestCase("dqadd71325:p9 r:HALF_EVEN (1e34 + -0.5000000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5000000000000000);
	AddTestCase("dqadd71326:p9 r:HALF_EVEN (1e34 + -0.500000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.500000000000000);
	AddTestCase("dqadd71327:p9 r:HALF_EVEN (1e34 + -0.50000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.50000000000000);
	AddTestCase("dqadd71328:p9 r:HALF_EVEN (1e34 + -0.5000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5000000000000);
	AddTestCase("dqadd71329:p9 r:HALF_EVEN (1e34 + -0.500000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.500000000000);
	AddTestCase("dqadd71330:p9 r:HALF_EVEN (1e34 + -0.50000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.50000000000);
	AddTestCase("dqadd71331:p9 r:HALF_EVEN (1e34 + -0.5000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5000000000);
	AddTestCase("dqadd71332:p9 r:HALF_EVEN (1e34 + -0.500000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.500000000);
	AddTestCase("dqadd71333:p9 r:HALF_EVEN (1e34 + -0.50000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.50000000);
	AddTestCase("dqadd71334:p9 r:HALF_EVEN (1e34 + -0.5000000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5000000);
	AddTestCase("dqadd71335:p9 r:HALF_EVEN (1e34 + -0.500000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.500000);
	AddTestCase("dqadd71336:p9 r:HALF_EVEN (1e34 + -0.50000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.50000);
	AddTestCase("dqadd71337:p9 r:HALF_EVEN (1e34 + -0.5000) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.5000);
	AddTestCase("dqadd71338:p9 r:HALF_EVEN (1e34 + -0.500) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.500);
	AddTestCase("dqadd71339:p9 r:HALF_EVEN (1e34 + -0.50) inexact rounded", 1.000000000000000000000000000000000e+34, 1e34 + -0.50);
	AddTestCase("dqadd71340:p9 r:HALF_EVEN (1e34 + -5000000.000010001) inexact rounded", 9999999999999999999999999995000000, 1e34 + -5000000.000010001);
	AddTestCase("dqadd71341:p9 r:HALF_EVEN (1e34 + -5000000.000000001) inexact rounded", 9999999999999999999999999995000000, 1e34 + -5000000.000000001);
	AddTestCase("dqadd71349:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4);
	AddTestCase("dqadd71350:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.49) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.49);
	AddTestCase("dqadd71351:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.499) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.499);
	AddTestCase("dqadd71352:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4999);
	AddTestCase("dqadd71353:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.49999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.49999);
	AddTestCase("dqadd71354:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.499999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.499999);
	AddTestCase("dqadd71355:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4999999);
	AddTestCase("dqadd71356:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.49999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.49999999);
	AddTestCase("dqadd71357:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.499999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.499999999);
	AddTestCase("dqadd71358:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4999999999);
	AddTestCase("dqadd71359:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.49999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.49999999999);
	AddTestCase("dqadd71360:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.499999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.499999999999);
	AddTestCase("dqadd71361:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4999999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4999999999999);
	AddTestCase("dqadd71362:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.49999999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.49999999999999);
	AddTestCase("dqadd71363:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.499999999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.499999999999999);
	AddTestCase("dqadd71364:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.4999999999999999) inexact rounded", 9999999999999999999999999999999999, 9999999999999999999999999999999999 + 0.4999999999999999);
	AddTestCase("dqadd71365:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000000000000);
	AddTestCase("dqadd71367:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000000000000);
	AddTestCase("dqadd71368:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000000000000);
	AddTestCase("dqadd71369:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000000000);
	AddTestCase("dqadd71370:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000000000);
	AddTestCase("dqadd71371:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000000000);
	AddTestCase("dqadd71372:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000000);
	AddTestCase("dqadd71373:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000000);
	AddTestCase("dqadd71374:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000000);
	AddTestCase("dqadd71375:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000);
	AddTestCase("dqadd71376:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000);
	AddTestCase("dqadd71377:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000);
	AddTestCase("dqadd71378:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000);
	AddTestCase("dqadd71379:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500);
	AddTestCase("dqadd71380:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50);
	AddTestCase("dqadd71381:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5);
	AddTestCase("dqadd71382:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000000000001);
	AddTestCase("dqadd71383:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000000000001);
	AddTestCase("dqadd71384:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000000000001);
	AddTestCase("dqadd71385:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000000001);
	AddTestCase("dqadd71386:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000000001);
	AddTestCase("dqadd71387:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000000001);
	AddTestCase("dqadd71388:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000000001);
	AddTestCase("dqadd71389:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500000001);
	AddTestCase("dqadd71390:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50000001);
	AddTestCase("dqadd71391:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5000001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5000001);
	AddTestCase("dqadd71392:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.500001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.500001);
	AddTestCase("dqadd71393:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.50001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.50001);
	AddTestCase("dqadd71394:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.5001) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.5001);
	AddTestCase("dqadd71395:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.501) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.501);
	AddTestCase("dqadd71396:p9 r:HALF_EVEN (9999999999999999999999999999999999 + 0.51) inexact rounded", 1.000000000000000000000000000000000e+34, 9999999999999999999999999999999999 + 0.51);
	// more gd edge cases, where difference between the unadjusted
	// exponents is larger than the maximum precision and one side is 0
	AddTestCase("dqadd71420:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345)", 1.123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345);
	AddTestCase("dqadd71421:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-1)", 0.1123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-1);
	AddTestCase("dqadd71422:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-2)", 0.01123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-2);
	AddTestCase("dqadd71423:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-3)", 0.001123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-3);
	AddTestCase("dqadd71424:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-4)", 0.0001123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-4);
	AddTestCase("dqadd71425:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-5)", 0.00001123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-5);
	AddTestCase("dqadd71426:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-6)", 0.000001123456789987654321123456789012345, 0 + 1.123456789987654321123456789012345e-6);
	AddTestCase("dqadd71427:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-7)", 1.123456789987654321123456789012345e-7, 0 + 1.123456789987654321123456789012345e-7);
	AddTestCase("dqadd71428:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-8)", 1.123456789987654321123456789012345e-8, 0 + 1.123456789987654321123456789012345e-8);
	AddTestCase("dqadd71429:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-9)", 1.123456789987654321123456789012345e-9, 0 + 1.123456789987654321123456789012345e-9);
	AddTestCase("dqadd71430:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-10)", 1.123456789987654321123456789012345e-10, 0 + 1.123456789987654321123456789012345e-10);
	AddTestCase("dqadd71431:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-11)", 1.123456789987654321123456789012345e-11, 0 + 1.123456789987654321123456789012345e-11);
	AddTestCase("dqadd71432:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-12)", 1.123456789987654321123456789012345e-12, 0 + 1.123456789987654321123456789012345e-12);
	AddTestCase("dqadd71433:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-13)", 1.123456789987654321123456789012345e-13, 0 + 1.123456789987654321123456789012345e-13);
	AddTestCase("dqadd71434:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-14)", 1.123456789987654321123456789012345e-14, 0 + 1.123456789987654321123456789012345e-14);
	AddTestCase("dqadd71435:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-15)", 1.123456789987654321123456789012345e-15, 0 + 1.123456789987654321123456789012345e-15);
	AddTestCase("dqadd71436:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-16)", 1.123456789987654321123456789012345e-16, 0 + 1.123456789987654321123456789012345e-16);
	AddTestCase("dqadd71437:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-17)", 1.123456789987654321123456789012345e-17, 0 + 1.123456789987654321123456789012345e-17);
	AddTestCase("dqadd71438:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-18)", 1.123456789987654321123456789012345e-18, 0 + 1.123456789987654321123456789012345e-18);
	AddTestCase("dqadd71439:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-19)", 1.123456789987654321123456789012345e-19, 0 + 1.123456789987654321123456789012345e-19);
	AddTestCase("dqadd71440:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-20)", 1.123456789987654321123456789012345e-20, 0 + 1.123456789987654321123456789012345e-20);
	AddTestCase("dqadd71441:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-21)", 1.123456789987654321123456789012345e-21, 0 + 1.123456789987654321123456789012345e-21);
	AddTestCase("dqadd71442:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-22)", 1.123456789987654321123456789012345e-22, 0 + 1.123456789987654321123456789012345e-22);
	AddTestCase("dqadd71443:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-23)", 1.123456789987654321123456789012345e-23, 0 + 1.123456789987654321123456789012345e-23);
	AddTestCase("dqadd71444:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-24)", 1.123456789987654321123456789012345e-24, 0 + 1.123456789987654321123456789012345e-24);
	AddTestCase("dqadd71445:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-25)", 1.123456789987654321123456789012345e-25, 0 + 1.123456789987654321123456789012345e-25);
	AddTestCase("dqadd71446:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-26)", 1.123456789987654321123456789012345e-26, 0 + 1.123456789987654321123456789012345e-26);
	AddTestCase("dqadd71447:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-27)", 1.123456789987654321123456789012345e-27, 0 + 1.123456789987654321123456789012345e-27);
	AddTestCase("dqadd71448:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-28)", 1.123456789987654321123456789012345e-28, 0 + 1.123456789987654321123456789012345e-28);
	AddTestCase("dqadd71449:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-29)", 1.123456789987654321123456789012345e-29, 0 + 1.123456789987654321123456789012345e-29);
	AddTestCase("dqadd71450:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-30)", 1.123456789987654321123456789012345e-30, 0 + 1.123456789987654321123456789012345e-30);
	AddTestCase("dqadd71451:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-31)", 1.123456789987654321123456789012345e-31, 0 + 1.123456789987654321123456789012345e-31);
	AddTestCase("dqadd71452:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-32)", 1.123456789987654321123456789012345e-32, 0 + 1.123456789987654321123456789012345e-32);
	AddTestCase("dqadd71453:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-33)", 1.123456789987654321123456789012345e-33, 0 + 1.123456789987654321123456789012345e-33);
	AddTestCase("dqadd71454:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-34)", 1.123456789987654321123456789012345e-34, 0 + 1.123456789987654321123456789012345e-34);
	AddTestCase("dqadd71455:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-35)", 1.123456789987654321123456789012345e-35, 0 + 1.123456789987654321123456789012345e-35);
	AddTestCase("dqadd71456:p9 r:HALF_EVEN (0 + 1.123456789987654321123456789012345e-36)", 1.123456789987654321123456789012345e-36, 0 + 1.123456789987654321123456789012345e-36);
	// same, reversed 0
	AddTestCase("dqadd71460:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0);
	AddTestCase("dqadd71461:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-1 + 0)", 0.1123456789987654321123456789012345, 1.123456789987654321123456789012345e-1 + 0);
	AddTestCase("dqadd71462:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-2 + 0)", 0.01123456789987654321123456789012345, 1.123456789987654321123456789012345e-2 + 0);
	AddTestCase("dqadd71463:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-3 + 0)", 0.001123456789987654321123456789012345, 1.123456789987654321123456789012345e-3 + 0);
	AddTestCase("dqadd71464:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-4 + 0)", 0.0001123456789987654321123456789012345, 1.123456789987654321123456789012345e-4 + 0);
	AddTestCase("dqadd71465:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-5 + 0)", 0.00001123456789987654321123456789012345, 1.123456789987654321123456789012345e-5 + 0);
	AddTestCase("dqadd71466:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-6 + 0)", 0.000001123456789987654321123456789012345, 1.123456789987654321123456789012345e-6 + 0);
	AddTestCase("dqadd71467:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-7 + 0)", 1.123456789987654321123456789012345e-7, 1.123456789987654321123456789012345e-7 + 0);
	AddTestCase("dqadd71468:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-8 + 0)", 1.123456789987654321123456789012345e-8, 1.123456789987654321123456789012345e-8 + 0);
	AddTestCase("dqadd71469:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-9 + 0)", 1.123456789987654321123456789012345e-9, 1.123456789987654321123456789012345e-9 + 0);
	AddTestCase("dqadd71470:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-10 + 0)", 1.123456789987654321123456789012345e-10, 1.123456789987654321123456789012345e-10 + 0);
	AddTestCase("dqadd71471:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-11 + 0)", 1.123456789987654321123456789012345e-11, 1.123456789987654321123456789012345e-11 + 0);
	AddTestCase("dqadd71472:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-12 + 0)", 1.123456789987654321123456789012345e-12, 1.123456789987654321123456789012345e-12 + 0);
	AddTestCase("dqadd71473:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-13 + 0)", 1.123456789987654321123456789012345e-13, 1.123456789987654321123456789012345e-13 + 0);
	AddTestCase("dqadd71474:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-14 + 0)", 1.123456789987654321123456789012345e-14, 1.123456789987654321123456789012345e-14 + 0);
	AddTestCase("dqadd71475:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-15 + 0)", 1.123456789987654321123456789012345e-15, 1.123456789987654321123456789012345e-15 + 0);
	AddTestCase("dqadd71476:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-16 + 0)", 1.123456789987654321123456789012345e-16, 1.123456789987654321123456789012345e-16 + 0);
	AddTestCase("dqadd71477:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-17 + 0)", 1.123456789987654321123456789012345e-17, 1.123456789987654321123456789012345e-17 + 0);
	AddTestCase("dqadd71478:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-18 + 0)", 1.123456789987654321123456789012345e-18, 1.123456789987654321123456789012345e-18 + 0);
	AddTestCase("dqadd71479:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-19 + 0)", 1.123456789987654321123456789012345e-19, 1.123456789987654321123456789012345e-19 + 0);
	AddTestCase("dqadd71480:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-20 + 0)", 1.123456789987654321123456789012345e-20, 1.123456789987654321123456789012345e-20 + 0);
	AddTestCase("dqadd71481:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-21 + 0)", 1.123456789987654321123456789012345e-21, 1.123456789987654321123456789012345e-21 + 0);
	AddTestCase("dqadd71482:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-22 + 0)", 1.123456789987654321123456789012345e-22, 1.123456789987654321123456789012345e-22 + 0);
	AddTestCase("dqadd71483:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-23 + 0)", 1.123456789987654321123456789012345e-23, 1.123456789987654321123456789012345e-23 + 0);
	AddTestCase("dqadd71484:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-24 + 0)", 1.123456789987654321123456789012345e-24, 1.123456789987654321123456789012345e-24 + 0);
	AddTestCase("dqadd71485:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-25 + 0)", 1.123456789987654321123456789012345e-25, 1.123456789987654321123456789012345e-25 + 0);
	AddTestCase("dqadd71486:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-26 + 0)", 1.123456789987654321123456789012345e-26, 1.123456789987654321123456789012345e-26 + 0);
	AddTestCase("dqadd71487:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-27 + 0)", 1.123456789987654321123456789012345e-27, 1.123456789987654321123456789012345e-27 + 0);
	AddTestCase("dqadd71488:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-28 + 0)", 1.123456789987654321123456789012345e-28, 1.123456789987654321123456789012345e-28 + 0);
	AddTestCase("dqadd71489:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-29 + 0)", 1.123456789987654321123456789012345e-29, 1.123456789987654321123456789012345e-29 + 0);
	AddTestCase("dqadd71490:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-30 + 0)", 1.123456789987654321123456789012345e-30, 1.123456789987654321123456789012345e-30 + 0);
	AddTestCase("dqadd71491:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-31 + 0)", 1.123456789987654321123456789012345e-31, 1.123456789987654321123456789012345e-31 + 0);
	AddTestCase("dqadd71492:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-32 + 0)", 1.123456789987654321123456789012345e-32, 1.123456789987654321123456789012345e-32 + 0);
	AddTestCase("dqadd71493:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-33 + 0)", 1.123456789987654321123456789012345e-33, 1.123456789987654321123456789012345e-33 + 0);
	AddTestCase("dqadd71494:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-34 + 0)", 1.123456789987654321123456789012345e-34, 1.123456789987654321123456789012345e-34 + 0);
	AddTestCase("dqadd71495:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-35 + 0)", 1.123456789987654321123456789012345e-35, 1.123456789987654321123456789012345e-35 + 0);
	AddTestCase("dqadd71496:p9 r:HALF_EVEN (1.123456789987654321123456789012345e-36 + 0)", 1.123456789987654321123456789012345e-36, 1.123456789987654321123456789012345e-36 + 0);
	// same, es on the 0
	AddTestCase("dqadd71500:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-0)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-0);
	AddTestCase("dqadd71501:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-1)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-1);
	AddTestCase("dqadd71502:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-2)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-2);
	AddTestCase("dqadd71503:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-3)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-3);
	AddTestCase("dqadd71504:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-4)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-4);
	AddTestCase("dqadd71505:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-5)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-5);
	AddTestCase("dqadd71506:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-6)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-6);
	AddTestCase("dqadd71507:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-7)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-7);
	AddTestCase("dqadd71508:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-8)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-8);
	AddTestCase("dqadd71509:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-9)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-9);
	AddTestCase("dqadd71510:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-10)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-10);
	AddTestCase("dqadd71511:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-11)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-11);
	AddTestCase("dqadd71512:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-12)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-12);
	AddTestCase("dqadd71513:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-13)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-13);
	AddTestCase("dqadd71514:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-14)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-14);
	AddTestCase("dqadd71515:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-15)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-15);
	AddTestCase("dqadd71516:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-16)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-16);
	AddTestCase("dqadd71517:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-17)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-17);
	AddTestCase("dqadd71518:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-18)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-18);
	AddTestCase("dqadd71519:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-19)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-19);
	AddTestCase("dqadd71520:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-20)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-20);
	AddTestCase("dqadd71521:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-21)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-21);
	AddTestCase("dqadd71522:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-22)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-22);
	AddTestCase("dqadd71523:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-23)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-23);
	AddTestCase("dqadd71524:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-24)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-24);
	AddTestCase("dqadd71525:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-25)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-25);
	AddTestCase("dqadd71526:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-26)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-26);
	AddTestCase("dqadd71527:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-27)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-27);
	AddTestCase("dqadd71528:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-28)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-28);
	AddTestCase("dqadd71529:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-29)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-29);
	AddTestCase("dqadd71530:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-30)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-30);
	AddTestCase("dqadd71531:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-31)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-31);
	AddTestCase("dqadd71532:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-32)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-32);
	AddTestCase("dqadd71533:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-33)", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-33);
	// next four flag rounded because the 0 extends the result
	AddTestCase("dqadd71534:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-34) rounded", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-34);
	AddTestCase("dqadd71535:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-35) rounded", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-35);
	AddTestCase("dqadd71536:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-36) rounded", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-36);
	AddTestCase("dqadd71537:p9 r:HALF_EVEN (1.123456789987654321123456789012345 + 0e-37) rounded", 1.123456789987654321123456789012345, 1.123456789987654321123456789012345 + 0e-37);
	// sum of two opposite-sign operands is exactly 0 and floor => -0
}
{
	use rounding HALF_UP;
	// exact zeros from zeros
	AddTestCase("dqadd71600:p9 r:HALF_UP (0 + 0e-19)", 0e-19, 0 + 0e-19);
	AddTestCase("dqadd71601:p9 r:HALF_UP (-0 + 0e-19)", 0e-19, -0 + 0e-19);
	AddTestCase("dqadd71602:p9 r:HALF_UP (0 + -0e-19)", 0e-19, 0 + -0e-19);
	AddTestCase("dqadd71603:p9 r:HALF_UP (-0 + -0e-19)", -0e-19, -0 + -0e-19);
	// exact zeros from non-zeros
	AddTestCase("dqadd71611:p9 r:HALF_UP (-11 + 11)", 0, -11 + 11);
	AddTestCase("dqadd71612:p9 r:HALF_UP (11 + -11)", 0, 11 + -11);
}
{
	use rounding HALF_DOWN;
	// exact zeros from zeros
	AddTestCase("dqadd71620:p9 r:HALF_DOWN (0 + 0e-19)", 0e-19, 0 + 0e-19);
	AddTestCase("dqadd71621:p9 r:HALF_DOWN (-0 + 0e-19)", 0e-19, -0 + 0e-19);
	AddTestCase("dqadd71622:p9 r:HALF_DOWN (0 + -0e-19)", 0e-19, 0 + -0e-19);
	AddTestCase("dqadd71623:p9 r:HALF_DOWN (-0 + -0e-19)", -0e-19, -0 + -0e-19);
	// exact zeros from non-zeros
	AddTestCase("dqadd71631:p9 r:HALF_DOWN (-11 + 11)", 0, -11 + 11);
	AddTestCase("dqadd71632:p9 r:HALF_DOWN (11 + -11)", 0, 11 + -11);
}
{
	use rounding HALF_EVEN;
	// exact zeros from zeros
	AddTestCase("dqadd71640:p9 r:HALF_EVEN (0 + 0e-19)", 0e-19, 0 + 0e-19);
	AddTestCase("dqadd71641:p9 r:HALF_EVEN (-0 + 0e-19)", 0e-19, -0 + 0e-19);
	AddTestCase("dqadd71642:p9 r:HALF_EVEN (0 + -0e-19)", 0e-19, 0 + -0e-19);
	AddTestCase("dqadd71643:p9 r:HALF_EVEN (-0 + -0e-19)", -0e-19, -0 + -0e-19);
	// exact zeros from non-zeros
	AddTestCase("dqadd71651:p9 r:HALF_EVEN (-11 + 11)", 0, -11 + 11);
	AddTestCase("dqadd71652:p9 r:HALF_EVEN (11 + -11)", 0, 11 + -11);
	// exact zeros from zeros
	// exact zeros from non-zeros
	// exact zeros from zeros
	// exact zeros from non-zeros
}
{
	use rounding CEILING;
	// exact zeros from zeros
	AddTestCase("dqadd71700:p9 r:CEILING (0 + 0e-19)", 0e-19, 0 + 0e-19);
	AddTestCase("dqadd71701:p9 r:CEILING (-0 + 0e-19)", 0e-19, -0 + 0e-19);
	AddTestCase("dqadd71702:p9 r:CEILING (0 + -0e-19)", 0e-19, 0 + -0e-19);
	AddTestCase("dqadd71703:p9 r:CEILING (-0 + -0e-19)", -0e-19, -0 + -0e-19);
	// exact zeros from non-zeros
	AddTestCase("dqadd71711:p9 r:CEILING (-11 + 11)", 0, -11 + 11);
	AddTestCase("dqadd71712:p9 r:CEILING (11 + -11)", 0, 11 + -11);
	// and the extra-special ugly case; unusual minuses marked by -- *
}
{
	use rounding FLOOR;
	// exact zeros from zeros
	AddTestCase("dqadd71720:p9 r:FLOOR (0 + 0e-19)", 0e-19, 0 + 0e-19);
	AddTestCase("dqadd71721:p9 r:FLOOR (-0 + 0e-19) -- *", -0e-19, -0 + 0e-19);
	AddTestCase("dqadd71722:p9 r:FLOOR (0 + -0e-19) -- *", -0e-19, 0 + -0e-19);
	AddTestCase("dqadd71723:p9 r:FLOOR (-0 + -0e-19)", -0e-19, -0 + -0e-19);
	// exact zeros from non-zeros
	AddTestCase("dqadd71731:p9 r:FLOOR (-11 + 11) -- *", -0, -11 + 11);
	AddTestCase("dqadd71732:p9 r:FLOOR (11 + -11) -- *", -0, 11 + -11);
	// examples from sql proposal (krishna kulkarni)
	AddTestCase("dqadd71741:p9 r:FLOOR (130e-2 + 120e-2)", 2.50, 130e-2 + 120e-2);
	AddTestCase("dqadd71742:p9 r:FLOOR (130e-2 + 12e-1)", 2.50, 130e-2 + 12e-1);
	AddTestCase("dqadd71743:p9 r:FLOOR (130e-2 + 1e0)", 2.30, 130e-2 + 1e0);
	AddTestCase("dqadd71744:p9 r:FLOOR (1e2 + 1e4)", 1.01e+4, 1e2 + 1e4);
	AddTestCase("dqadd71745:p9 r:FLOOR (130e-2 + -120e-2)", 0.10, 130e-2 + -120e-2);
	AddTestCase("dqadd71746:p9 r:FLOOR (130e-2 + -12e-1)", 0.10, 130e-2 + -12e-1);
	AddTestCase("dqadd71747:p9 r:FLOOR (130e-2 + -1e0)", 0.30, 130e-2 + -1e0);
	AddTestCase("dqadd71748:p9 r:FLOOR (1e2 + -1e4)", -9.9e+3, 1e2 + -1e4);
	// gappy coefficients; check residue handling even with full coefficient gap
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd75001:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 1)", 1239876543211234567894567890123457, 1239876543211234567894567890123456 + 1);
	AddTestCase("dqadd75002:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 0.6) inexact rounded", 1239876543211234567894567890123457, 1239876543211234567894567890123456 + 0.6);
	AddTestCase("dqadd75003:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 0.06) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 0.06);
	AddTestCase("dqadd75004:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-3) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-3);
	AddTestCase("dqadd75005:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-4) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-4);
	AddTestCase("dqadd75006:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-5) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-5);
	AddTestCase("dqadd75007:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-6) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-6);
	AddTestCase("dqadd75008:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-7) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-7);
	AddTestCase("dqadd75009:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-8) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-8);
	AddTestCase("dqadd75010:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-9) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-9);
	AddTestCase("dqadd75011:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-10) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-10);
	AddTestCase("dqadd75012:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-11) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-11);
	AddTestCase("dqadd75013:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-12) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-12);
	AddTestCase("dqadd75014:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-13) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-13);
	AddTestCase("dqadd75015:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-14) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-14);
	AddTestCase("dqadd75016:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-15) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-15);
	AddTestCase("dqadd75017:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-16) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-16);
	AddTestCase("dqadd75018:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-17) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-17);
	AddTestCase("dqadd75019:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-18) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-18);
	AddTestCase("dqadd75020:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-19) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-19);
	AddTestCase("dqadd75021:p9 r:HALF_EVEN (1239876543211234567894567890123456 + 6e-20) inexact rounded", 1239876543211234567894567890123456, 1239876543211234567894567890123456 + 6e-20);
	// widening second argument at gap
	AddTestCase("dqadd75030:p9 r:HALF_EVEN (12398765432112345678945678 + 1)", 12398765432112345678945679, 12398765432112345678945678 + 1);
	AddTestCase("dqadd75031:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1)", 12398765432112345678945678.1, 12398765432112345678945678 + 0.1);
	AddTestCase("dqadd75032:p9 r:HALF_EVEN (12398765432112345678945678 + 0.12)", 12398765432112345678945678.12, 12398765432112345678945678 + 0.12);
	AddTestCase("dqadd75033:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123)", 12398765432112345678945678.123, 12398765432112345678945678 + 0.123);
	AddTestCase("dqadd75034:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234)", 12398765432112345678945678.1234, 12398765432112345678945678 + 0.1234);
	AddTestCase("dqadd75035:p9 r:HALF_EVEN (12398765432112345678945678 + 0.12345)", 12398765432112345678945678.12345, 12398765432112345678945678 + 0.12345);
	AddTestCase("dqadd75036:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123456)", 12398765432112345678945678.123456, 12398765432112345678945678 + 0.123456);
	AddTestCase("dqadd75037:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567)", 12398765432112345678945678.1234567, 12398765432112345678945678 + 0.1234567);
	AddTestCase("dqadd75038:p9 r:HALF_EVEN (12398765432112345678945678 + 0.12345678)", 12398765432112345678945678.12345678, 12398765432112345678945678 + 0.12345678);
	AddTestCase("dqadd75039:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123456789) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.123456789);
	AddTestCase("dqadd75040:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123456785) inexact rounded", 12398765432112345678945678.12345678, 12398765432112345678945678 + 0.123456785);
	AddTestCase("dqadd75041:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567850) inexact rounded", 12398765432112345678945678.12345678, 12398765432112345678945678 + 0.1234567850);
	AddTestCase("dqadd75042:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567851) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.1234567851);
	AddTestCase("dqadd75043:p9 r:HALF_EVEN (12398765432112345678945678 + 0.12345678501) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.12345678501);
	AddTestCase("dqadd75044:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123456785001) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.123456785001);
	AddTestCase("dqadd75045:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567850001) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.1234567850001);
	AddTestCase("dqadd75046:p9 r:HALF_EVEN (12398765432112345678945678 + 0.12345678500001) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.12345678500001);
	AddTestCase("dqadd75047:p9 r:HALF_EVEN (12398765432112345678945678 + 0.123456785000001) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.123456785000001);
	AddTestCase("dqadd75048:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567850000001) inexact rounded", 12398765432112345678945678.12345679, 12398765432112345678945678 + 0.1234567850000001);
	AddTestCase("dqadd75049:p9 r:HALF_EVEN (12398765432112345678945678 + 0.1234567850000000) inexact rounded", 12398765432112345678945678.12345678, 12398765432112345678945678 + 0.1234567850000000);
	//                               90123456
}
{
	use rounding HALF_EVEN;
	AddTestCase("dqadd75050:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0234567750000000) inexact rounded", 12398765432112345678945678.02345678, 12398765432112345678945678 + 0.0234567750000000);
	AddTestCase("dqadd75051:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0034567750000000) inexact rounded", 12398765432112345678945678.00345678, 12398765432112345678945678 + 0.0034567750000000);
	AddTestCase("dqadd75052:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0004567750000000) inexact rounded", 12398765432112345678945678.00045678, 12398765432112345678945678 + 0.0004567750000000);
	AddTestCase("dqadd75053:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000567750000000) inexact rounded", 12398765432112345678945678.00005678, 12398765432112345678945678 + 0.0000567750000000);
	AddTestCase("dqadd75054:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000067750000000) inexact rounded", 12398765432112345678945678.00000678, 12398765432112345678945678 + 0.0000067750000000);
	AddTestCase("dqadd75055:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000007750000000) inexact rounded", 12398765432112345678945678.00000078, 12398765432112345678945678 + 0.0000007750000000);
	AddTestCase("dqadd75056:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000000750000000) inexact rounded", 12398765432112345678945678.00000008, 12398765432112345678945678 + 0.0000000750000000);
	AddTestCase("dqadd75057:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000000050000000) inexact rounded", 12398765432112345678945678.00000000, 12398765432112345678945678 + 0.0000000050000000);
	AddTestCase("dqadd75060:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0234567750000001) inexact rounded", 12398765432112345678945678.02345678, 12398765432112345678945678 + 0.0234567750000001);
	AddTestCase("dqadd75061:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0034567750000001) inexact rounded", 12398765432112345678945678.00345678, 12398765432112345678945678 + 0.0034567750000001);
	AddTestCase("dqadd75062:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0004567750000001) inexact rounded", 12398765432112345678945678.00045678, 12398765432112345678945678 + 0.0004567750000001);
	AddTestCase("dqadd75063:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000567750000001) inexact rounded", 12398765432112345678945678.00005678, 12398765432112345678945678 + 0.0000567750000001);
	AddTestCase("dqadd75064:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000067750000001) inexact rounded", 12398765432112345678945678.00000678, 12398765432112345678945678 + 0.0000067750000001);
	AddTestCase("dqadd75065:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000007750000001) inexact rounded", 12398765432112345678945678.00000078, 12398765432112345678945678 + 0.0000007750000001);
	AddTestCase("dqadd75066:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000000750000001) inexact rounded", 12398765432112345678945678.00000008, 12398765432112345678945678 + 0.0000000750000001);
	AddTestCase("dqadd75067:p9 r:HALF_EVEN (12398765432112345678945678 + 0.0000000050000001) inexact rounded", 12398765432112345678945678.00000001, 12398765432112345678945678 + 0.0000000050000001);
	// far-out residues (full coefficient gap is 16+15 digits)
	// null tests
	}
}
test();

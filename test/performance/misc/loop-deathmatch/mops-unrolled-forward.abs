/* -*- mode: asm -*- */

/* ***** BEGIN LICENSE BLOCK *****
 * Version: MPL 1.1/GPL 2.0/LGPL 2.1
 *
 * The contents of this file are subject to the Mozilla Public License Version
 * 1.1 (the "License"); you may not use this file except in compliance with
 * the License. You may obtain a copy of the License at
 * http://www.mozilla.org/MPL/
 *
 * Software distributed under the License is distributed on an "AS IS" basis,
 * WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
 * for the specific language governing rights and limitations under the
 * License.
 *
 * The Original Code is [Open Source Virtual Machine.].
 *
 * The Initial Developer of the Original Code is
 * Adobe System Incorporated.
 * Portions created by the Initial Developer are Copyright (C) 2011
 * the Initial Developer. All Rights Reserved.
 *
 * Contributor(s):
 *   Adobe AS3 Team
 *
 * Alternatively, the contents of this file may be used under the terms of
 * either the GNU General Public License Version 2 or later (the "GPL"), or
 * the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 * in which case the provisions of the GPL or the LGPL are applicable instead
 * of those above. If you wish to allow use of your version of this file only
 * under the terms of either the GPL or the LGPL, and not to allow others to
 * use your version of this file under the terms of the MPL, indicate your
 * decision by deleting the provisions above and replace them with the notice
 * and other provisions required by the GPL or the LGPL. If you do not delete
 * the provisions above, a recipient may use your version of this file under
 * the terms of any one of the MPL, the GPL or the LGPL.
 *
 * ***** END LICENSE BLOCK ***** */

        // Forward int sum unrolled loop, 2048 elements

.script_info {
  init : .function_id(main)
  traits : {
    .trait { kind:Trait_Method method: .function_id(setup)  name: setup }
    .trait { kind:Trait_Method method: .function_id(loop)   name: loop }
  }
}
        
function main()
{
        finddef setup
        callproperty setup (0)
        pop
        
        // Time stamp - before
        finddef Date
        constructprop Date (0)
        setlocal1
        
        finddef loop
        callproperty loop (0)
        pop

        // Time stamp - after
        finddef print
        finddef Date
        constructprop Date (0)
        getlocal1
        subtract
        pushstring "ms    MOPS forward int sum unrolled loop, 2048 elements"
        add
        callpropvoid print (1)

        returnvoid
}

function setup()
{
        // Construct the memory
        finddef {flash.utils}::ByteArray
        constructprop {flash.utils}::ByteArray 0
        dup
        setlocal1
        pushint 8192
        setproperty length

        // Initialize the memory to all "1" values
        getlocal1
        pushstring "littleEndian"
        setproperty endian
        
        pushint 0
        setlocal2
L1:     label
        getlocal2
        pushint 2048
        ifeq L2
        getlocal1
        pushint 1
        callproperty writeInt (1)
        pop
        inclocal 2
        jump L1
L2:     label
        getlocal1
        pushint 0
        setproperty position

        // Install the memory
        finddef {avmplus}::Domain
        getproperty {avmplus}::Domain
        getproperty currentDomain
        getlocal1
        setproperty domainMemory

        returnvoid
}
        
function loop()
{
        // Outer iteration counter
        // Outer loop from 0 to 10000
        pushint 0
        setlocal2

L1:     label
        getlocal2
        pushint 10000
        ifeq L3

        getlocal2
        increment_i
        coerce_i
        setlocal2

        // Inner iteration counter
        // Inner loop from 0 to 8192 by steps of 4
        pushint 0
        setlocal1

        // Dummy sum
        pushint 0
        setlocal3
        
L2:     label
        getlocal1
        pushint 8192
        ifeq L1

        // Unroll: #1
        getlocal1
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #2
        getlocal1
        pushint 4
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #3
        getlocal1
        pushint 8
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #4
        getlocal1
        pushint 12
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #5
        getlocal1
        pushint 16
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #6
        getlocal1
        pushint 20
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #7
        getlocal1
        pushint 24
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        // Unroll: #8
        getlocal1
        pushint 28
        add
        coerce_i
        li32
        getlocal3
        add
        coerce_i
        setlocal3
        
        getlocal1
        pushint 32
        add
        coerce_i
        setlocal1

        jump L2

L3:     label

        // Just check the sum
        getlocal3
        pushint 2048
        ifeq L4
        pushstring "MOPS unrolled forward: Unexpected result: "
        getlocal3
        add
        throw

L4:     label
        returnvoid
}

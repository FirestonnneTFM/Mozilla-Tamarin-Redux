# -*- python -*-
# ex: set syntax=python:
#  ***** BEGIN LICENSE BLOCK *****
#  Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
#  The contents of this file are subject to the Mozilla Public License Version
#  1.1 (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#  http://www.mozilla.org/MPL/
# 
#  Software distributed under the License is distributed on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
#  for the specific language governing rights and limitations under the
#  License.
# 
#  The Original Code is [Open Source Virtual Machine.].
# 
#  The Initial Developer of the Original Code is
#  Adobe System Incorporated.
#  Portions created by the Initial Developer are Copyright (C) 2009
#  the Initial Developer. All Rights Reserved.
# 
#  Contributor(s):
#    Adobe AS3 Team
# 
#  Alternatively, the contents of this file may be used under the terms of
#  either the GNU General Public License Version 2 or later (the "GPL"), or
#  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
#  in which case the provisions of the GPL or the LGPL are applicable instead
#  of those above. If you wish to allow use of your version of this file only
#  under the terms of either the GPL or the LGPL, and not to allow others to
#  use your version of this file under the terms of the MPL, indicate your
#  decision by deleting the provisions above and replace them with the notice
#  and other provisions required by the GPL or the LGPL. If you do not delete
#  the provisions above, a recipient may use your version of this file under
#  the terms of any one of the MPL, the GPL or the LGPL.
# 
#  ***** END LICENSE BLOCK ****

MASTER_IP   = "10.171.22.12"
SLAVEPORT   = 1000
WEBPORT_PUB = 8750
WEBPORT_INT = 8760


BRANCH      = "tamarin-redux"
HG_URL      = "http://hg.mozilla.org/tamarin-redux/"

c = BuildmasterConfig = {}

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave
c['slaves'] = [BuildSlave("asteamwin2", "asteam"),
               BuildSlave("asteamwin3", "asteam"),
               BuildSlave("asteamwin11", "asteam"),
               BuildSlave("asteamwin11-sb", "asteam"),

               BuildSlave("asteammac1", "asteam"),
               BuildSlave("asteammac1-64bit", "asteam"),
               BuildSlave("asteammac4", "asteam"),
               BuildSlave("asteammac6", "asteam"),
               BuildSlave("asteammac9", "asteam"),
               BuildSlave("asteammac10", "asteam"),
               BuildSlave("tamarin-xserve", "asteam"),
               BuildSlave("tamarin-xserve2", "asteam"),
            
               BuildSlave("asteammac5-64bit", "asteam"),

               BuildSlave("asteamlin1", "asteam"),
               BuildSlave("asteamlin5", "asteam"),

               BuildSlave("asteamsol4", "asteam"),
               BuildSlave("asteamsol1", "asteam"),

               BuildSlave("asteamwin1", "asteam"),
               BuildSlave("asteammac2", "asteam"),
               BuildSlave("asteammac7", "asteam"),
               BuildSlave("asteammac3", "asteam"),
               BuildSlave("asteamlin4", "asteam"),
               BuildSlave("asteamwin5", "asteam"),
               BuildSlave("asteamlin9", "asteam"),

               BuildSlave("asteamwin10", "asteam"),
               BuildSlave("asteamwin12", "asteam"),
               BuildSlave("asteamwin13", "asteam"),

               BuildSlave("asteamwin19", "asteam"),
               BuildSlave("asteamwin20", "asteam"),
              ]

c['slavePortnum'] = SLAVEPORT


####### CHANGESOURCES
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()

####### Utility Functions for ignoring certain file types
def startPerformanceRun(change):
    for name in change.files:
        if name.endswith(('.cpp','.h','.py','asm','.as')):
            return True
        elif name.endswith('.abc'):
            # Only run if abc is not in esc dir
            if '/esc/' not in name:
                return True
    return False
    
def startCompile(change):
    '''Determine whether we want to start a compile pass based on the files that
        have changed.  Only skip compile if ALL changes are in the ignore criteria.
    '''
    compile = True
    for name in change.files:
        # ignore all changes to buildbot master files
        if '/buildbot/master/' in name:
            compile = False
        # ignore changes to the runsmokes*.txt files
        elif ('runsmokes' in name) and name.endswith('.txt'):
            compile = False
        else:
            return True
    return compile

####### SCHEDULERS
from buildbot.scheduler import *
# custom.buildbot_ext.scheduler import MUST happen after importing buildbot.scheduler
from custom.buildbot_ext.scheduler import *

compile = Scheduler(name="compile", branch=BRANCH, treeStableTimer=30, fileIsImportant=startCompile,
                 builderNames=["windows-compile", "windows64-compile",
                               "mac-intel-10.4-compile", "mac-intel-10.5-compile", "mac64-intel-compile",
                               "mac-ppc-10.4a-compile", "mac-ppc-10.4b-compile", 
                               "mac-ppc-10.5a-compile", "mac-ppc-10.5b-compile", 
                               "mac64-ppc-compile",
                               "linux-compile", "linux64-compile",
                               "winmobile-emulator-compile",
                               "solaris-sparc-compile"])

smoke = BuilderDependent(name="smoke",upstream=compile, callbackInterval=60,
                builderNames=["windows-smoke", "windows64-smoke",
                               "mac-intel-10.4-smoke", "mac-intel-10.5-smoke", "mac64-intel-smoke",
                               "mac-ppc-10.4a-smoke", "mac-ppc-10.4b-smoke", 
                               "mac-ppc-10.5a-smoke", "mac-ppc-10.5b-smoke", 
                               "mac64-ppc-smoke",
                               "linux-smoke", "linux64-smoke",
                               "winmobile-emulator-smoke",
                               "solaris-sparc-smoke"],
                builderDependencies=[
                              ["windows-smoke", "windows-compile"], 
                              ["windows64-smoke", "windows64-compile"], 
                              ["mac-intel-10.4-smoke", "mac-intel-10.4-compile"], 
                              ["mac-intel-10.5-smoke", "mac-intel-10.5-compile"],
                              ["mac64-intel-smoke", "mac64-intel-compile"],
                              ["mac-ppc-10.4a-smoke", "mac-intel-10.4-compile"],
                              ["mac-ppc-10.4b-smoke", "mac-intel-10.4-compile"],
                              ["mac-ppc-10.5a-smoke", "mac-intel-10.5-compile"],
                              ["mac-ppc-10.5b-smoke", "mac-intel-10.5-compile"],
                              ["mac64-ppc-smoke", "mac64-intel-compile"],
                              ["linux-smoke", "linux-compile"],
                              ["linux64-smoke", "linux64-compile"],
                              ["winmobile-emulator-smoke", "winmobile-emulator-compile"],
                              ["solaris-sparc-smoke", "solaris-sparc-compile"],
                             ])

test = BuilderDependent(name="test",upstream=smoke, callbackInterval=60,
                builderNames=["windows-test", "windows64-test",
                               "mac-intel-10.4-test", "mac-intel-10.5-test", "mac64-intel-test",
                               "mac-ppc-10.4a-test", "mac-ppc-10.4b-test", 
                               "mac-ppc-10.5a-test", "mac-ppc-10.5b-test", 
                               "mac64-ppc-test",
                               "linux-test", "linux64-test",
                               "winmobile-emulator-test",
                               "solaris-sparc-test"],
                builderDependencies=[
                              ["windows-test", "windows-smoke"], 
                              ["windows64-test", "windows64-smoke"], 
                              ["mac-intel-10.4-test", "mac-intel-10.4-smoke"], 
                              ["mac-intel-10.5-test", "mac-intel-10.5-smoke"],
                              ["mac64-intel-test", "mac64-intel-smoke"],
                              ["mac-ppc-10.4a-test", "mac-ppc-10.4a-smoke"],
                              ["mac-ppc-10.4b-test", "mac-ppc-10.4b-smoke"],
                              ["mac-ppc-10.5a-test", "mac-ppc-10.5a-smoke"],
                              ["mac-ppc-10.5b-test", "mac-ppc-10.5b-smoke"],
                              ["mac64-ppc-test", "mac64-ppc-smoke"],
                              ["linux-test", "linux-smoke"],
                              ["linux64-test", "linux64-smoke"],
                              ["winmobile-emulator-test", "winmobile-emulator-smoke"],
                              ["solaris-sparc-test", "solaris-sparc-smoke"],
                             ])

performance = BuilderDependent(name="performance",upstream=test, callbackInterval=60, fileIsImportant=startPerformanceRun,
                builderNames=["windows-performance",
                               "mac-performance", "mac64-performance",
                               "mac-ppc-performance",
                               "linux-performance",
                               "winmobile-performance"],
                builderDependencies=[
                              ["windows-performance", "windows-test"], 
                              ["mac-performance", "mac-intel-10.5-test"],
                              ["mac64-performance", "mac64-intel-test"],
                              ["mac-ppc-performance", "mac-ppc-10.5a-test"],
                              ["linux-performance", "linux-test"],
                              ["winmobile-performance", "winmobile-emulator-test"]
                             ])

deep = BuilderDependent(name="deep",upstream=test, callbackInterval=60, fileIsImportant=startCompile,
                builderNames=[
                                "windows-deep",
                                "windows-p3-deep",
                                "windows-frr",
                                "mac-ppc-deep",
                                "solaris-sparc-deep",
                                "windows64-deep",
                                "linux-deep",
                                "winmobile-emulator-deep",
                             ],
                builderDependencies=[
                              ["linux-deep", "linux-test"],
                              ["windows-deep", "windows-test"],
                              ["windows-p3-deep", "windows-test"],
                              ["windows-frr", "windows-test"], 
                              ["mac-ppc-deep", "mac-ppc-10.5a-test"], 
                              ["solaris-sparc-deep", "solaris-sparc-test"], 
                              ["windows64-deep", "windows64-test"], 
                              ["winmobile-emulator-deep", "winmobile-emulator-test"],
                             ])

#### SANDBOX
compile_sandbox = Scheduler(name="compile-sandbox", branch="sandbox", treeStableTimer=30,
                 builderNames=["windows-compile-sandbox", "windows64-compile-sandbox",
                               "mac-intel-10.4-compile-sandbox", "mac-intel-10.5-compile-sandbox", "mac64-intel-compile-sandbox",
                               "mac-ppc-10.4a-compile-sandbox", "mac-ppc-10.4b-compile-sandbox", 
                               "mac-ppc-10.5a-compile-sandbox", "mac-ppc-10.5b-compile-sandbox", 
                               "mac64-ppc-compile-sandbox",
                               "linux-compile-sandbox", "linux64-compile-sandbox",
                               "winmobile-emulator-compile-sandbox",
                               "solaris-sparc-compile-sandbox",
                               ])

smoke_sandbox = BuilderDependent(name="smoke-sandbox",upstream=compile_sandbox, callbackInterval=60,
                builderNames=["windows-smoke-sandbox", "windows64-smoke-sandbox",
                               "mac-intel-10.4-smoke-sandbox", "mac-intel-10.5-smoke-sandbox", "mac64-intel-smoke-sandbox",
                               "mac-ppc-10.4a-smoke-sandbox", "mac-ppc-10.4b-smoke-sandbox", 
                               "mac-ppc-10.5a-smoke-sandbox", "mac-ppc-10.5b-smoke-sandbox", 
                               "mac64-ppc-smoke-sandbox",
                               "linux-smoke-sandbox", "linux64-smoke-sandbox",
                               "winmobile-emulator-smoke-sandbox",
                               "solaris-sparc-smoke-sandbox"],
                builderDependencies=[
                              ["windows-smoke-sandbox", "windows-compile-sandbox"], 
                              ["windows64-smoke-sandbox", "windows64-compile-sandbox"], 
                              ["mac-intel-10.4-smoke-sandbox", "mac-intel-10.4-compile-sandbox"], 
                              ["mac-intel-10.5-smoke-sandbox", "mac-intel-10.5-compile-sandbox"],
                              ["mac64-intel-smoke-sandbox", "mac64-intel-compile-sandbox"],
                              ["mac-ppc-10.4a-smoke-sandbox", "mac-intel-10.4-compile-sandbox"],
                              ["mac-ppc-10.4b-smoke-sandbox", "mac-intel-10.4-compile-sandbox"],
                              ["mac-ppc-10.5a-smoke-sandbox", "mac-intel-10.5-compile-sandbox"],
                              ["mac-ppc-10.5b-smoke-sandbox", "mac-intel-10.5-compile-sandbox"],
                              ["mac64-ppc-smoke-sandbox", "mac64-intel-compile-sandbox"],
                              ["linux-smoke-sandbox", "linux-compile-sandbox"],
                              ["linux64-smoke-sandbox", "linux64-compile-sandbox"],
                              ["winmobile-emulator-smoke-sandbox", "winmobile-emulator-compile-sandbox"],
                              ["solaris-sparc-smoke-sandbox", "solaris-sparc-compile-sandbox"],
                             ])

test_sandbox = BuilderDependent(name="test-sandbox",upstream=smoke_sandbox, callbackInterval=60,
                builderNames=["windows-test-sandbox", "windows64-test-sandbox",
                               "mac-intel-10.4-test-sandbox", "mac-intel-10.5-test-sandbox", "mac64-intel-test-sandbox",
                               "mac-ppc-10.4a-test-sandbox", "mac-ppc-10.4b-test-sandbox", 
                               "mac-ppc-10.5a-test-sandbox", "mac-ppc-10.5b-test-sandbox", 
                               "mac64-ppc-test-sandbox",
                               "linux-test-sandbox", "linux64-test-sandbox",
                               "winmobile-emulator-test-sandbox",
                               "solaris-sparc-test-sandbox"],
                builderDependencies=[
                              ["windows-test-sandbox", "windows-smoke-sandbox"], 
                              ["windows64-test-sandbox", "windows64-smoke-sandbox"], 
                              ["mac-intel-10.4-test-sandbox", "mac-intel-10.4-smoke-sandbox"], 
                              ["mac-intel-10.5-test-sandbox", "mac-intel-10.5-smoke-sandbox"],
                              ["mac64-intel-test-sandbox", "mac64-intel-smoke-sandbox"],
                              ["mac-ppc-10.4a-test-sandbox", "mac-ppc-10.4a-smoke-sandbox"],
                              ["mac-ppc-10.4b-test-sandbox", "mac-ppc-10.4b-smoke-sandbox"],
                              ["mac-ppc-10.5a-test-sandbox", "mac-ppc-10.5a-smoke-sandbox"],
                              ["mac-ppc-10.5b-test-sandbox", "mac-ppc-10.5b-smoke-sandbox"],
                              ["mac64-ppc-test-sandbox", "mac64-ppc-smoke-sandbox"],
                              ["linux-test-sandbox", "linux-smoke-sandbox"],
                              ["linux64-test-sandbox", "linux64-smoke-sandbox"],
                              ["winmobile-emulator-test-sandbox", "winmobile-emulator-smoke-sandbox"],
                              ["solaris-sparc-test-sandbox", "solaris-sparc-smoke-sandbox"],
                             ])

c['schedulers'] = [compile, smoke, test, performance, deep, compile_sandbox, smoke_sandbox, test_sandbox]




from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import *
from custom.buildbot_ext.steps.shellAddons import *
from buildbot.steps.trigger import Trigger

############################
####### COMMON BUILD STEPS
############################
sync_clean = ShellCommand(
            command=["rm", "-Rf", BRANCH],
            description='Remove the old repository...',
            descriptionDone='Finished Removing the old repository',
            name='Source_Clean',
            workdir="../",
            haltOnFailure="True")

sync_clone = ShellCommand(
            command=["hg", "clone", HG_URL, BRANCH],
            description='Cloning the source repository...',
            descriptionDone='Finished cloning the source repository',
            name='Source_Clone',
            workdir="../",
            haltOnFailure="True")

sync_clone_sandbox = SandboxClone(
            dest="tamarin-redux",
            changeDir="changes/processed",
            description='Cloning the source repository...',
            descriptionDone='Finished cloning the source repository',
            name='Source_Clone',
            workdir="../",
            haltOnFailure="True")

sync_update = ShellCommand(
            command=["hg", "update", "--clean",  "--rev", WithProperties('%s','revision')],
            description='Updating the source repository...',
            descriptionDone='Finished updating the source repository',
            name='Source_Update',
            workdir="../"+BRANCH,
            haltOnFailure="True")

bb_lockacquire = BuildShellCommand(
            command=['../all/lock-acquire.sh', WithProperties('%s','revision')],
            description='Acquiring machine lock...',
            descriptionDone='Acquired machine lock...',
            name="LockAcquire",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

bb_lockrelease = BuildShellCommand(
            command=['../all/lock-release.sh', WithProperties('%s','revision')],
            description='Releasing machine lock...',
            descriptionDone='Released machine lock...',
            name="LockRelease",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_builtin = BuildShellCommand(
            command=['../all/build-builtinabc.sh', WithProperties('%s','revision')],
            description='starting to build builtin.abc..',
            descriptionDone='builtin.abc build',
            name="Compile_builtin.abc",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_release = BuildShellCommand(
            command=['../all/build-release.sh', WithProperties('%s','revision')],
            description='starting release build...',
            descriptionDone='finished release build.',
            name="Build_Release",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_release_local = BuildShellCommand(
            command=['./build-release.sh', WithProperties('%s','revision')],
            description='starting release build...',
            descriptionDone='finished release build.',
            name='Build_Release',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_release_ppc_local = BuildShellCommand(
            command=['./build-release-ppc.sh', WithProperties('%s','revision')],
            description='starting release ppc build...',
            descriptionDone='finished release ppc build.',
            name='Build_Release_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_release_wordcode = BuildShellCommand(
            command=['../all/build-release-wordcode.sh', WithProperties('%s','revision')],
            description='starting release-wordcode build...',
            descriptionDone='finished release-wordcode build.',
            name="Build_Release-wordcode",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_release_wordcode_local = BuildShellCommand(
            command=['./build-release-wordcode.sh', WithProperties('%s','revision')],
            description='starting release-wordcode build...',
            descriptionDone='finished release-wordcode build.',
            name='Build_Release-wordcode',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_release_wordcode_ppc_local = BuildShellCommand(
            command=['./build-release-wordcode-ppc.sh', WithProperties('%s','revision')],
            description='starting release-wordcode ppc build...',
            descriptionDone='finished release-wordcode ppc build.',
            name='Build_Release-wordcode_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_release_api = BuildShellCommand(
            command=['../all/compile-generic.sh', WithProperties('%s','revision'), '--enable-shell --enable-api-versioning', 'avmshell_api'],
            description='starting release-api build...',
            descriptionDone='finished release-api build.',
            name="Build_Release-api",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )

compile_debug = BuildShellCommand(
            command=['../all/build-debug.sh', WithProperties('%s','revision')],
            description='starting debug build...',
            descriptionDone='finished debug build.',
            name="Build_Debug",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_debug_local = BuildShellCommand(
            command=['./build-debug.sh', WithProperties('%s','revision')],
            description='starting debug build...',
            descriptionDone='finished debug build.',
            name='Build_Debug',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_debug_ppc_local = BuildShellCommand(
            command=['./build-debug-ppc.sh', WithProperties('%s','revision')],
            description='starting debug ppc build...',
            descriptionDone='finished debug ppc build.',
            name='Build_Debug_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_release_debugger = BuildShellCommand(
            command=['../all/build-release-debugger.sh', WithProperties('%s','revision')],
            description='starting release-debugger build...',
            descriptionDone='finished release-debugger build.',
            name="Build_Release_Debugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_release_debugger_local = BuildShellCommand(
            command=['./build-release-debugger.sh', WithProperties('%s','revision')],
            description='starting release-debugger build...',
            descriptionDone='finished release-debugger build.',
            name='Build_ReleaseDebugger',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_release_debugger_ppc_local = BuildShellCommand(
            command=['./build-release-debugger-ppc.sh', WithProperties('%s','revision')],
            description='starting release-debugger ppc build...',
            descriptionDone='finished release-debugger ppc build.',
            name='Build_ReleaseDebugger_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_debug_debugger = BuildShellCommand(
            command=['../all/build-debug-debugger.sh', WithProperties('%s','revision')],
            description='starting debug-debugger build...',
            descriptionDone='finished debug-debugger build.',
            name="Build_DebugDebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_debug_debugger_local = BuildShellCommand(
            command=['./build-debug-debugger.sh', WithProperties('%s','revision')],
            description='starting debug-debugger build...',
            descriptionDone='finished debug-debugger build.',
            name='Build_DebugDebugger',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_debug_debugger_ppc_local = BuildShellCommand(
            command=['./build-debug-debugger-ppc.sh', WithProperties('%s','revision')],
            description='starting debug-debugger ppc build...',
            descriptionDone='finished debug-debugger ppc build.',
            name='Build_DebugDebugger_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_release_vprof = BuildShellCommand(
            command=['../all/build-release-vprof.sh', WithProperties('%s','revision')],
            description='starting release-vprof build...',
            descriptionDone='finished release-vprof build.',
            name="Build_Release_vprof",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_release_vprof_local = BuildShellCommand(
            command=['./build-release-vprof.sh', WithProperties('%s','revision')],
            description='starting release-vprof build...',
            descriptionDone='finished release-vprof build.',
            name='Build_Release_vprof',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_selftest = BuildShellCommand(
            command=['../all/build-selftest.sh', WithProperties('%s','revision')],
            description='starting selftest build...',
            descriptionDone='finished selftest build.',
            name='Build_Selftest',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_selftest_local = BuildShellCommand(
            command=['./build-selftest.sh', WithProperties('%s','revision')],
            description='starting selftest build...',
            descriptionDone='finished selftest build.',
            name='Build_Selftest',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version to compile PPC on intel
compile_selftest_ppc_local = BuildShellCommand(
            command=['./build-selftest-ppc.sh', WithProperties('%s','revision')],
            description='starting selftest ppc build...',
            descriptionDone='finished selftest ppc build.',
            name='Build_Selftest_PPC',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_buildcheck = BuildShellCheckCommand(
            command=['../all/build-check.sh', WithProperties('%s','revision')],
            description='starting build check...',
            descriptionDone='build check completed',
            name='Build_Check',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
compile_buildcheck_local = BuildShellCheckCommand(
            command=['./build-check.sh', WithProperties('%s','revision')],
            description='starting build check...',
            descriptionDone='build check completed',
            name='Build_Check',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

compile_testmedia = BuildShellCommand(
            command=['../all/build-acceptance-tests.sh', WithProperties('%s','revision')],
            description='starting to build test abcs...',
            descriptionDone='vm test abcs built.',
            name="Compile_AS_testcases",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

download_testmedia = BuildShellCommand(
            command=['../all/download-acceptance-tests.sh', WithProperties('%s','revision')],
            description='starting to downloads test abcs...',
            descriptionDone='vm test abcs downloaded.',
            name="Download_AS_testcases",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH,
            haltOnFailure="True" )

test_smoke = TestSuiteShellCommand(
            command=['../all/run-smoketests.sh', WithProperties('%s','revision')],
            description='starting to run smoke tests...',
            descriptionDone='finished smoke tests.',
            name="SmokeTest",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_smoke_mobile = TestSuiteShellCommand(
            command=['../all/run-smoketests-arm.sh', WithProperties('%s','revision')],
            description='starting to run smoke tests...',
            descriptionDone='finished smoke tests.',
            name="SmokeTest",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_smoke_mobile = TestSuiteShellCommand(
            command=['../all/run-smoketests-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run smoke tests...',
            descriptionDone='finished smoke tests.',
            name="SmokeTest",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release = TestSuiteShellCommand(
            command=['../all/run-acceptance-release.sh', WithProperties('%s','revision')],
            description='starting to run release vmtests...',
            descriptionDone='finished release vmtests.',
            name="Testsuite_Release",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-arm.sh', WithProperties('%s','revision')],
            description='starting to run release vmtests...',
            descriptionDone='finished release vmtests.',
            name="Testsuite_Release",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run release vmtests...',
            descriptionDone='finished release vmtests.',
            name="Testsuite_Release",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_mobile_local = TestSuiteShellCommand(
            command=['./run-acceptance-release-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run release vmtests...',
            descriptionDone='finished release vmtests.',
            name="Testsuite_Release",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_interp = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp.sh', WithProperties('%s','revision')],
            description='starting to run -interp release vmtests...',
            descriptionDone='finished -interp release vmtests.',
            name="Testsuite_Release-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_interp_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp-arm.sh', WithProperties('%s','revision')],
            description='starting to run -interp release vmtests...',
            descriptionDone='finished -interp release vmtests.',
            name="Testsuite_Release-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_interp_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run -interp release vmtests...',
            descriptionDone='finished -interp release vmtests.',
            name="Testsuite_Release-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_interp_mobile_local = TestSuiteShellCommand(
            command=['./run-acceptance-release-interp-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run -interp release vmtests...',
            descriptionDone='finished -interp release vmtests.',
            name="Testsuite_Release-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_interp_wordcode = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp-wc.sh', WithProperties('%s','revision')],
            description='starting to run -interp release-wordcode vmtests...',
            descriptionDone='finished -interp release-wordcode vmtests.',
            name="Testsuite_Release-wordcode-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_interp_wordcode_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp-wc-arm.sh', WithProperties('%s','revision')],
            description='starting to run -interp release-wordcode vmtests...',
            descriptionDone='finished -interp release-wordcode vmtests.',
            name="Testsuite_Release-wordcode-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_interp_wordcode_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-interp-wc-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run -interp release-wordcode vmtests...',
            descriptionDone='finished -interp release-wordcode vmtests.',
            name="Testsuite_Release-wordcode-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_interp_wordcode_mobile_local = TestSuiteShellCommand(
            command=['./run-acceptance-release-interp-wc-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting to run -interp release-wordcode vmtests...',
            descriptionDone='finished -interp release-wordcode vmtests.',
            name="Testsuite_Release-wordcode-interp",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_jit = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-jit.sh', WithProperties('%s','revision')],
            description='starting vm tests with force jit release...',
            descriptionDone='finished vm tests with force jit release.',
            name="Testsuite_Release-jit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_jit_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-jit-arm.sh', WithProperties('%s','revision')],
            description='starting vm tests with force jit release...',
            descriptionDone='finished vm tests with force jit release.',
            name="Testsuite_Release-jit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_jit_mobile = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-jit-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting vm tests with force jit release...',
            descriptionDone='finished vm tests with force jit release.',
            name="Testsuite_Release-jit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_emulator_release_jit_mobile_local = TestSuiteShellCommand(
            command=['./run-acceptance-release-jit-arm-emulator.sh', WithProperties('%s','revision')],
            description='starting vm tests with force jit release...',
            descriptionDone='finished vm tests with force jit release.',
            name="Testsuite_Release-jit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_debugger = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-debugger.sh', WithProperties('%s','revision')],
            description='starting to run release-debugger vmtests...',
            descriptionDone='finished release-debugger vmtests.',
            name="Testsuite_ReleaseDebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_release_debugger_nodebugger = TestSuiteShellCommand(
            command=['../all/run-acceptance-release-debugger-nodebugger.sh', WithProperties('%s','revision')],
            description='starting to run release-debugger -Dnodebugger vmtests...',
            descriptionDone='finished release-debugger -Dnodebugger vmtests.',
            name="Testsuite_ReleaseDebugger-nodebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_debug = TestSuiteShellCommand(
            command=['./run-acceptance-debug.sh', WithProperties('%s','revision')],
            description='starting to run debug vmtests...',
            descriptionDone='finished debug vmtests.',
            name="Testsuite_Debug",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_debug64 = TestSuiteShellCommand(
            command=['./run-acceptance-debug64.sh', WithProperties('%s','revision')],
            description='starting to run debug64 vmtests...',
            descriptionDone='finished debug64 vmtests.',
            name="Testsuite_Debug",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_debug_debugger = TestSuiteShellCommand(
            command=['./run-acceptance-debug-debugger.sh', WithProperties('%s','revision')],
            description='starting to run debug-debugger vmtests...',
            descriptionDone='finished debug-debugger vmtests.',
            name="Testsuite_DebugDebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_debug_debugger_nodebugger = TestSuiteShellCommand(
            command=['./run-acceptance-debug-debugger-nodebugger.sh', WithProperties('%s','revision')],
            description='starting to run debug-debugger nodebugger vmtests...',
            descriptionDone='finished debug-debugger nodebugger vmtests.',
            name="Testsuite_DebugDebuggerNoDebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_debug_debugger64 = TestSuiteShellCommand(
            command=['./run-acceptance-debug-debugger64.sh', WithProperties('%s','revision')],
            description='starting to run debug-debugger64 vmtests...',
            descriptionDone='finished debug-debugger64 vmtests.',
            name="Testsuite_DebugDebugger",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_selftest = TestSuiteShellCommand(
            command=['../all/run-selftest.sh', WithProperties('%s','revision')],
            description='starting selftest release...',
            descriptionDone='finished selftest release.',
            name="Testsuite_Selftest",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_commandline = TestSuiteShellCommand(
            command=['../all/run-commandline-tests.sh', WithProperties('%s','revision')],
            description='starting commandline tests...',
            descriptionDone='finished commandline tests.',
            name="Testsuite_Commandline",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_differential = TestSuiteShellCommand(
            command=['../all/run-acceptance-avmdiff.sh', WithProperties('%s','revision')],
            description='starting vm acceptance differential testing...',
            descriptionDone='finished vm acceptance differential testing.',
            name="Testsuite_Differential",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_misc = TestSuiteShellCommand(
            command=['../all/run-misc-tests.sh', WithProperties('%s','revision')],
            description='starting to run misc tests...',
            descriptionDone='finished misc tests.',
            name="MiscTest",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

test_api_versioning = TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell_api', '', '', 'versioning/'],
            description='starting to run release-api vmtests...',
            descriptionDone='finished release-api vmtests.',
            name="Testsuite_Release-api",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )

test_Dgreedy = TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell', '-Dgreedy', '','--timeout=180 --random'],
            description='starting to run release -Dgreedy vmtests...',
            descriptionDone='finished release -Dgreedy vmtests.',
            name="Testsuite_Release-Dgreedy",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )

util_upload_asteam = BuildShellCheckCommand(
            command=['../all/upload-asteam.sh', WithProperties('%s','revision')],
            description='Upload bits to ASTEAM...',
            descriptionDone='Upload to ASTEAM completed',
            name='Upload_ASTEAM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
util_upload_asteam_local = BuildShellCheckCommand(
            command=['./upload-asteam.sh', WithProperties('%s','revision')],
            description='Upload bits to ASTEAM...',
            descriptionDone='Upload to ASTEAM completed',
            name='Upload_ASTEAM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

util_upload_mozilla = BuildShellCheckCommand(
            command=['../all/upload-mozilla.sh', WithProperties('%s','revision')],
            description='Upload bits to MOZILLA...',
            descriptionDone='Upload to MOZILLA completed',
            name='Upload_MOZILLA',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

## Local version runs a local script and not the common
util_upload_mozilla_local = BuildShellCheckCommand(
            command=['./upload-mozilla.sh', WithProperties('%s','revision')],
            description='Upload bits to MOZILLA...',
            descriptionDone='Upload to MOZILLA completed',
            name='Upload_MOZILLA',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

util_process_clean = BuildShellCommand(
            command=['../all/util-process-clean.sh', WithProperties('%s','revision')],
            description='Zombie hunting...',
            descriptionDone='Zombie hunt completed',
            name='Util_ZombieKiller',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH,
            alwaysRun="True" )



perf_prepare = BuildShellCommand(
            command=['./prepare.sh', WithProperties('%s','revision')],
            description='Preparing for performance run...',
            descriptionDone='Preparation complete...',
            name="Preparation",
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release = PerfShellCommand(
            command=['../all/run-performance-release.sh', WithProperties('%s','revision')],
            description='starting release performance tests...',
            descriptionDone='finished release performance tests.',
            name='Release',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_arm = PerfShellCommand(
            command=['../all/run-performance-release-arm.sh', WithProperties('%s','revision')],
            description='starting release performance tests...',
            descriptionDone='finished release performance tests.',
            name='Release',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_interp = PerfShellCommand(
            command=['../all/run-performance-release-interp.sh', WithProperties('%s','revision')],
            description='starting release-interp performance tests...',
            descriptionDone='finished release-interp performance tests.',
            name='ReleaseInterp',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_arm_interp = PerfShellCommand(
            command=['../all/run-performance-release-arm-interp.sh', WithProperties('%s','revision')],
            description='starting release-interp performance tests...',
            descriptionDone='finished release-interp performance tests.',
            name='ReleaseInterp',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_jit = PerfShellCommand(
            command=['../all/run-performance-release-jit.sh', WithProperties('%s','revision')],
            description='starting release-jit performance tests...',
            descriptionDone='finished release-jit performance tests.',
            name='ReleaseJIT',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_arm_jit = PerfShellCommand(
            command=['../all/run-performance-release-arm-jit.sh', WithProperties('%s','revision')],
            description='starting release-jit performance tests...',
            descriptionDone='finished release-jit performance tests.',
            name='ReleaseJIT',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

perf_release_vprof = PerfShellCommand(
            command=['../all/run-performance-release-vprof.sh', WithProperties('%s','revision')],
            description='starting release-vprof performance tests...',
            descriptionDone='finished release-vprof performance tests.',
            name='Release-vprof',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )


deep_codecoverage = BuildShellCommand(
            command=['./run-code-coverage.sh', WithProperties('%s','revision')],
            description='starting code coverage...',
            descriptionDone='finished code coverage',
            name='CodeCoverage',
            timeout=3600,
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

deep_release_esc = BuildShellCommand(
            command=['../all/run-release-esc.sh', WithProperties('%s','revision')],
            description='starting release-esc tests...',
            descriptionDone='finished release-esc tests.',
            name='Release-esc',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )

####### BUILDERS
builders = []


################################################################################
################################################################################
####                                                                        ####
####                          COMPILE BUILDERS                              ####
####                                                                        ####
################################################################################
################################################################################

#####################################
#### builder for windows-compile ####
#####################################
windows_compile_factory = factory.BuildFactory()
windows_compile_factory.addStep(sync_clean)
windows_compile_factory.addStep(sync_clone)
windows_compile_factory.addStep(sync_update)
windows_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows_compile_factory.addStep(compile_builtin)
windows_compile_factory.addStep(compile_release)
windows_compile_factory.addStep(compile_release_wordcode)
windows_compile_factory.addStep(compile_debug)
windows_compile_factory.addStep(compile_release_debugger)
windows_compile_factory.addStep(compile_debug_debugger)
windows_compile_factory.addStep(compile_release_vprof)
windows_compile_factory.addStep(compile_selftest)
windows_compile_factory.addStep(BuildShellCommand(
            command=['../all/file-check.py', '../../../../../%s' % BRANCH],
            description='running file-check against source...',
            descriptionDone='finished file-check.',
            name="FileCheck",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
windows_compile_factory.addStep(compile_buildcheck)
windows_compile_factory.addStep(util_upload_asteam)
windows_compile_factory.addStep(util_upload_mozilla)
windows_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-sizereport.sh',WithProperties('%s','revision')],
            description='starting win release-sizereport build...',
            descriptionDone='finished win release-sizereport build.',
            name='Build_Release_sizereport',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)

windows_compile_builder = {
            'name': "windows-compile",
            'slavename': "asteamwin2",
            'factory': windows_compile_factory,
            'builddir': './windows-compile',
}




#######################################
#### builder for windows64-compile ####
#######################################
windows64_compile_factory = factory.BuildFactory()
windows64_compile_factory.addStep(sync_clean)
windows64_compile_factory.addStep(sync_clone)
windows64_compile_factory.addStep(sync_update)
windows64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows64/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows64_compile_factory.addStep(compile_builtin)
windows64_compile_factory.addStep(compile_release_local)
windows64_compile_factory.addStep(compile_debug_local)
windows64_compile_factory.addStep(compile_release_debugger_local)
windows64_compile_factory.addStep(compile_debug_debugger_local)
windows64_compile_factory.addStep(compile_buildcheck_local)
windows64_compile_factory.addStep(util_upload_asteam_local)
windows64_compile_factory.addStep(util_upload_mozilla_local)

windows64_compile_builder = {
            'name': "windows64-compile",
            'slavename': "asteamwin3",
            'factory': windows64_compile_factory,
            'builddir': './windows64-compile',
}


############################################
#### builder for mac-intel-10_4-compile ####
############################################
mac_intel_104_compile_factory = factory.BuildFactory()
mac_intel_104_compile_factory.addStep(sync_clean)
mac_intel_104_compile_factory.addStep(sync_clone)
mac_intel_104_compile_factory.addStep(sync_update)
mac_intel_104_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-intel-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_intel_104_compile_factory.addStep(compile_builtin)
mac_intel_104_compile_factory.addStep(compile_release)
mac_intel_104_compile_factory.addStep(compile_release_wordcode)
mac_intel_104_compile_factory.addStep(compile_debug)
mac_intel_104_compile_factory.addStep(compile_release_debugger)
mac_intel_104_compile_factory.addStep(compile_debug_debugger)
mac_intel_104_compile_factory.addStep(compile_release_vprof)
mac_intel_104_compile_factory.addStep(compile_selftest)
mac_intel_104_compile_factory.addStep(compile_release_ppc_local)
mac_intel_104_compile_factory.addStep(compile_release_wordcode_ppc_local)
mac_intel_104_compile_factory.addStep(compile_debug_ppc_local)
mac_intel_104_compile_factory.addStep(compile_release_debugger_ppc_local)
mac_intel_104_compile_factory.addStep(compile_debug_debugger_ppc_local)
mac_intel_104_compile_factory.addStep(compile_selftest_ppc_local)
mac_intel_104_compile_factory.addStep(compile_buildcheck_local)
mac_intel_104_compile_factory.addStep(util_upload_asteam_local)
mac_intel_104_compile_factory.addStep(util_upload_mozilla_local)

mac_intel_104_compile_builder = {
            'name': "mac-intel-10.4-compile",
            'slavename': "asteammac4",
            'factory': mac_intel_104_compile_factory,
            'builddir': './mac-intel-10_4-compile',
}



############################################
#### builder for mac-intel-10_5-compile ####
############################################
mac_intel_105_compile_factory = factory.BuildFactory()
mac_intel_105_compile_factory.addStep(sync_clean)
mac_intel_105_compile_factory.addStep(sync_clone)
mac_intel_105_compile_factory.addStep(sync_update)
mac_intel_105_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-intel-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_intel_105_compile_factory.addStep(compile_builtin)
mac_intel_105_compile_factory.addStep(compile_release)
mac_intel_105_compile_factory.addStep(compile_release_wordcode)
mac_intel_105_compile_factory.addStep(compile_debug)
mac_intel_105_compile_factory.addStep(compile_release_debugger)
mac_intel_105_compile_factory.addStep(compile_debug_debugger)
mac_intel_105_compile_factory.addStep(compile_release_vprof)
mac_intel_105_compile_factory.addStep(compile_selftest)
mac_intel_105_compile_factory.addStep(compile_release_ppc_local)
mac_intel_105_compile_factory.addStep(compile_release_wordcode_ppc_local)
mac_intel_105_compile_factory.addStep(compile_debug_ppc_local)
mac_intel_105_compile_factory.addStep(compile_release_debugger_ppc_local)
mac_intel_105_compile_factory.addStep(compile_debug_debugger_ppc_local)
mac_intel_105_compile_factory.addStep(compile_selftest_ppc_local)
mac_intel_105_compile_factory.addStep(compile_buildcheck_local)
mac_intel_105_compile_factory.addStep(util_upload_asteam_local)
mac_intel_105_compile_factory.addStep(util_upload_mozilla_local)

mac_intel_105_compile_builder = {
            'name': "mac-intel-10.5-compile",
            'slavename': "asteammac1",
            'factory': mac_intel_105_compile_factory,
            'builddir': './mac-intel-10_5-compile',
}


##########################################
#### builder for mac-intel-64-compile ####
##########################################
mac_intel_64_compile_factory = factory.BuildFactory()
mac_intel_64_compile_factory.addStep(sync_clean)
mac_intel_64_compile_factory.addStep(sync_clone)
mac_intel_64_compile_factory.addStep(sync_update)
mac_intel_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac64-intel/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_intel_64_compile_factory.addStep(compile_builtin)
mac_intel_64_compile_factory.addStep(compile_release_local)
mac_intel_64_compile_factory.addStep(compile_release_wordcode_local)
mac_intel_64_compile_factory.addStep(compile_debug_local)
mac_intel_64_compile_factory.addStep(compile_release_debugger_local)
mac_intel_64_compile_factory.addStep(compile_debug_debugger_local)
mac_intel_64_compile_factory.addStep(compile_release_ppc_local)
mac_intel_64_compile_factory.addStep(compile_release_wordcode_ppc_local)
mac_intel_64_compile_factory.addStep(compile_debug_ppc_local)
mac_intel_64_compile_factory.addStep(compile_release_debugger_ppc_local)
mac_intel_64_compile_factory.addStep(compile_debug_debugger_ppc_local)
mac_intel_64_compile_factory.addStep(compile_buildcheck_local)
mac_intel_64_compile_factory.addStep(util_upload_asteam_local)
mac_intel_64_compile_factory.addStep(util_upload_mozilla_local)

mac_intel_64_compile_builder = {
            'name': "mac64-intel-compile",
            'slavename': "asteammac1-64bit",
            'factory': mac_intel_64_compile_factory,
            'builddir': './mac64-intel-compile',
}


############################################
#### builder for mac-ppc-10_4a-compile ####
############################################
mac_ppc_104a_compile_factory = factory.BuildFactory()
mac_ppc_104a_compile_factory.addStep(sync_clean)
mac_ppc_104a_compile_factory.addStep(sync_clone)
mac_ppc_104a_compile_factory.addStep(sync_update)
mac_ppc_104a_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

mac_ppc_104a_compile_builder = {
            'name': "mac-ppc-10.4a-compile",
            'slavename': "asteammac6",
            'factory': mac_ppc_104a_compile_factory,
            'builddir': './mac-ppc-10_4a-compile',
}


###########################################
#### builder for mac-ppc-10_4b-compile ####
###########################################
mac_ppc_104b_compile_factory = factory.BuildFactory()
mac_ppc_104b_compile_factory.addStep(sync_clean)
mac_ppc_104b_compile_factory.addStep(sync_clone)
mac_ppc_104b_compile_factory.addStep(sync_update)
mac_ppc_104b_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

mac_ppc_104b_compile_builder = {
            'name': "mac-ppc-10.4b-compile",
            'slavename': "asteammac9",
            'factory': mac_ppc_104b_compile_factory,
            'builddir': './mac-ppc-10_4b-compile',
}



###########################################
#### builder for mac-ppc-10_5a-compile ####
###########################################
mac_ppc_105a_compile_factory = factory.BuildFactory()
mac_ppc_105a_compile_factory.addStep(sync_clean)
mac_ppc_105a_compile_factory.addStep(sync_clone)
mac_ppc_105a_compile_factory.addStep(sync_update)
mac_ppc_105a_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

mac_ppc_105a_compile_builder = {
            'name': "mac-ppc-10.5a-compile",
            'slavename': "tamarin-xserve",
            'factory': mac_ppc_105a_compile_factory,
            'builddir': './mac-ppc-10_5a-compile',
}

###########################################
#### builder for mac-ppc-10_5b-compile ####
###########################################
mac_ppc_105b_compile_factory = factory.BuildFactory()
mac_ppc_105b_compile_factory.addStep(sync_clean)
mac_ppc_105b_compile_factory.addStep(sync_clone)
mac_ppc_105b_compile_factory.addStep(sync_update)
mac_ppc_105b_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

mac_ppc_105b_compile_builder = {
            'name': "mac-ppc-10.5b-compile",
            'slavename': "tamarin-xserve2",
            'factory': mac_ppc_105b_compile_factory,
            'builddir': './mac-ppc-10_5b-compile',
}


########################################
#### builder for mac-ppc-64-compile ####
########################################
mac_ppc_64_compile_factory = factory.BuildFactory()
mac_ppc_64_compile_factory.addStep(sync_clean)
mac_ppc_64_compile_factory.addStep(sync_clone)
mac_ppc_64_compile_factory.addStep(sync_update)
mac_ppc_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac64-ppc/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

mac_ppc_64_compile_builder = {
            'name': "mac64-ppc-compile",
            'slavename': "asteammac5-64bit",
            'factory': mac_ppc_64_compile_factory,
            'builddir': './mac64-ppc-compile',
}



###################################
#### builder for linux-compile ####
###################################
linux_compile_factory = factory.BuildFactory()
linux_compile_factory.addStep(sync_clean)
linux_compile_factory.addStep(sync_clone)
linux_compile_factory.addStep(sync_update)
linux_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
linux_compile_factory.addStep(compile_builtin)
linux_compile_factory.addStep(compile_release)
linux_compile_factory.addStep(compile_release_wordcode)
linux_compile_factory.addStep(compile_debug)
linux_compile_factory.addStep(compile_release_debugger)
linux_compile_factory.addStep(compile_debug_debugger)
linux_compile_factory.addStep(compile_release_vprof)
linux_compile_factory.addStep(compile_selftest)
linux_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-cov.sh', WithProperties('%s','revision')],
            description='starting linux code coverage release build...',
            descriptionDone='finished linux code coverage release build.',
            name="Build_Release_cov",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
linux_compile_factory.addStep(compile_buildcheck_local)
linux_compile_factory.addStep(util_upload_asteam_local)
linux_compile_factory.addStep(util_upload_mozilla)

linux_compile_builder = {
            'name': "linux-compile",
            'slavename': "asteamlin1",
            'factory': linux_compile_factory,
            'builddir': './linux-compile',
}


#####################################
#### builder for linux64-compile ####
#####################################
linux_64_compile_factory = factory.BuildFactory()
linux_64_compile_factory.addStep(sync_clean)
linux_64_compile_factory.addStep(sync_clone)
linux_64_compile_factory.addStep(sync_update)
linux_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux64/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
linux_64_compile_factory.addStep(compile_builtin)
linux_64_compile_factory.addStep(compile_release)
linux_64_compile_factory.addStep(compile_release_wordcode)
linux_64_compile_factory.addStep(compile_debug)
linux_64_compile_factory.addStep(compile_release_debugger)
linux_64_compile_factory.addStep(compile_debug_debugger)
linux_64_compile_factory.addStep(compile_release_vprof)
linux_64_compile_factory.addStep(compile_testmedia)
linux_64_compile_factory.addStep(compile_buildcheck_local)
linux_64_compile_factory.addStep(util_upload_asteam_local)
linux_64_compile_factory.addStep(util_upload_mozilla_local)

linux_64_compile_builder = {
            'name': "linux64-compile",
            'slavename': "asteamlin5",
            'factory': linux_64_compile_factory,
            'builddir': './linux64-compile',
}



################################################
#### builder for winmobile-emulator-compile ####
################################################
winmobile_emulator_compile_factory = factory.BuildFactory()
winmobile_emulator_compile_factory.addStep(sync_clean)
winmobile_emulator_compile_factory.addStep(sync_clone)
winmobile_emulator_compile_factory.addStep(sync_update)
winmobile_emulator_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/winmobile-arm/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
winmobile_emulator_compile_factory.addStep(compile_builtin)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting release-arm build...',
            descriptionDone='finished release-arm build.',
            name='Build_ReleaseARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-wordcode-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting release-wordcode-arm build...',
            descriptionDone='finished release-wordcode-arm build.',
            name='Build_Release-wordcode-ARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-debug-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting debug-arm build...',
            descriptionDone='finished debug-arm build.',
            name='Build_DebugARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
winmobile_emulator_compile_factory.addStep(compile_buildcheck_local)
winmobile_emulator_compile_factory.addStep(util_upload_asteam_local)
winmobile_emulator_compile_factory.addStep(util_upload_mozilla_local)
winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-mobile-pocketpc-arm-sizereport.sh', WithProperties('%s','revision')],
            description='starting to run sizereport...',
            descriptionDone='finished sizereport.',
            name="Build_Release_sizereport",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)

winmobile_emulator_compile_builder = {
            'name': "winmobile-emulator-compile",
            'slavename': "asteamwin19",
            'factory': winmobile_emulator_compile_factory,
            'builddir': './winmobile-emulator-compile',
}


###########################################
#### builder for solaris-sparc-compile ####
###########################################
solaris_sparc_compile_factory = factory.BuildFactory()
solaris_sparc_compile_factory.addStep(sync_clean)
solaris_sparc_compile_factory.addStep(sync_clone)
solaris_sparc_compile_factory.addStep(sync_update)
solaris_sparc_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/solaris-sparc/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
solaris_sparc_compile_factory.addStep(compile_builtin)
solaris_sparc_compile_factory.addStep(compile_release)
solaris_sparc_compile_factory.addStep(compile_release_wordcode)
solaris_sparc_compile_factory.addStep(compile_debug)
solaris_sparc_compile_factory.addStep(compile_release_debugger)
solaris_sparc_compile_factory.addStep(compile_debug_debugger)
solaris_sparc_compile_factory.addStep(compile_selftest)
solaris_sparc_compile_factory.addStep(compile_buildcheck_local)
solaris_sparc_compile_factory.addStep(util_upload_mozilla)

solaris_sparc_compile_builder = {
            'name': "solaris-sparc-compile",
            'slavename': "asteamsol4",
            'factory': solaris_sparc_compile_factory,
            'builddir': './solaris-sparc-compile',
}

################################################################################
################################################################################
####                                                                        ####
####                            SMOKE BUILDERS                              ####
####                                                                        ####
################################################################################
################################################################################




###################################
#### builder for windows-smoke ####
###################################
windows_smoke_factory = factory.BuildFactory()
windows_smoke_factory.addStep(download_testmedia)
windows_smoke_factory.addStep(test_smoke)
windows_smoke_factory.addStep(util_process_clean)

windows_smoke_builder = {
            'name': "windows-smoke",
            'slavename': "asteamwin2",
            'factory': windows_smoke_factory,
            'builddir': './windows-smoke',
}


#####################################
#### builder for windows64-smoke ####
#####################################
windows_64_smoke_factory = factory.BuildFactory()
windows_64_smoke_factory.addStep(download_testmedia)
windows_64_smoke_factory.addStep(test_smoke)
windows_64_smoke_factory.addStep(util_process_clean)

windows_64_smoke_builder = {
            'name': "windows64-smoke",
            'slavename': "asteamwin3",
            'factory': windows_64_smoke_factory,
            'builddir': './windows64-smoke',
}


##########################################
#### builder for mac-intel-10_4-smoke ####
##########################################
mac_intel_104_smoke_factory = factory.BuildFactory()
mac_intel_104_smoke_factory.addStep(download_testmedia)
mac_intel_104_smoke_factory.addStep(test_smoke)
mac_intel_104_smoke_factory.addStep(util_process_clean)

mac_intel_104_smoke_builder = {
            'name': "mac-intel-10.4-smoke",
            'slavename': "asteammac4",
            'factory': mac_intel_104_smoke_factory,
            'builddir': './mac-intel-10_4-smoke',
}


##########################################
#### builder for mac-intel-10_5-smoke ####
##########################################
mac_intel_105_smoke_factory = factory.BuildFactory()
mac_intel_105_smoke_factory.addStep(download_testmedia)
mac_intel_105_smoke_factory.addStep(test_smoke)
mac_intel_105_smoke_factory.addStep(util_process_clean)

mac_intel_105_smoke_builder = {
            'name': "mac-intel-10.5-smoke",
            'slavename': "asteammac1",
            'factory': mac_intel_105_smoke_factory,
            'builddir': './mac-intel-10_5-smoke',
}


#######################################
#### builder for mac64-intel-smoke ####
#######################################
mac_intel_64_smoke_factory = factory.BuildFactory()
mac_intel_64_smoke_factory.addStep(download_testmedia)
mac_intel_64_smoke_factory.addStep(test_smoke)
mac_intel_64_smoke_factory.addStep(util_process_clean)

mac_intel_64_smoke_builder = {
            'name': "mac64-intel-smoke",
            'slavename': "asteammac1-64bit",
            'factory': mac_intel_64_smoke_factory,
            'builddir': './mac64-intel-smoke',
}

#########################################
#### builder for mac-ppc-10_4a-smoke ####
#########################################
mac_ppc_104a_smoke_factory = factory.BuildFactory()
mac_ppc_104a_smoke_factory.addStep(download_testmedia)
mac_ppc_104a_smoke_factory.addStep(test_smoke)
mac_ppc_104a_smoke_factory.addStep(util_process_clean)

mac_ppc_104a_smoke_builder = {
            'name': "mac-ppc-10.4a-smoke",
            'slavename': "asteammac6",
            'factory': mac_ppc_104a_smoke_factory,
            'builddir': './mac-ppc-10_4a-smoke',
}


#########################################
#### builder for mac-ppc-10_4b-smoke ####
#########################################
mac_ppc_104b_smoke_factory = factory.BuildFactory()
mac_ppc_104b_smoke_factory.addStep(download_testmedia)
mac_ppc_104b_smoke_factory.addStep(test_smoke)
mac_ppc_104b_smoke_factory.addStep(util_process_clean)

mac_ppc_104b_smoke_builder = {
            'name': "mac-ppc-10.4b-smoke",
            'slavename': "asteammac9",
            'factory': mac_ppc_104b_smoke_factory,
            'builddir': './mac-ppc-10_4b-smoke',
}


#########################################
#### builder for mac-ppc-10_5a-smoke ####
#########################################
mac_ppc_105a_smoke_factory = factory.BuildFactory()
mac_ppc_105a_smoke_factory.addStep(download_testmedia)
mac_ppc_105a_smoke_factory.addStep(test_smoke)
mac_ppc_105a_smoke_factory.addStep(util_process_clean)

mac_ppc_105a_smoke_builder = {
            'name': "mac-ppc-10.5a-smoke",
            'slavename': "tamarin-xserve",
            'factory': mac_ppc_105a_smoke_factory,
            'builddir': './mac-ppc-10_5a-smoke',
}

#########################################
#### builder for mac-ppc-10_5b-smoke ####
#########################################
mac_ppc_105b_smoke_factory = factory.BuildFactory()
mac_ppc_105b_smoke_factory.addStep(download_testmedia)
mac_ppc_105b_smoke_factory.addStep(test_smoke)
mac_ppc_105b_smoke_factory.addStep(util_process_clean)

mac_ppc_105b_smoke_builder = {
            'name': "mac-ppc-10.5b-smoke",
            'slavename': "tamarin-xserve2",
            'factory': mac_ppc_105b_smoke_factory,
            'builddir': './mac-ppc-10_5b-smoke',
}


#####################################
#### builder for mac64-ppc-smoke ####
#####################################
mac_ppc_64_smoke_factory = factory.BuildFactory()
mac_ppc_64_smoke_factory.addStep(download_testmedia)
mac_ppc_64_smoke_factory.addStep(test_smoke)
mac_ppc_64_smoke_factory.addStep(util_process_clean)

mac_ppc_64_smoke_builder = {
            'name': "mac64-ppc-smoke",
            'slavename': "asteammac5-64bit",
            'factory': mac_ppc_64_smoke_factory,
            'builddir': './mac64-ppc-smoke',
}


#################################
#### builder for linux-smoke ####
#################################
linux_smoke_factory = factory.BuildFactory()
linux_smoke_factory.addStep(download_testmedia)
linux_smoke_factory.addStep(test_smoke)
linux_smoke_factory.addStep(util_process_clean)

linux_smoke_builder = {
            'name': "linux-smoke",
            'slavename': "asteamlin1",
            'factory': linux_smoke_factory,
            'builddir': './linux-smoke',
}


###################################
#### builder for linux64-smoke ####
###################################
linux_64_smoke_factory = factory.BuildFactory()
linux_64_smoke_factory.addStep(download_testmedia)
linux_64_smoke_factory.addStep(test_smoke)
linux_64_smoke_factory.addStep(util_process_clean)

linux_64_smoke_builder = {
            'name': "linux64-smoke",
            'slavename': "asteamlin5",
            'factory': linux_64_smoke_factory,
            'builddir': './linux64-smoke',
}


##############################################
#### builder for winmobile-emulator-smoke ####
##############################################
winmobile_emulator_smoke_factory = factory.BuildFactory()
winmobile_emulator_smoke_factory.addStep(download_testmedia)
winmobile_emulator_smoke_factory.addStep(test_emulator_smoke_mobile)
winmobile_emulator_smoke_factory.addStep(util_process_clean)

winmobile_emulator_smoke_builder = {
            'name': "winmobile-emulator-smoke",
            'slavename': "asteamwin19",
            'factory': winmobile_emulator_smoke_factory,
            'builddir': './winmobile-emulator-smoke',
}


#########################################
#### builder for solaris-sparc-smoke ####
#########################################
solaris_sparc_smoke_factory = factory.BuildFactory()
solaris_sparc_smoke_factory.addStep(download_testmedia)
solaris_sparc_smoke_factory.addStep(test_smoke)
solaris_sparc_smoke_factory.addStep(util_process_clean)

solaris_sparc_smoke_builder = {
            'name': "solaris-sparc-smoke",
            'slavename': "asteamsol4",
            'factory': solaris_sparc_smoke_factory,
            'builddir': './solaris-sparc-smoke',
}




################################################################################
################################################################################
####                                                                        ####
####                            TEST BUILDERS                               ####
####                                                                        ####
################################################################################
################################################################################




##################################
#### builder for windows-test ####
##################################
windows_test_factory = factory.BuildFactory()
windows_test_factory.addStep(test_commandline)
windows_test_factory.addStep(test_selftest)
windows_test_factory.addStep(test_release)
windows_test_factory.addStep(test_release_interp)
windows_test_factory.addStep(test_release_interp_wordcode)
windows_test_factory.addStep(test_release_jit)
windows_test_factory.addStep(test_release_debugger)
windows_test_factory.addStep(test_debug)
windows_test_factory.addStep(test_debug_debugger)
windows_test_factory.addStep(test_differential)
windows_test_factory.addStep(util_process_clean)

windows_test_builder = {
            'name': "windows-test",
            'slavename': "asteamwin2",
            'factory': windows_test_factory,
            'builddir': './windows-test',
}


####################################
#### builder for windows64-test ####
####################################
windows_64_test_factory = factory.BuildFactory()
windows_64_test_factory.addStep(test_commandline)
windows_64_test_factory.addStep(test_release)
windows_64_test_factory.addStep(test_release_interp)
windows_64_test_factory.addStep(test_release_jit)
windows_64_test_factory.addStep(test_release_debugger)
windows_64_test_factory.addStep(test_debug)
windows_64_test_factory.addStep(test_debug_debugger)
windows_64_test_factory.addStep(util_process_clean)

windows_64_test_builder = {
            'name': "windows64-test",
            'slavename': "asteamwin3",
            'factory': windows_64_test_factory,
            'builddir': './windows64-test',
}


#########################################
#### builder for mac-intel-10_4-test ####
#########################################
mac_intel_104_test_factory = factory.BuildFactory()
mac_intel_104_test_factory.addStep(test_commandline)
mac_intel_104_test_factory.addStep(test_selftest)
mac_intel_104_test_factory.addStep(test_release)
mac_intel_104_test_factory.addStep(test_release_interp)
mac_intel_104_test_factory.addStep(test_release_interp_wordcode)
mac_intel_104_test_factory.addStep(test_release_jit)
mac_intel_104_test_factory.addStep(test_release_debugger)
mac_intel_104_test_factory.addStep(test_debug)
mac_intel_104_test_factory.addStep(test_debug_debugger)
mac_intel_104_test_factory.addStep(test_differential)
mac_intel_104_test_factory.addStep(util_process_clean)

mac_intel_104_test_builder = {
            'name': "mac-intel-10.4-test",
            'slavename': "asteammac4",
            'factory': mac_intel_104_test_factory,
            'builddir': './mac-intel-10_4-test',
}


#########################################
#### builder for mac-intel-10_5-test ####
#########################################
mac_intel_105_test_factory = factory.BuildFactory()
mac_intel_105_test_factory.addStep(test_commandline)
mac_intel_105_test_factory.addStep(test_selftest)
mac_intel_105_test_factory.addStep(test_release)
mac_intel_105_test_factory.addStep(test_release_interp)
mac_intel_105_test_factory.addStep(test_release_interp_wordcode)
mac_intel_105_test_factory.addStep(test_release_jit)
mac_intel_105_test_factory.addStep(test_release_debugger)
mac_intel_105_test_factory.addStep(test_debug)
mac_intel_105_test_factory.addStep(test_debug_debugger)
mac_intel_105_test_factory.addStep(test_differential)
mac_intel_105_test_factory.addStep(util_process_clean)

mac_intel_105_test_builder = {
            'name': "mac-intel-10.5-test",
            'slavename': "asteammac1",
            'factory': mac_intel_105_test_factory,
            'builddir': './mac-intel-10_5-test',
}


######################################
#### builder for mac64-intel-test ####
######################################
mac_intel_64_test_factory = factory.BuildFactory()
mac_intel_64_test_factory.addStep(test_commandline)
mac_intel_64_test_factory.addStep(test_release)
mac_intel_64_test_factory.addStep(test_release_interp)
mac_intel_64_test_factory.addStep(test_release_interp_wordcode)
mac_intel_64_test_factory.addStep(test_release_jit)
mac_intel_64_test_factory.addStep(test_release_debugger)
mac_intel_64_test_factory.addStep(test_debug)
mac_intel_64_test_factory.addStep(test_debug_debugger)
mac_intel_64_test_factory.addStep(util_process_clean)

mac_intel_64_test_builder = {
            'name': "mac64-intel-test",
            'slavename': "asteammac1-64bit",
            'factory': mac_intel_64_test_factory,
            'builddir': './mac64-intel-test',
}

########################################
#### builder for mac-ppc-10_4a-test ####
########################################
mac_ppc_104a_test_factory = factory.BuildFactory()
mac_ppc_104a_test_factory.addStep(test_commandline)
mac_ppc_104a_test_factory.addStep(test_selftest)
mac_ppc_104a_test_factory.addStep(test_release)
mac_ppc_104a_test_factory.addStep(test_release_interp)
mac_ppc_104a_test_factory.addStep(test_release_interp_wordcode)
mac_ppc_104a_test_factory.addStep(test_release_jit)
mac_ppc_104a_test_factory.addStep(test_debug)
mac_ppc_104a_test_factory.addStep(util_process_clean)

mac_ppc_104a_test_builder = {
            'name': "mac-ppc-10.4a-test",
            'slavename': "asteammac6",
            'factory': mac_ppc_104a_test_factory,
            'builddir': './mac-ppc-10_4a-test',
}


########################################
#### builder for mac-ppc-10_4b-test ####
########################################
mac_ppc_104b_test_factory = factory.BuildFactory()
mac_ppc_104b_test_factory.addStep(test_release_debugger)
mac_ppc_104b_test_factory.addStep(test_debug_debugger)
mac_ppc_104b_test_factory.addStep(util_process_clean)

mac_ppc_104b_test_builder = {
            'name': "mac-ppc-10.4b-test",
            'slavename': "asteammac9",
            'factory': mac_ppc_104b_test_factory,
            'builddir': './mac-ppc-10_4b-test',
}


########################################
#### builder for mac-ppc-10_5a-test ####
########################################
mac_ppc_105a_test_factory = factory.BuildFactory()
mac_ppc_105a_test_factory.addStep(test_commandline)
mac_ppc_105a_test_factory.addStep(test_selftest)
mac_ppc_105a_test_factory.addStep(test_release)
mac_ppc_105a_test_factory.addStep(test_release_interp)
mac_ppc_105a_test_factory.addStep(test_release_interp_wordcode)
mac_ppc_105a_test_factory.addStep(test_release_jit)
mac_ppc_105a_test_factory.addStep(test_debug)
mac_ppc_105a_test_factory.addStep(util_process_clean)

mac_ppc_105a_test_builder = {
            'name': "mac-ppc-10.5a-test",
            'slavename': "tamarin-xserve",
            'factory': mac_ppc_105a_test_factory,
            'builddir': './mac-ppc-10_5a-test',
}


########################################
#### builder for mac-ppc-10_5b-test ####
########################################
mac_ppc_105b_test_factory = factory.BuildFactory()
mac_ppc_105b_test_factory.addStep(test_release_debugger)
mac_ppc_105b_test_factory.addStep(test_debug_debugger)
mac_ppc_105b_test_factory.addStep(util_process_clean)

mac_ppc_105b_test_builder = {
            'name': "mac-ppc-10.5b-test",
            'slavename': "tamarin-xserve2",
            'factory': mac_ppc_105b_test_factory,
            'builddir': './mac-ppc-10_5b-test',
}


####################################
#### builder for mac64-ppc-test ####
####################################
mac_ppc_64_test_factory = factory.BuildFactory()
mac_ppc_64_test_factory.addStep(test_commandline)
mac_ppc_64_test_factory.addStep(test_release)
mac_ppc_64_test_factory.addStep(test_release_interp)
mac_ppc_64_test_factory.addStep(test_release_interp_wordcode)
mac_ppc_64_test_factory.addStep(test_release_jit)
mac_ppc_64_test_factory.addStep(test_release_debugger)
mac_ppc_64_test_factory.addStep(test_debug)
mac_ppc_64_test_factory.addStep(test_debug_debugger)
mac_ppc_64_test_factory.addStep(util_process_clean)

mac_ppc_64_test_builder = {
            'name': "mac64-ppc-test",
            'slavename': "asteammac5-64bit",
            'factory': mac_ppc_64_test_factory,
            'builddir': './mac64-ppc-test',
}


################################
#### builder for linux-test ####
################################
linux_test_factory = factory.BuildFactory()
linux_test_factory.addStep(test_commandline)
linux_test_factory.addStep(test_selftest)
linux_test_factory.addStep(test_release)
linux_test_factory.addStep(test_release_interp)
linux_test_factory.addStep(test_release_interp_wordcode)
linux_test_factory.addStep(test_release_jit)
linux_test_factory.addStep(test_release_debugger)
linux_test_factory.addStep(test_debug)
linux_test_factory.addStep(test_debug_debugger)
linux_test_factory.addStep(test_differential)
linux_test_factory.addStep(TestSuiteShellCommand(
            command=['./run-tests-release-cov.sh', WithProperties('%s','revision')],
            description='starting to run release code coverage vmtests...',
            descriptionDone='finished release code coverage vmtests.',
            name="Testsuite_Release-cov",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
linux_test_factory.addStep(util_process_clean)

linux_test_builder = {
            'name': "linux-test",
            'slavename': "asteamlin1",
            'factory': linux_test_factory,
            'builddir': './linux-test',
}


##################################
#### builder for linux64-test ####
##################################
linux_64_test_factory = factory.BuildFactory()
linux_64_test_factory.addStep(test_commandline)
linux_64_test_factory.addStep(test_release)
linux_64_test_factory.addStep(test_release_interp)
linux_64_test_factory.addStep(test_release_interp_wordcode)
linux_64_test_factory.addStep(test_release_jit)
linux_64_test_factory.addStep(test_release_debugger)
linux_64_test_factory.addStep(test_debug)
linux_64_test_factory.addStep(test_debug_debugger)
linux_64_test_factory.addStep(util_process_clean)

linux_64_test_builder = {
            'name': "linux64-test",
            'slavename': "asteamlin5",
            'factory': linux_64_test_factory,
            'builddir': './linux64-test',
}


#############################################
#### builder for winmobile-emulator-test ####
#############################################
winmobile_emulator_test_factory = factory.BuildFactory()
winmobile_emulator_test_factory.addStep(test_emulator_release_mobile)
winmobile_emulator_test_factory.addStep(test_emulator_release_interp_mobile)
winmobile_emulator_test_factory.addStep(test_emulator_release_interp_wordcode_mobile)
winmobile_emulator_test_factory.addStep(test_emulator_release_jit_mobile)
winmobile_emulator_test_factory.addStep(util_process_clean)

winmobile_emulator_test_builder = {
            'name': "winmobile-emulator-test",
            'slavename': "asteamwin19",
            'factory': winmobile_emulator_test_factory,
            'builddir': './winmobile-emulator-test',
}


########################################
#### builder for solaris-sparc-test ####
########################################
solaris_sparc_test_factory = factory.BuildFactory()
solaris_sparc_test_factory.addStep(test_commandline)
solaris_sparc_test_factory.addStep(test_selftest)
solaris_sparc_test_factory.addStep(test_release)
solaris_sparc_test_factory.addStep(test_release_interp)
solaris_sparc_test_factory.addStep(test_release_interp_wordcode)
solaris_sparc_test_factory.addStep(test_release_jit)
solaris_sparc_test_factory.addStep(test_release_debugger)
solaris_sparc_test_factory.addStep(test_debug)
solaris_sparc_test_factory.addStep(test_debug_debugger)
solaris_sparc_test_factory.addStep(util_process_clean)

solaris_sparc_test_builder = {
            'name': "solaris-sparc-test",
            'slavename': "asteamsol4",
            'factory': solaris_sparc_test_factory,
            'builddir': './solaris-sparc-test',
}



################################################################################
################################################################################
####                                                                        ####
####                     PERFORMANCE BUILDERS                               ####
####                                                                        ####
################################################################################
################################################################################


#########################################
#### builder for windows-performance ####
#########################################
windows_performance_factory = factory.BuildFactory()
windows_performance_factory.addStep(sync_clean)
windows_performance_factory.addStep(sync_clone)
windows_performance_factory.addStep(sync_update)
windows_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows_performance_factory.addStep(bb_lockacquire)
windows_performance_factory.addStep(perf_prepare)
windows_performance_factory.addStep(perf_release)
windows_performance_factory.addStep(perf_release_interp)
windows_performance_factory.addStep(perf_release_jit)
windows_performance_factory.addStep(perf_release_vprof)
windows_performance_factory.addStep(util_process_clean)
windows_performance_factory.addStep(bb_lockrelease)

windows_performance_builder = {
            'name': "windows-performance",
            'slavename': "asteamwin1",
            'factory': windows_performance_factory,
            'builddir': './windows-performance',
}


#####################################
#### builder for mac-performance ####
#####################################
mac_performance_factory = factory.BuildFactory()
mac_performance_factory.addStep(sync_clean)
mac_performance_factory.addStep(sync_clone)
mac_performance_factory.addStep(sync_update)
mac_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_performance_factory.addStep(bb_lockacquire)
mac_performance_factory.addStep(perf_prepare)
mac_performance_factory.addStep(perf_release)
mac_performance_factory.addStep(perf_release_interp)
mac_performance_factory.addStep(perf_release_jit)
mac_performance_factory.addStep(perf_release_vprof)
mac_performance_factory.addStep(util_process_clean)
mac_performance_factory.addStep(bb_lockrelease)

mac_performance_builder = {
            'name': "mac-performance",
            'slavename': "asteammac2",
            'factory': mac_performance_factory,
            'builddir': './mac-performance',
}


#######################################
#### builder for mac64-performance ####
#######################################
mac_64_performance_factory = factory.BuildFactory()
mac_64_performance_factory.addStep(sync_clean)
mac_64_performance_factory.addStep(sync_clone)
mac_64_performance_factory.addStep(sync_update)
mac_64_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac64-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_64_performance_factory.addStep(bb_lockacquire)
mac_64_performance_factory.addStep(perf_prepare)
mac_64_performance_factory.addStep(perf_release)
mac_64_performance_factory.addStep(perf_release_interp)
mac_64_performance_factory.addStep(perf_release_jit)
mac_64_performance_factory.addStep(util_process_clean)
mac_64_performance_factory.addStep(bb_lockrelease)

mac_64_performance_builder = {
            'name': "mac64-performance",
            'slavename': "asteammac7",
            'factory': mac_64_performance_factory,
            'builddir': './mac64-performance',
}


#########################################
#### builder for mac-ppc-performance ####
#########################################
mac_ppc_performance_factory = factory.BuildFactory()
mac_ppc_performance_factory.addStep(sync_clean)
mac_ppc_performance_factory.addStep(sync_clone)
mac_ppc_performance_factory.addStep(sync_update)
mac_ppc_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_ppc_performance_factory.addStep(bb_lockacquire)
mac_ppc_performance_factory.addStep(perf_prepare)
mac_ppc_performance_factory.addStep(perf_release)
mac_ppc_performance_factory.addStep(perf_release_interp)
mac_ppc_performance_factory.addStep(perf_release_jit)
mac_ppc_performance_factory.addStep(util_process_clean)
mac_ppc_performance_factory.addStep(bb_lockrelease)

mac_ppc_performance_builder = {
            'name': "mac-ppc-performance",
            'slavename': "asteammac3",
            'factory': mac_ppc_performance_factory,
            'builddir': './mac-ppc-performance',
}


#######################################
#### builder for linux-performance ####
#######################################
linux_performance_factory = factory.BuildFactory()
linux_performance_factory.addStep(sync_clean)
linux_performance_factory.addStep(sync_clone)
linux_performance_factory.addStep(sync_update)
linux_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
linux_performance_factory.addStep(bb_lockacquire)
linux_performance_factory.addStep(perf_prepare)
linux_performance_factory.addStep(perf_release)
linux_performance_factory.addStep(perf_release_interp)
linux_performance_factory.addStep(perf_release_jit)
linux_performance_factory.addStep(perf_release_vprof)
linux_performance_factory.addStep(util_process_clean)
linux_performance_factory.addStep(bb_lockrelease)

linux_performance_builder = {
            'name': "linux-performance",
            'slavename': "asteamlin4",
            'factory': linux_performance_factory,
            'builddir': './linux-performance',
}


###########################################
#### builder for winmobile-performance ####
###########################################
winmobile_performance_factory = factory.BuildFactory()
winmobile_performance_factory.addStep(sync_clean)
winmobile_performance_factory.addStep(sync_clone)
winmobile_performance_factory.addStep(sync_update)
winmobile_performance_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/winmobile-performance/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
winmobile_performance_factory.addStep(bb_lockacquire)
winmobile_performance_factory.addStep(perf_prepare)
winmobile_performance_factory.addStep(perf_release_arm)
winmobile_performance_factory.addStep(perf_release_arm_interp)
winmobile_performance_factory.addStep(perf_release_arm_jit)
winmobile_performance_factory.addStep(bb_lockrelease)

winmobile_performance_builder = {
            'name': "winmobile-performance",
            'slavename': "asteamwin5",
            'factory': winmobile_performance_factory,
            'builddir': './winmobile-performance',
}



################################################################################
################################################################################
####                                                                        ####
####                       DEEP TEST BUILDERS                               ####
####                                                                        ####
################################################################################
################################################################################


##################################
#### builder for windows-deep ####
##################################
windows_deep_factory = factory.BuildFactory()
windows_deep_factory.addStep(sync_clean)
windows_deep_factory.addStep(sync_clone)
windows_deep_factory.addStep(sync_update)
windows_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows_deep_factory.addStep(download_testmedia)
windows_deep_factory.addStep(deep_release_esc)
windows_deep_factory.addStep(deep_codecoverage)
windows_deep_factory.addStep(test_misc)
windows_deep_factory.addStep(compile_release_api)
windows_deep_factory.addStep(test_api_versioning)
windows_deep_factory.addStep(test_Dgreedy)
windows_deep_factory.addStep(util_process_clean)

windows_deep_builder = {
            'name': "windows-deep",
            'slavename': "asteamwin10",
            'factory': windows_deep_factory,
            'builddir': './windows-deep',
}

##################################
#### builder for windows-p3-deep ####
##################################
windows_p3_deep_factory = factory.BuildFactory()
windows_p3_deep_factory.addStep(sync_clean)
windows_p3_deep_factory.addStep(sync_clone)
windows_p3_deep_factory.addStep(sync_update)
windows_p3_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows-p3-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows_p3_deep_factory.addStep(download_testmedia)
#windows_p3_deep_factory.addStep(test_smoke)
#windows_p3_deep_factory.addStep(test_commandline)
#windows_p3_deep_factory.addStep(test_selftest)
#windows_p3_deep_factory.addStep(test_release)
windows_p3_deep_factory.addStep(test_release_interp)
windows_p3_deep_factory.addStep(test_release_interp_wordcode)
#windows_p3_deep_factory.addStep(test_release_jit)
#windows_p3_deep_factory.addStep(test_release_debugger)
#windows_p3_deep_factory.addStep(test_debug)
#windows_p3_deep_factory.addStep(test_debug_debugger)
#windows_p3_deep_factory.addStep(test_differential)
windows_p3_deep_factory.addStep(util_process_clean)

windows_p3_deep_builder = {
            'name': "windows-p3-deep",
            'slavename': "asteamwin13",
            'factory': windows_p3_deep_factory,
            'builddir': './windows-p3-deep',
}


##################################
#### builder for windows-frr ####
##################################
windows_frr_factory = factory.BuildFactory()
windows_frr_factory.addStep(BuildShellCommand(
            command=['./build-frr.sh', WithProperties('%s','revision')],
            description='building frr...',
            descriptionDone='finished building frr.',
            name="BuildFRR",
            workdir="../scripts",
            timeout=3600)
)
windows_frr_factory.addStep(BuildShellCommand(
            command=['./run-frunit.sh', WithProperties('%s','revision')],
            description='running frunit...',
            descriptionDone='finished running frunit.',
            name="RunFrunit",
            workdir="../scripts",
            timeout=3600)
)
windows_frr_builder = {
            'name': "windows-frr",
            'slavename': "asteamwin12",
            'factory': windows_frr_factory,
            'builddir': './windows-frr',
}

##################################
#### builder for mac-ppc-deep ####
##################################
mac_ppc_deep_factory = factory.BuildFactory()
mac_ppc_deep_factory.addStep(sync_clean)
mac_ppc_deep_factory.addStep(sync_clone)
mac_ppc_deep_factory.addStep(sync_update)
mac_ppc_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
mac_ppc_deep_factory.addStep(download_testmedia)
mac_ppc_deep_factory.addStep(test_debug)
mac_ppc_deep_factory.addStep(test_debug_debugger)
mac_ppc_deep_factory.addStep(test_debug64)
mac_ppc_deep_factory.addStep(test_debug_debugger64)
mac_ppc_deep_factory.addStep(deep_release_esc)
mac_ppc_deep_factory.addStep(test_misc)
mac_ppc_deep_factory.addStep(compile_release_api)
mac_ppc_deep_factory.addStep(test_api_versioning)
mac_ppc_deep_factory.addStep(test_Dgreedy)
mac_ppc_deep_factory.addStep(util_process_clean)
mac_ppc_deep_builder = {
            'name': "mac-ppc-deep",
            'slavename': "asteammac10",
            'factory': mac_ppc_deep_factory,
            'builddir': './mac-ppc-deep',
}

########################################
#### builder for solaris-sparc-deep ####
########################################
solaris_sparc_deep_factory = factory.BuildFactory()
solaris_sparc_deep_factory.addStep(sync_clean)
solaris_sparc_deep_factory.addStep(sync_clone)
solaris_sparc_deep_factory.addStep(sync_update)
solaris_sparc_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/solaris-sparc-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
solaris_sparc_deep_factory.addStep(download_testmedia)
solaris_sparc_deep_factory.addStep(test_debug)
solaris_sparc_deep_factory.addStep(test_debug_debugger)
#solaris_deep_factory.addStep(deep_release_esc)
solaris_sparc_deep_factory.addStep(test_misc)
solaris_sparc_deep_factory.addStep(compile_release_api)
solaris_sparc_deep_factory.addStep(test_api_versioning)
solaris_sparc_deep_factory(test_Dgreedy)
solaris_sparc_deep_factory.addStep(util_process_clean)
solaris_sparc_deep_builder = {
            'name': "solaris-sparc-deep",
            'slavename': "asteamsol1",
            'factory': solaris_sparc_deep_factory,
            'builddir': './solaris-sparc-deep',
}

##################################
#### builder for windows64-deep ####
##################################
windows64_deep_factory = factory.BuildFactory()
windows64_deep_factory.addStep(sync_clean)
windows64_deep_factory.addStep(sync_clone)
windows64_deep_factory.addStep(sync_update)
windows64_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows64-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
windows64_deep_factory.addStep(download_testmedia)
windows64_deep_factory.addStep(test_debug)
windows64_deep_factory.addStep(test_debug_debugger)
windows64_deep_factory.addStep(deep_release_esc)
windows64_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell_s', '-Dverifyall', ''],
            description='starting to run release-debugger-verifyall vmtests...',
            descriptionDone='finished release-debugger-verifyall vmtests.',
            name="Testsuite_ReleaseDebugger-Dverifyall",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
windows64_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell_sd', '-Dverifyall', 'x64-win-tvm-debugdebugger-Dverifyall'],
            description='starting to run debug-debugger-verifyall vmtests...',
            descriptionDone='finished debug-debugger-verifyall vmtests.',
            name="Testsuite_DebugDebugger-Dverifyall",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
windows64_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-avmdiff-3264.sh', WithProperties('%s','revision')],
            description='starting to run 32-64 differential vmtests...',
            descriptionDone='finished 32-64 differential vmtests.',
            name="Testsuite_Differential3264",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
windows64_deep_factory.addStep(test_misc)
windows64_deep_factory(test_Dgreedy)
windows64_deep_factory.addStep(util_process_clean)
windows64_deep_builder = {
            'name': "windows64-deep",
            'slavename': "asteamwin11",
            'factory': windows64_deep_factory,
            'builddir': './windows64-deep',
}

##################################
#### builder for winmobile-emulator-deep ####
##################################
winmobile_emulator_deep_factory = factory.BuildFactory()
winmobile_emulator_deep_factory.addStep(sync_clean)
winmobile_emulator_deep_factory.addStep(sync_clone)
winmobile_emulator_deep_factory.addStep(sync_update)
winmobile_emulator_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/winmobile-arm-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
winmobile_emulator_deep_factory.addStep(download_testmedia)
winmobile_emulator_deep_factory.addStep(test_emulator_release_mobile_local)
winmobile_emulator_deep_factory.addStep(test_emulator_release_interp_mobile_local)
winmobile_emulator_deep_factory.addStep(test_emulator_release_interp_wordcode_mobile_local)
winmobile_emulator_deep_factory.addStep(test_emulator_release_jit_mobile_local)
winmobile_emulator_deep_factory.addStep(util_process_clean)
winmobile_emulator_deep_builder = {
            'name': "winmobile-emulator-deep",
            'slavename': "asteamwin20",
            'factory': winmobile_emulator_deep_factory,
            'builddir': './winmobile-emulator-deep',
}

##################################
#### builder for linux-deep   ####
##################################
linux_deep_factory = factory.BuildFactory()
linux_deep_factory.addStep(sync_clean)
linux_deep_factory.addStep(sync_clone)
linux_deep_factory.addStep(sync_update)
linux_deep_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux-deep/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
linux_deep_factory.addStep(download_testmedia)
linux_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell', '-Djitordie', ''],
            description='starting to run -Djitordie release vmtests...',
            descriptionDone='finished -Djitordie release vmtests.',
            name="Testsuite_Release-Djitordie",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
linux_deep_factory.addStep(test_release_debugger_nodebugger)
linux_deep_factory.addStep(test_debug_debugger_nodebugger)
linux_deep_factory.addStep( BuildShellCommand(
            command=['../all/compile-generic.sh', WithProperties('%s','revision'), '--enable-shell --disable-jit', 'avmshell_nojit'],
            description='starting release-nojit build...',
            descriptionDone='finished release-nojit build.',
            name="Build_Release-nojit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
linux_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell_nojit', '', 'x86-lnx-tvm-release-nojit'],
            description='starting to run release-nojit vmtests...',
            descriptionDone='finished release-nojit vmtests.',
            name="Testsuite_Release-nojit",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)

linux_deep_factory.addStep( BuildShellCommand(
            command=['../all/compile-generic.sh', WithProperties('%s','revision'), '--enable-shell --enable-use-system-malloc', 'avmshell_sysmalloc'],
            description='starting release-system-malloc build...',
            descriptionDone='finished release-system-malloc build.',
            name="Build_Release-system-malloc",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
linux_deep_factory.addStep( TestSuiteShellCommand(
            command=['../all/run-acceptance-generic.sh', WithProperties('%s','revision'), 'avmshell_sysmalloc', '', 'x86-lnx-tvm-release-use-system-malloc'],
            description='starting to run release-system-malloc vmtests...',
            descriptionDone='finished release-system-malloc vmtests.',
            name="Testsuite_Release-system-malloc",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH 
            )
)
linux_deep_factory.addStep(test_misc)
linux_deep_factory.addStep(compile_release_api)
linux_deep_factory.addStep(test_api_versioning)
linux_deep_factory(test_Dgreedy)
linux_deep_factory.addStep(util_process_clean)
linux_deep_builder = {
            'name': "linux-deep",
            'slavename': "asteamlin9",
            'factory': linux_deep_factory,
            'builddir': './linux-deep',
}

################################################################################
################################################################################
####                                                                        ####
####                    SANDBOX COMPILE BUILDERS                            ####
####                                                                        ####
################################################################################
################################################################################

#############################################
#### builder for windows-compile-sandbox ####
#############################################
sb_windows_compile_factory = factory.BuildFactory()
sb_windows_compile_factory.addStep(sync_clean)
sb_windows_compile_factory.addStep(sync_clone_sandbox)
sb_windows_compile_factory.addStep(sync_update)
sb_windows_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_windows_compile_factory.addStep(compile_builtin)
sb_windows_compile_factory.addStep(compile_release)
sb_windows_compile_factory.addStep(compile_release_wordcode)
sb_windows_compile_factory.addStep(compile_debug)
sb_windows_compile_factory.addStep(compile_release_debugger)
sb_windows_compile_factory.addStep(compile_debug_debugger)
sb_windows_compile_factory.addStep(compile_release_vprof)
sb_windows_compile_factory.addStep(compile_selftest)
sb_windows_compile_factory.addStep(BuildShellCommand(
            command=['../all/file-check.py', '../../../../../%s' % BRANCH],
            description='running file-check against source...',
            descriptionDone='finished file-check.',
            name="FileCheck",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_windows_compile_factory.addStep(compile_buildcheck)
sb_windows_compile_factory.addStep(util_upload_asteam)
#sb_windows_compile_factory.addStep(BuildShellCommand(
#            command=['./build-release-sizereport.sh',WithProperties('%s','revision')],
#            description='starting win release-sizereport build...',
#            descriptionDone='finished win release-sizereport build.',
#            name='Build_Release_sizereport',
#            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
#)


sb_windows_compile_builder = {
            'name': "windows-compile-sandbox",
            'slavename': "asteamwin2",
            'factory': sb_windows_compile_factory,
            'builddir': './sandbox-windows-compile',
}


###############################################
#### builder for windows64-compile-sandbox ####
###############################################
sb_windows64_compile_factory = factory.BuildFactory()
sb_windows64_compile_factory.addStep(sync_clean)
sb_windows64_compile_factory.addStep(sync_clone_sandbox)
sb_windows64_compile_factory.addStep(sync_update)
sb_windows64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/windows64/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_windows64_compile_factory.addStep(compile_builtin)
sb_windows64_compile_factory.addStep(compile_release_local)
sb_windows64_compile_factory.addStep(compile_debug_local)
sb_windows64_compile_factory.addStep(compile_release_debugger_local)
sb_windows64_compile_factory.addStep(compile_debug_debugger_local)
sb_windows64_compile_factory.addStep(compile_buildcheck_local)
sb_windows64_compile_factory.addStep(util_upload_asteam_local)


sb_windows64_compile_builder = {
            'name': "windows64-compile-sandbox",
            'slavename': "asteamwin3",
            'factory': sb_windows64_compile_factory,
            'builddir': './sandbox-windows64-compile',
}


####################################################
#### builder for mac-intel-10_4-compile-sandbox ####
####################################################
sb_mac_intel_104_compile_factory = factory.BuildFactory()
sb_mac_intel_104_compile_factory.addStep(sync_clean)
sb_mac_intel_104_compile_factory.addStep(sync_clone_sandbox)
sb_mac_intel_104_compile_factory.addStep(sync_update)
sb_mac_intel_104_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-intel-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_mac_intel_104_compile_factory.addStep(compile_builtin)
sb_mac_intel_104_compile_factory.addStep(compile_release)
sb_mac_intel_104_compile_factory.addStep(compile_release_wordcode)
sb_mac_intel_104_compile_factory.addStep(compile_debug)
sb_mac_intel_104_compile_factory.addStep(compile_release_debugger)
sb_mac_intel_104_compile_factory.addStep(compile_debug_debugger)
sb_mac_intel_104_compile_factory.addStep(compile_release_vprof)
sb_mac_intel_104_compile_factory.addStep(compile_selftest)
sb_mac_intel_104_compile_factory.addStep(compile_release_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_release_wordcode_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_debug_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_release_debugger_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_debug_debugger_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_selftest_ppc_local)
sb_mac_intel_104_compile_factory.addStep(compile_buildcheck_local)
sb_mac_intel_104_compile_factory.addStep(util_upload_asteam_local)

sb_mac_intel_104_compile_builder = {
            'name': "mac-intel-10.4-compile-sandbox",
            'slavename': "asteammac4",
            'factory': sb_mac_intel_104_compile_factory,
            'builddir': './sandbox-mac-intel-10_4-compile',
}


####################################################
#### builder for mac-intel-10_5-compile-sandbox ####
####################################################
sb_mac_intel_105_compile_factory = factory.BuildFactory()
sb_mac_intel_105_compile_factory.addStep(sync_clean)
sb_mac_intel_105_compile_factory.addStep(sync_clone_sandbox)
sb_mac_intel_105_compile_factory.addStep(sync_update)
sb_mac_intel_105_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-intel-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_mac_intel_105_compile_factory.addStep(compile_builtin)
sb_mac_intel_105_compile_factory.addStep(compile_release)
sb_mac_intel_105_compile_factory.addStep(compile_release_wordcode)
sb_mac_intel_105_compile_factory.addStep(compile_debug)
sb_mac_intel_105_compile_factory.addStep(compile_release_debugger)
sb_mac_intel_105_compile_factory.addStep(compile_debug_debugger)
sb_mac_intel_105_compile_factory.addStep(compile_release_vprof)
sb_mac_intel_105_compile_factory.addStep(compile_selftest)
sb_mac_intel_105_compile_factory.addStep(compile_release_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_release_wordcode_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_debug_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_release_debugger_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_debug_debugger_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_selftest_ppc_local)
sb_mac_intel_105_compile_factory.addStep(compile_buildcheck_local)
sb_mac_intel_105_compile_factory.addStep(util_upload_asteam_local)

sb_mac_intel_105_compile_builder = {
            'name': "mac-intel-10.5-compile-sandbox",
            'slavename': "asteammac1",
            'factory': sb_mac_intel_105_compile_factory,
            'builddir': './sandbox-mac-intel-10_5-compile',
}


##################################################
#### builder for mac-intel-64-compile-sandbox ####
##################################################
sb_mac_intel_64_compile_factory = factory.BuildFactory()
sb_mac_intel_64_compile_factory.addStep(sync_clean)
sb_mac_intel_64_compile_factory.addStep(sync_clone_sandbox)
sb_mac_intel_64_compile_factory.addStep(sync_update)
sb_mac_intel_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac64-intel/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_mac_intel_64_compile_factory.addStep(compile_builtin)
sb_mac_intel_64_compile_factory.addStep(compile_release_local)
sb_mac_intel_64_compile_factory.addStep(compile_release_wordcode_local)
sb_mac_intel_64_compile_factory.addStep(compile_debug_local)
sb_mac_intel_64_compile_factory.addStep(compile_release_debugger_local)
sb_mac_intel_64_compile_factory.addStep(compile_debug_debugger_local)
sb_mac_intel_64_compile_factory.addStep(compile_release_ppc_local)
sb_mac_intel_64_compile_factory.addStep(compile_release_wordcode_ppc_local)
sb_mac_intel_64_compile_factory.addStep(compile_debug_ppc_local)
sb_mac_intel_64_compile_factory.addStep(compile_release_debugger_ppc_local)
sb_mac_intel_64_compile_factory.addStep(compile_debug_debugger_ppc_local)
sb_mac_intel_64_compile_factory.addStep(compile_buildcheck_local)
sb_mac_intel_64_compile_factory.addStep(util_upload_asteam_local)

sb_mac_intel_64_compile_builder = {
            'name': "mac64-intel-compile-sandbox",
            'slavename': "asteammac1-64bit",
            'factory': sb_mac_intel_64_compile_factory,
            'builddir': './sandbox-mac64-intel-compile',
}


###################################################
#### builder for mac-ppc-10_4a-compile-sandbox ####
###################################################
sb_mac_ppc_104a_compile_factory = factory.BuildFactory()
sb_mac_ppc_104a_compile_factory.addStep(sync_clean)
sb_mac_ppc_104a_compile_factory.addStep(sync_clone_sandbox)
sb_mac_ppc_104a_compile_factory.addStep(sync_update)
sb_mac_ppc_104a_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

sb_mac_ppc_104a_compile_builder = {
            'name': "mac-ppc-10.4a-compile-sandbox",
            'slavename': "asteammac6",
            'factory': sb_mac_ppc_104a_compile_factory,
            'builddir': './sandbox-mac-ppc-10_4a-compile',
}


###################################################
#### builder for mac-ppc-10_4b-compile-sandbox ####
###################################################
sb_mac_ppc_104b_compile_factory = factory.BuildFactory()
sb_mac_ppc_104b_compile_factory.addStep(sync_clean)
sb_mac_ppc_104b_compile_factory.addStep(sync_clone_sandbox)
sb_mac_ppc_104b_compile_factory.addStep(sync_update)
sb_mac_ppc_104b_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_4/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

sb_mac_ppc_104b_compile_builder = {
            'name': "mac-ppc-10.4b-compile-sandbox",
            'slavename': "asteammac9",
            'factory': sb_mac_ppc_104b_compile_factory,
            'builddir': './sandbox-mac-ppc-10_4b-compile',
}



###################################################
#### builder for mac-ppc-10_5a-compile-sandbox ####
###################################################
sb_mac_ppc_105a_compile_factory = factory.BuildFactory()
sb_mac_ppc_105a_compile_factory.addStep(sync_clean)
sb_mac_ppc_105a_compile_factory.addStep(sync_clone_sandbox)
sb_mac_ppc_105a_compile_factory.addStep(sync_update)
sb_mac_ppc_105a_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

sb_mac_ppc_105a_compile_builder = {
            'name': "mac-ppc-10.5a-compile-sandbox",
            'slavename': "tamarin-xserve",
            'factory': sb_mac_ppc_105a_compile_factory,
            'builddir': './sandbox-mac-ppc-10_5a-compile',
}


###################################################
#### builder for mac-ppc-10_5b-compile-sandbox ####
###################################################
sb_mac_ppc_105b_compile_factory = factory.BuildFactory()
sb_mac_ppc_105b_compile_factory.addStep(sync_clean)
sb_mac_ppc_105b_compile_factory.addStep(sync_clone_sandbox)
sb_mac_ppc_105b_compile_factory.addStep(sync_update)
sb_mac_ppc_105b_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac-ppc-10_5/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

sb_mac_ppc_105b_compile_builder = {
            'name': "mac-ppc-10.5b-compile-sandbox",
            'slavename': "tamarin-xserve2",
            'factory': sb_mac_ppc_105b_compile_factory,
            'builddir': './sandbox-mac-ppc-10_5b-compile',
}


################################################
#### builder for mac-ppc-64-compile-sandbox ####
################################################
sb_mac_ppc_64_compile_factory = factory.BuildFactory()
sb_mac_ppc_64_compile_factory.addStep(sync_clean)
sb_mac_ppc_64_compile_factory.addStep(sync_clone_sandbox)
sb_mac_ppc_64_compile_factory.addStep(sync_update)
sb_mac_ppc_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/mac64-ppc/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)

sb_mac_ppc_64_compile_builder = {
            'name': "mac64-ppc-compile-sandbox",
            'slavename': "asteammac5-64bit",
            'factory': sb_mac_ppc_64_compile_factory,
            'builddir': './sandbox-mac64-ppc-compile',
}


###########################################
#### builder for linux-compile-sandbox ####
###########################################
sb_linux_compile_factory = factory.BuildFactory()
sb_linux_compile_factory.addStep(sync_clean)
sb_linux_compile_factory.addStep(sync_clone_sandbox)
sb_linux_compile_factory.addStep(sync_update)
sb_linux_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_linux_compile_factory.addStep(compile_builtin)
sb_linux_compile_factory.addStep(compile_release)
sb_linux_compile_factory.addStep(compile_release_wordcode)
sb_linux_compile_factory.addStep(compile_debug)
sb_linux_compile_factory.addStep(compile_release_debugger)
sb_linux_compile_factory.addStep(compile_debug_debugger)
sb_linux_compile_factory.addStep(compile_release_vprof)
sb_linux_compile_factory.addStep(compile_selftest)
sb_linux_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-cov.sh', WithProperties('%s','revision')],
            description='starting linux code coverage release build...',
            descriptionDone='finished linux code coverage release build.',
            name="Build_Release_cov",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_linux_compile_factory.addStep(compile_buildcheck_local)
sb_linux_compile_factory.addStep(util_upload_asteam_local)

sb_linux_compile_builder = {
            'name': "linux-compile-sandbox",
            'slavename': "asteamlin1",
            'factory': sb_linux_compile_factory,
            'builddir': './sandbox-linux-compile',
}


#############################################
#### builder for linux64-compile-sandbox ####
#############################################
sb_linux_64_compile_factory = factory.BuildFactory()
sb_linux_64_compile_factory.addStep(sync_clean)
sb_linux_64_compile_factory.addStep(sync_clone_sandbox)
sb_linux_64_compile_factory.addStep(sync_update)
sb_linux_64_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/linux64/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_linux_64_compile_factory.addStep(compile_builtin)
sb_linux_64_compile_factory.addStep(compile_release)
sb_linux_64_compile_factory.addStep(compile_release_wordcode)
sb_linux_64_compile_factory.addStep(compile_debug)
sb_linux_64_compile_factory.addStep(compile_release_debugger)
sb_linux_64_compile_factory.addStep(compile_debug_debugger)
sb_linux_64_compile_factory.addStep(compile_release_vprof)
sb_linux_64_compile_factory.addStep(compile_testmedia)
sb_linux_64_compile_factory.addStep(compile_buildcheck_local)
sb_linux_64_compile_factory.addStep(util_upload_asteam_local)

sb_linux_64_compile_builder = {
            'name': "linux64-compile-sandbox",
            'slavename': "asteamlin5",
            'factory': sb_linux_64_compile_factory,
            'builddir': './sandbox-linux64-compile',
}


########################################################
#### builder for winmobile-emulator-compile-sandbox ####
########################################################
sb_winmobile_emulator_compile_factory = factory.BuildFactory()
sb_winmobile_emulator_compile_factory.addStep(sync_clean)
sb_winmobile_emulator_compile_factory.addStep(sync_clone_sandbox)
sb_winmobile_emulator_compile_factory.addStep(sync_update)
sb_winmobile_emulator_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/winmobile-arm/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_winmobile_emulator_compile_factory.addStep(compile_builtin)
sb_winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting release-arm build...',
            descriptionDone='finished release-arm build.',
            name='Build_ReleaseARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-release-wordcode-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting release-wordcode-arm build...',
            descriptionDone='finished release-wordcode-arm build.',
            name='Build_Release-wordcode-ARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_winmobile_emulator_compile_factory.addStep(BuildShellCommand(
            command=['./build-debug-mobile-pocketpc-arm.sh', WithProperties('%s','revision')],
            description='starting debug-arm build...',
            descriptionDone='finished debug-arm build.',
            name='Build_DebugARM',
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_winmobile_emulator_compile_factory.addStep(compile_buildcheck_local)
sb_winmobile_emulator_compile_factory.addStep(util_upload_asteam_local)
#sb_winmobile_emulator_compile_factory.addStep(BuildShellCommand(
#            command=['./build-release-mobile-pocketpc-arm-sizereport.sh', WithProperties('%s','revision')],
#            description='starting to run sizereport...',
#            descriptionDone='finished sizereport.',
#            name="Build_Release_sizereport",
#            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
#)

sb_winmobile_emulator_compile_builder = {
            'name': "winmobile-emulator-compile-sandbox",
            'slavename': "asteamwin19",
            'factory': sb_winmobile_emulator_compile_factory,
            'builddir': './sandbox-winmobile-emulator-compile',
}


###################################################
#### builder for solaris-sparc-compile-sandbox ####
###################################################
sb_solaris_sparc_compile_factory = factory.BuildFactory()
sb_solaris_sparc_compile_factory.addStep(sync_clean)
sb_solaris_sparc_compile_factory.addStep(sync_clone_sandbox)
sb_solaris_sparc_compile_factory.addStep(sync_update)
sb_solaris_sparc_compile_factory.addStep(ShellCommand(
            command=['cp','-R','%s/build/buildbot/slaves/solaris-sparc/scripts' % BRANCH, '%s/build/buildbot/slaves/scripts' % BRANCH],
            workdir='../',
            description='Updating SLAVE buildscripts',
            name='BB_SLAVEUpdate',
            haltOnFailure="True"
            )
)
sb_solaris_sparc_compile_factory.addStep(compile_builtin)
sb_solaris_sparc_compile_factory.addStep(compile_release)
sb_solaris_sparc_compile_factory.addStep(compile_release_wordcode)
sb_solaris_sparc_compile_factory.addStep(compile_debug)
sb_solaris_sparc_compile_factory.addStep(compile_release_debugger)
sb_solaris_sparc_compile_factory.addStep(compile_debug_debugger)
sb_solaris_sparc_compile_factory.addStep(compile_selftest)
sb_solaris_sparc_compile_factory.addStep(compile_buildcheck_local)

sb_solaris_sparc_compile_builder = {
            'name': "solaris-sparc-compile-sandbox",
            'slavename': "asteamsol4",
            'factory': sb_solaris_sparc_compile_factory,
            'builddir': './sandbox-solaris-sparc-compile',
}


################################################################################
################################################################################
####                                                                        ####
####                     SANDBOX SMOKE BUILDERS                             ####
####                                                                        ####
################################################################################
################################################################################




###########################################
#### builder for windows-smoke-sandbox ####
###########################################
sb_windows_smoke_factory = factory.BuildFactory()
sb_windows_smoke_factory.addStep(download_testmedia)
sb_windows_smoke_factory.addStep(test_smoke)
sb_windows_smoke_factory.addStep(util_process_clean)

sb_windows_smoke_builder = {
            'name': "windows-smoke-sandbox",
            'slavename': "asteamwin2",
            'factory': sb_windows_smoke_factory,
            'builddir': './sandbox-windows-smoke',
}


#############################################
#### builder for windows64-smoke-sandbox ####
#############################################
sb_windows_64_smoke_factory = factory.BuildFactory()
sb_windows_64_smoke_factory.addStep(download_testmedia)
sb_windows_64_smoke_factory.addStep(test_smoke)
sb_windows_64_smoke_factory.addStep(util_process_clean)

sb_windows_64_smoke_builder = {
            'name': "windows64-smoke-sandbox",
            'slavename': "asteamwin3",
            'factory': sb_windows_64_smoke_factory,
            'builddir': './sandbox-windows64-smoke',
}


##################################################
#### builder for mac-intel-10_4-smoke-sandbox ####
##################################################
sb_mac_intel_104_smoke_factory = factory.BuildFactory()
sb_mac_intel_104_smoke_factory.addStep(download_testmedia)
sb_mac_intel_104_smoke_factory.addStep(test_smoke)
sb_mac_intel_104_smoke_factory.addStep(util_process_clean)

sb_mac_intel_104_smoke_builder = {
            'name': "mac-intel-10.4-smoke-sandbox",
            'slavename': "asteammac4",
            'factory': sb_mac_intel_104_smoke_factory,
            'builddir': './sandbox-mac-intel-10_4-smoke',
}


##################################################
#### builder for mac-intel-10_5-smoke-sandbox ####
##################################################
sb_mac_intel_105_smoke_factory = factory.BuildFactory()
sb_mac_intel_105_smoke_factory.addStep(download_testmedia)
sb_mac_intel_105_smoke_factory.addStep(test_smoke)
sb_mac_intel_105_smoke_factory.addStep(util_process_clean)

sb_mac_intel_105_smoke_builder = {
            'name': "mac-intel-10.5-smoke-sandbox",
            'slavename': "asteammac1",
            'factory': sb_mac_intel_105_smoke_factory,
            'builddir': './sandbox-mac-intel-10_5-smoke',
}


###############################################
#### builder for mac64-intel-smoke-sandbox ####
###############################################
sb_mac_intel_64_smoke_factory = factory.BuildFactory()
sb_mac_intel_64_smoke_factory.addStep(download_testmedia)
sb_mac_intel_64_smoke_factory.addStep(test_smoke)
sb_mac_intel_64_smoke_factory.addStep(util_process_clean)

sb_mac_intel_64_smoke_builder = {
            'name': "mac64-intel-smoke-sandbox",
            'slavename': "asteammac1-64bit",
            'factory': sb_mac_intel_64_smoke_factory,
            'builddir': './sandbox-mac64-intel-smoke',
}

#################################################
#### builder for mac-ppc-10_4a-smoke-sandbox ####
#################################################
sb_mac_ppc_104a_smoke_factory = factory.BuildFactory()
sb_mac_ppc_104a_smoke_factory.addStep(download_testmedia)
sb_mac_ppc_104a_smoke_factory.addStep(test_smoke)
sb_mac_ppc_104a_smoke_factory.addStep(util_process_clean)

sb_mac_ppc_104a_smoke_builder = {
            'name': "mac-ppc-10.4a-smoke-sandbox",
            'slavename': "asteammac6",
            'factory': sb_mac_ppc_104a_smoke_factory,
            'builddir': './sandbox-mac-ppc-10_4a-smoke',
}


#################################################
#### builder for mac-ppc-10_4b-smoke-sandbox ####
#################################################
sb_mac_ppc_104b_smoke_factory = factory.BuildFactory()
sb_mac_ppc_104b_smoke_factory.addStep(download_testmedia)
sb_mac_ppc_104b_smoke_factory.addStep(test_smoke)
sb_mac_ppc_104b_smoke_factory.addStep(util_process_clean)

sb_mac_ppc_104b_smoke_builder = {
            'name': "mac-ppc-10.4b-smoke-sandbox",
            'slavename': "asteammac9",
            'factory': sb_mac_ppc_104b_smoke_factory,
            'builddir': './sandbox-mac-ppc-10_4b-smoke',
}


#################################################
#### builder for mac-ppc-10_5a-smoke-sandbox ####
#################################################
sb_mac_ppc_105a_smoke_factory = factory.BuildFactory()
sb_mac_ppc_105a_smoke_factory.addStep(download_testmedia)
sb_mac_ppc_105a_smoke_factory.addStep(test_smoke)
sb_mac_ppc_105a_smoke_factory.addStep(util_process_clean)

sb_mac_ppc_105a_smoke_builder = {
            'name': "mac-ppc-10.5a-smoke-sandbox",
            'slavename': "tamarin-xserve",
            'factory': sb_mac_ppc_105a_smoke_factory,
            'builddir': './sandbox-mac-ppc-10_5a-smoke',
}

#################################################
#### builder for mac-ppc-10_5b-smoke-sandbox ####
#################################################
sb_mac_ppc_105b_smoke_factory = factory.BuildFactory()
sb_mac_ppc_105b_smoke_factory.addStep(download_testmedia)
sb_mac_ppc_105b_smoke_factory.addStep(util_process_clean)

sb_mac_ppc_105b_smoke_builder = {
            'name': "mac-ppc-10.5b-smoke-sandbox",
            'slavename': "tamarin-xserve2",
            'factory': sb_mac_ppc_105b_smoke_factory,
            'builddir': './sandbox-mac-ppc-10_5b-smoke',
}


#############################################
#### builder for mac64-ppc-smoke-sandbox ####
#############################################
sb_mac_ppc_64_smoke_factory = factory.BuildFactory()
sb_mac_ppc_64_smoke_factory.addStep(download_testmedia)
sb_mac_ppc_64_smoke_factory.addStep(test_smoke)
sb_mac_ppc_64_smoke_factory.addStep(util_process_clean)

sb_mac_ppc_64_smoke_builder = {
            'name': "mac64-ppc-smoke-sandbox",
            'slavename': "asteammac5-64bit",
            'factory': sb_mac_ppc_64_smoke_factory,
            'builddir': './sandbox-mac64-ppc-smoke',
}


#########################################
#### builder for linux-smoke-sandbox ####
#########################################
sb_linux_smoke_factory = factory.BuildFactory()
sb_linux_smoke_factory.addStep(download_testmedia)
sb_linux_smoke_factory.addStep(test_smoke)
sb_linux_smoke_factory.addStep(util_process_clean)

sb_linux_smoke_builder = {
            'name': "linux-smoke-sandbox",
            'slavename': "asteamlin1",
            'factory': sb_linux_smoke_factory,
            'builddir': './sandbox-linux-smoke',
}


###########################################
#### builder for linux64-smoke-sandbox ####
###########################################
sb_linux_64_smoke_factory = factory.BuildFactory()
sb_linux_64_smoke_factory.addStep(download_testmedia)
sb_linux_64_smoke_factory.addStep(test_smoke)
sb_linux_64_smoke_factory.addStep(util_process_clean)

sb_linux_64_smoke_builder = {
            'name': "linux64-smoke-sandbox",
            'slavename': "asteamlin5",
            'factory': sb_linux_64_smoke_factory,
            'builddir': './sandbox-linux64-smoke',
}


######################################################
#### builder for winmobile-emulator-smoke-sandbox ####
######################################################
sb_winmobile_emulator_smoke_factory = factory.BuildFactory()
sb_winmobile_emulator_smoke_factory.addStep(download_testmedia)
sb_winmobile_emulator_smoke_factory.addStep(test_emulator_smoke_mobile)
sb_winmobile_emulator_smoke_factory.addStep(util_process_clean)

sb_winmobile_emulator_smoke_builder = {
            'name': "winmobile-emulator-smoke-sandbox",
            'slavename': "asteamwin19",
            'factory': sb_winmobile_emulator_smoke_factory,
            'builddir': './sandbox-winmobile-emulator-smoke',
}

#################################################
#### builder for solaris-sparc-smoke-sandbox ####
#################################################
sb_solaris_sparc_smoke_factory = factory.BuildFactory()
sb_solaris_sparc_smoke_factory.addStep(download_testmedia)
sb_solaris_sparc_smoke_factory.addStep(test_smoke)
sb_solaris_sparc_smoke_factory.addStep(util_process_clean)

sb_solaris_sparc_smoke_builder = {
            'name': "solaris-sparc-smoke-sandbox",
            'slavename': "asteamsol4",
            'factory': sb_solaris_sparc_smoke_factory,
            'builddir': './sandbox-solaris-sparc-smoke',
}

################################################################################
################################################################################
####                                                                        ####
####                    SANDBOX TEST BUILDERS                               ####
####                                                                        ####
################################################################################
################################################################################




##########################################
#### builder for windows-test-sandbox ####
##########################################
sb_windows_test_factory = factory.BuildFactory()
sb_windows_test_factory.addStep(test_commandline)
sb_windows_test_factory.addStep(test_selftest)
sb_windows_test_factory.addStep(test_release)
sb_windows_test_factory.addStep(test_release_interp)
sb_windows_test_factory.addStep(test_release_interp_wordcode)
sb_windows_test_factory.addStep(test_release_jit)
sb_windows_test_factory.addStep(test_release_debugger)
sb_windows_test_factory.addStep(test_debug)
sb_windows_test_factory.addStep(test_debug_debugger)
sb_windows_test_factory.addStep(test_differential)
sb_windows_test_factory.addStep(util_process_clean)

sb_windows_test_builder = {
            'name': "windows-test-sandbox",
            'slavename': "asteamwin2",
            'factory': sb_windows_test_factory,
            'builddir': './sandbox-windows-test',
}

############################################
#### builder for windows64-test-sandbox ####
############################################
sb_windows_64_test_factory = factory.BuildFactory()
sb_windows_64_test_factory.addStep(test_commandline)
sb_windows_64_test_factory.addStep(test_release)
sb_windows_64_test_factory.addStep(test_release_interp)
sb_windows_64_test_factory.addStep(test_release_jit)
sb_windows_64_test_factory.addStep(test_release_debugger)
sb_windows_64_test_factory.addStep(test_debug)
sb_windows_64_test_factory.addStep(test_debug_debugger)
sb_windows_64_test_factory.addStep(util_process_clean)

sb_windows_64_test_builder = {
            'name': "windows64-test-sandbox",
            'slavename': "asteamwin3",
            'factory': sb_windows_64_test_factory,
            'builddir': './sandbox-windows64-test',
}


#################################################
#### builder for mac-intel-10_4-test-sandbox ####
#################################################
sb_mac_intel_104_test_factory = factory.BuildFactory()
sb_mac_intel_104_test_factory.addStep(test_commandline)
sb_mac_intel_104_test_factory.addStep(test_selftest)
sb_mac_intel_104_test_factory.addStep(test_release)
sb_mac_intel_104_test_factory.addStep(test_release_interp)
sb_mac_intel_104_test_factory.addStep(test_release_interp_wordcode)
sb_mac_intel_104_test_factory.addStep(test_release_jit)
sb_mac_intel_104_test_factory.addStep(test_release_debugger)
sb_mac_intel_104_test_factory.addStep(test_debug)
sb_mac_intel_104_test_factory.addStep(test_debug_debugger)
sb_mac_intel_104_test_factory.addStep(test_differential)
sb_mac_intel_104_test_factory.addStep(util_process_clean)

sb_mac_intel_104_test_builder = {
            'name': "mac-intel-10.4-test-sandbox",
            'slavename': "asteammac4",
            'factory': sb_mac_intel_104_test_factory,
            'builddir': './sandbox-mac-intel-10_4-test',
}



#################################################
#### builder for mac-intel-10_5-test-sandbox ####
#################################################
sb_mac_intel_105_test_factory = factory.BuildFactory()
sb_mac_intel_105_test_factory.addStep(test_commandline)
sb_mac_intel_105_test_factory.addStep(test_selftest)
sb_mac_intel_105_test_factory.addStep(test_release)
sb_mac_intel_105_test_factory.addStep(test_release_interp)
sb_mac_intel_105_test_factory.addStep(test_release_interp_wordcode)
sb_mac_intel_105_test_factory.addStep(test_release_jit)
sb_mac_intel_105_test_factory.addStep(test_release_debugger)
sb_mac_intel_105_test_factory.addStep(test_debug)
sb_mac_intel_105_test_factory.addStep(test_debug_debugger)
sb_mac_intel_105_test_factory.addStep(test_differential)
sb_mac_intel_105_test_factory.addStep(util_process_clean)

sb_mac_intel_105_test_builder = {
            'name': "mac-intel-10.5-test-sandbox",
            'slavename': "asteammac1",
            'factory': sb_mac_intel_105_test_factory,
            'builddir': './sandbox-mac-intel-10_5-test',
}

##############################################
#### builder for mac64-intel-test-sandbox ####
##############################################
sb_mac_intel_64_test_factory = factory.BuildFactory()
sb_mac_intel_64_test_factory.addStep(test_commandline)
sb_mac_intel_64_test_factory.addStep(test_release)
sb_mac_intel_64_test_factory.addStep(test_release_interp)
sb_mac_intel_64_test_factory.addStep(test_release_interp_wordcode)
sb_mac_intel_64_test_factory.addStep(test_release_jit)
sb_mac_intel_64_test_factory.addStep(test_release_debugger)
sb_mac_intel_64_test_factory.addStep(test_debug)
sb_mac_intel_64_test_factory.addStep(test_debug_debugger)
sb_mac_intel_64_test_factory.addStep(util_process_clean)

sb_mac_intel_64_test_builder = {
            'name': "mac64-intel-test-sandbox",
            'slavename': "asteammac1-64bit",
            'factory': sb_mac_intel_64_test_factory,
            'builddir': './sandbox-mac64-intel-test',
}


################################################
#### builder for mac-ppc-10_4a-test-sandbox ####
################################################
sb_mac_ppc_104a_test_factory = factory.BuildFactory()
sb_mac_ppc_104a_test_factory.addStep(test_commandline)
sb_mac_ppc_104a_test_factory.addStep(test_selftest)
sb_mac_ppc_104a_test_factory.addStep(test_release)
sb_mac_ppc_104a_test_factory.addStep(test_release_interp)
sb_mac_ppc_104a_test_factory.addStep(test_release_interp_wordcode)
sb_mac_ppc_104a_test_factory.addStep(test_release_jit)
sb_mac_ppc_104a_test_factory.addStep(test_debug)
sb_mac_ppc_104a_test_factory.addStep(util_process_clean)

sb_mac_ppc_104a_test_builder = {
            'name': "mac-ppc-10.4a-test-sandbox",
            'slavename': "asteammac6",
            'factory': sb_mac_ppc_104a_test_factory,
            'builddir': './sandbox-mac-ppc-10_4a-test',
}


################################################
#### builder for mac-ppc-10_4b-test-sandbox ####
################################################
sb_mac_ppc_104b_test_factory = factory.BuildFactory()
sb_mac_ppc_104b_test_factory.addStep(test_release_debugger)
sb_mac_ppc_104b_test_factory.addStep(test_debug_debugger)
sb_mac_ppc_104b_test_factory.addStep(util_process_clean)

sb_mac_ppc_104b_test_builder = {
            'name': "mac-ppc-10.4b-test-sandbox",
            'slavename': "asteammac9",
            'factory': sb_mac_ppc_104b_test_factory,
            'builddir': './sandbox-mac-ppc-10_4b-test',
}


################################################
#### builder for mac-ppc-10_5a-test-sandbox ####
################################################
sb_mac_ppc_105a_test_factory = factory.BuildFactory()
sb_mac_ppc_105a_test_factory.addStep(test_commandline)
sb_mac_ppc_105a_test_factory.addStep(test_selftest)
sb_mac_ppc_105a_test_factory.addStep(test_release)
sb_mac_ppc_105a_test_factory.addStep(test_release_interp)
sb_mac_ppc_105a_test_factory.addStep(test_release_interp_wordcode)
sb_mac_ppc_105a_test_factory.addStep(test_release_jit)
sb_mac_ppc_105a_test_factory.addStep(test_debug)
sb_mac_ppc_105a_test_factory.addStep(util_process_clean)

sb_mac_ppc_105a_test_builder = {
            'name': "mac-ppc-10.5a-test-sandbox",
            'slavename': "tamarin-xserve",
            'factory': sb_mac_ppc_105a_test_factory,
            'builddir': './sandbox-mac-ppc-10_5a-test',
}

################################################
#### builder for mac-ppc-10_5b-test-sandbox ####
################################################
sb_mac_ppc_105b_test_factory = factory.BuildFactory()
sb_mac_ppc_105b_test_factory.addStep(test_release_debugger)
sb_mac_ppc_105b_test_factory.addStep(test_debug_debugger)
sb_mac_ppc_105b_test_factory.addStep(util_process_clean)

sb_mac_ppc_105b_test_builder = {
            'name': "mac-ppc-10.5b-test-sandbox",
            'slavename': "tamarin-xserve2",
            'factory': sb_mac_ppc_105b_test_factory,
            'builddir': './sandbox-mac-ppc-10_5b-test',
}


############################################
#### builder for mac64-ppc-test-sandbox ####
############################################
sb_mac_ppc_64_test_factory = factory.BuildFactory()
sb_mac_ppc_64_test_factory.addStep(test_commandline)
sb_mac_ppc_64_test_factory.addStep(test_release)
sb_mac_ppc_64_test_factory.addStep(test_release_interp)
sb_mac_ppc_64_test_factory.addStep(test_release_interp_wordcode)
sb_mac_ppc_64_test_factory.addStep(test_release_jit)
sb_mac_ppc_64_test_factory.addStep(test_release_debugger)
sb_mac_ppc_64_test_factory.addStep(test_debug)
sb_mac_ppc_64_test_factory.addStep(test_debug_debugger)
sb_mac_ppc_64_test_factory.addStep(util_process_clean)

sb_mac_ppc_64_test_builder = {
            'name': "mac64-ppc-test-sandbox",
            'slavename': "asteammac5-64bit",
            'factory': sb_mac_ppc_64_test_factory,
            'builddir': './sandbox-mac64-ppc-test',
}


########################################
#### builder for linux-test-sandbox ####
########################################
sb_linux_test_factory = factory.BuildFactory()
sb_linux_test_factory.addStep(test_commandline)
sb_linux_test_factory.addStep(test_selftest)
sb_linux_test_factory.addStep(test_release)
sb_linux_test_factory.addStep(test_release_interp)
sb_linux_test_factory.addStep(test_release_interp_wordcode)
sb_linux_test_factory.addStep(test_release_jit)
sb_linux_test_factory.addStep(test_release_debugger)
sb_linux_test_factory.addStep(test_debug)
sb_linux_test_factory.addStep(test_debug_debugger)
sb_linux_test_factory.addStep(test_differential)
sb_linux_test_factory.addStep(TestSuiteShellCommand(
            command=['./run-tests-release-cov.sh', WithProperties('%s','revision')],
            description='starting to run release code coverage vmtests...',
            descriptionDone='finished release code coverage vmtests.',
            name="Testsuite_Release-cov",
            workdir="../%s/build/buildbot/slaves/scripts" % BRANCH )
)
sb_linux_test_factory.addStep(util_process_clean)

sb_linux_test_builder = {
            'name': "linux-test-sandbox",
            'slavename': "asteamlin1",
            'factory': sb_linux_test_factory,
            'builddir': './sandbox-linux-test',
}


##########################################
#### builder for linux64-test-sandbox ####
##########################################
sb_linux_64_test_factory = factory.BuildFactory()
sb_linux_64_test_factory.addStep(test_commandline)
sb_linux_64_test_factory.addStep(test_release)
sb_linux_64_test_factory.addStep(test_release_interp)
sb_linux_64_test_factory.addStep(test_release_interp_wordcode)
sb_linux_64_test_factory.addStep(test_release_jit)
sb_linux_64_test_factory.addStep(test_release_debugger)
sb_linux_64_test_factory.addStep(test_debug)
sb_linux_64_test_factory.addStep(test_debug_debugger)
sb_linux_64_test_factory.addStep(util_process_clean)

sb_linux_64_test_builder = {
            'name': "linux64-test-sandbox",
            'slavename': "asteamlin5",
            'factory': sb_linux_64_test_factory,
            'builddir': './sandbox-linux64-test',
}

#####################################################
#### builder for winmobile-emulator-test-sandbox ####
#####################################################
sb_winmobile_emulator_test_factory = factory.BuildFactory()
sb_winmobile_emulator_test_factory.addStep(test_emulator_release_mobile)
sb_winmobile_emulator_test_factory.addStep(test_emulator_release_interp_mobile)
sb_winmobile_emulator_test_factory.addStep(test_emulator_release_interp_wordcode_mobile)
sb_winmobile_emulator_test_factory.addStep(test_emulator_release_jit_mobile)
sb_winmobile_emulator_test_factory.addStep(util_process_clean)

sb_winmobile_emulator_test_builder = {
            'name': "winmobile-emulator-test-sandbox",
            'slavename': "asteamwin19",
            'factory': sb_winmobile_emulator_test_factory,
            'builddir': './sandbox-winmobile-emulator-test',
}


################################################
#### builder for solaris-sparc-test-sandbox ####
################################################
sb_solaris_sparc_test_factory = factory.BuildFactory()
sb_solaris_sparc_test_factory.addStep(test_commandline)
sb_solaris_sparc_test_factory.addStep(test_selftest)
sb_solaris_sparc_test_factory.addStep(test_release)
sb_solaris_sparc_test_factory.addStep(test_release_interp)
sb_solaris_sparc_test_factory.addStep(test_release_interp_wordcode)
sb_solaris_sparc_test_factory.addStep(test_release_jit)
sb_solaris_sparc_test_factory.addStep(test_release_debugger)
sb_solaris_sparc_test_factory.addStep(test_debug)
sb_solaris_sparc_test_factory.addStep(test_debug_debugger)
sb_solaris_sparc_test_factory.addStep(util_process_clean)

sb_solaris_sparc_test_builder = {
            'name': "solaris-sparc-test-sandbox",
            'slavename': "asteamsol4",
            'factory': sb_solaris_sparc_test_factory,
            'builddir': './sandbox-solaris-sparc-test',
}


c['builders'] = [
                windows_compile_builder,
                windows64_compile_builder,
                mac_intel_104_compile_builder,
                mac_intel_105_compile_builder,
                mac_intel_64_compile_builder,
                mac_ppc_104a_compile_builder,
                mac_ppc_104b_compile_builder,
                mac_ppc_105a_compile_builder,
                mac_ppc_105b_compile_builder,
                mac_ppc_64_compile_builder,
                linux_compile_builder,
                linux_64_compile_builder,
                winmobile_emulator_compile_builder,
                solaris_sparc_compile_builder,
                
                windows_smoke_builder,
                windows_64_smoke_builder,
                mac_intel_104_smoke_builder,
                mac_intel_105_smoke_builder,
                mac_intel_64_smoke_builder,
                mac_ppc_104a_smoke_builder,
                mac_ppc_104b_smoke_builder,
                mac_ppc_105a_smoke_builder,
                mac_ppc_105b_smoke_builder,
                mac_ppc_64_smoke_builder,
                linux_smoke_builder,
                linux_64_smoke_builder,
                winmobile_emulator_smoke_builder,
                solaris_sparc_smoke_builder,
                
                windows_test_builder,
                windows_64_test_builder,
                mac_intel_104_test_builder,
                mac_intel_105_test_builder,
                mac_intel_64_test_builder,
                mac_ppc_104a_test_builder,
                mac_ppc_104b_test_builder,
                mac_ppc_105a_test_builder,
                mac_ppc_105b_test_builder,
                mac_ppc_64_test_builder,
                linux_test_builder,
                linux_64_test_builder,
                winmobile_emulator_test_builder,
                solaris_sparc_test_builder,

                windows_performance_builder,
                mac_performance_builder,
                mac_64_performance_builder,
                mac_ppc_performance_builder,
                linux_performance_builder,
                winmobile_performance_builder,

                windows_deep_builder,
                windows_p3_deep_builder,
                mac_ppc_deep_builder,
                windows64_deep_builder,
                solaris_sparc_deep_builder,
                winmobile_emulator_deep_builder,
                linux_deep_builder,
                windows_frr_builder,

                sb_windows_compile_builder,
                sb_windows64_compile_builder,
                sb_mac_intel_104_compile_builder,
                sb_mac_intel_105_compile_builder,
                sb_mac_intel_64_compile_builder,
                sb_mac_ppc_104a_compile_builder,
                sb_mac_ppc_104b_compile_builder,
                sb_mac_ppc_105a_compile_builder,
                sb_mac_ppc_105b_compile_builder,
                sb_mac_ppc_64_compile_builder,
                sb_linux_compile_builder,
                sb_linux_64_compile_builder,
                sb_winmobile_emulator_compile_builder,
                sb_solaris_sparc_compile_builder,
                
                sb_windows_smoke_builder,
                sb_windows_64_smoke_builder,
                sb_mac_intel_104_smoke_builder,
                sb_mac_intel_105_smoke_builder,
                sb_mac_intel_64_smoke_builder,
                sb_mac_ppc_104a_smoke_builder,
                sb_mac_ppc_104b_smoke_builder,
                sb_mac_ppc_105a_smoke_builder,
                sb_mac_ppc_105b_smoke_builder,
                sb_mac_ppc_64_smoke_builder,
                sb_linux_smoke_builder,
                sb_linux_64_smoke_builder,
                sb_winmobile_emulator_smoke_builder,
                sb_solaris_sparc_smoke_builder,
                
                sb_windows_test_builder,
                sb_windows_64_test_builder,
                sb_mac_intel_104_test_builder,
                sb_mac_intel_105_test_builder,
                sb_mac_intel_64_test_builder,
                sb_mac_ppc_104a_test_builder,
                sb_mac_ppc_104b_test_builder,
                sb_mac_ppc_105a_test_builder,
                sb_mac_ppc_105b_test_builder,
                sb_mac_ppc_64_test_builder,
                sb_linux_test_builder,
                sb_linux_64_test_builder,
                sb_winmobile_emulator_test_builder,
                sb_solaris_sparc_test_builder,

                ]


####### STATUS TARGETS
c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(WEBPORT_PUB, allowForce=False))
c['status'].append(html.WebStatus(http_port="tcp:%s:interface=%s" % (WEBPORT_INT, MASTER_IP), allowForce=True))

from custom.buildbot_ext.status import custommail
c['status'].append(custommail.CustomMail(branch="tamarin-redux",
            fromaddr="buildbot@adobe.com",
            extraRecipients=["VMBuildbotNotifications@adobe.com"], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='failing',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [compile, smoke, test, performance, deep],
            schedulerGroupsSendFirst = 1
            ))
            
# Also call the custommail MailNotifier when builds pass (mode=all)
# This is done so that any buildsteps were failing but are now passing get cleared
# in the buildinfo.pck file.  There should be NO receipients for this (unless someone wants all build emails)
# With no extraRecipients defined, and sendToInterestedUsers=False, this doesn't actually send
# any mail to anybody.
# TODO: Move this out of the mail code and into its own module
c['status'].append(custommail.CustomMail(branch="tamarin-redux",
            fromaddr="buildbot@adobe.com",
            extraRecipients=[], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='all',
            sendToInterestedUsers=False,
            lookup=""))


# For sandbox builds only notify user
c['status'].append(custommail.CustomMail(branch="sandbox",
            fromaddr="buildbot@adobe.com",
            relayhost='inner-relay-1.corp.adobe.com',
            mode='failing',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [compile_sandbox, smoke_sandbox, test_sandbox],
            schedulerGroupsSendFirst = 1
            ))


####### PROJECT IDENTITY
c['projectName'] = BRANCH
c['projectURL'] = "http://www.mozilla.org/projects/tamarin/"
c['buildbotURL'] = "http://tamarin-builds.mozilla.org/%s/" % BRANCH


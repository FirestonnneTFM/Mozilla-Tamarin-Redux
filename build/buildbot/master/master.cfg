# -*- python -*-
# ex: set syntax=python:
#  ***** BEGIN LICENSE BLOCK *****
#  Version: MPL 1.1/GPL 2.0/LGPL 2.1
# 
#  The contents of this file are subject to the Mozilla Public License Version
#  1.1 (the "License"); you may not use this file except in compliance with
#  the License. You may obtain a copy of the License at
#  http://www.mozilla.org/MPL/
# 
#  Software distributed under the License is distributed on an "AS IS" basis,
#  WITHOUT WARRANTY OF ANY KIND, either express or implied. See the License
#  for the specific language governing rights and limitations under the
#  License.
# 
#  The Original Code is [Open Source Virtual Machine.].
# 
#  The Initial Developer of the Original Code is
#  Adobe System Incorporated.
#  Portions created by the Initial Developer are Copyright (C) 2009
#  the Initial Developer. All Rights Reserved.
# 
#  Contributor(s):
#    Adobe AS3 Team
# 
#  Alternatively, the contents of this file may be used under the terms of
#  either the GNU General Public License Version 2 or later (the "GPL"), or
#  the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
#  in which case the provisions of the GPL or the LGPL are applicable instead
#  of those above. If you wish to allow use of your version of this file only
#  under the terms of either the GPL or the LGPL, and not to allow others to
#  use your version of this file under the terms of the MPL, indicate your
#  decision by deleting the provisions above and replace them with the notice
#  and other provisions required by the GPL or the LGPL. If you do not delete
#  the provisions above, a recipient may use your version of this file under
#  the terms of any one of the MPL, the GPL or the LGPL.
# 
#  ***** END LICENSE BLOCK ****

from buildbot.process import factory
from buildbot.steps.source import Mercurial
from buildbot.steps.shell import *
from custom.buildbot_ext.steps.shellAddons import *
from buildbot.steps.trigger import Trigger



MASTER_IP   = "10.116.42.110"
SLAVEPORT   = 9750
WEBPORT_PUB = 8750
WEBPORT_INT = 8760
PBLISTENER  = 8755

c = BuildmasterConfig = {}

####### BUILDSLAVES
from buildbot.buildslave import BuildSlave
c['slaves'] = [
    # Phase One builders (compile, smoke, test)
    BuildSlave("windows", "asteam"),
    BuildSlave("windows64", "asteam"),
    BuildSlave("mac-intel-10_4", "asteam"),
    BuildSlave("mac-intel-10_5", "asteam"),
    BuildSlave("mac64-intel", "asteam"),
    BuildSlave("mac-ppc-10_4a", "asteam"),
    BuildSlave("mac-ppc-10_4b", "asteam"),
    BuildSlave("mac-ppc-10_5a", "asteam"),
    BuildSlave("mac-ppc-10_5b", "asteam"),
    BuildSlave("mac64a-ppc", "asteam"),
    BuildSlave("mac64b-ppc", "asteam"),
    BuildSlave("linux", "asteam"),
    BuildSlave("linux2", "asteam"),
    BuildSlave("linux64", "asteam"),
    BuildSlave("winmobile-emulator", "asteam"),
    BuildSlave("solaris-sparc", "asteam"),
    BuildSlave("solaris-sparc2", "asteam"),
    BuildSlave("android", "asteam"),
    BuildSlave("linux-arm", "asteam"),
    BuildSlave("linux-arm2", "asteam"),
    BuildSlave("linux-mips", "asteam"),
    BuildSlave("linux-sh4", "asteam"),
               
    # Phase Two builders (deep)
    BuildSlave("windows-deep", "asteam"),
    BuildSlave("windows-p3-deep", "asteam"),
    BuildSlave("mac-deep", "asteam"),
    BuildSlave("mac-ppc-deep", "asteam"),
    BuildSlave("windows64-deep", "asteam"),
    BuildSlave("solaris-sparc-deep", "asteam"),
    BuildSlave("winmobile-emulator-deep", "asteam"),
    BuildSlave("linux-deep", "asteam"),
    BuildSlave("linux-arm-deep", "asteam"),
    BuildSlave("linux-mips-deep", "asteam"),
    BuildSlave("windows-frr", "asteam"),
    
    # Promote Build builder - slave moves builds to latest dir after passing deep phase
    BuildSlave("promote-build", "asteam"),

    # Phase Two builders (performance)
    BuildSlave("windows-performance", "asteam"),
    BuildSlave("mac-performance", "asteam"),
    BuildSlave("mac64-performance", "asteam"),           
    BuildSlave("mac-ppc-performance", "asteam"),
    BuildSlave("linux-performance", "asteam"),
    BuildSlave("winmobile-performance", "asteam"),
    BuildSlave("android-performance", "asteam"),
    ]

c['slavePortnum'] = SLAVEPORT


####### CHANGESOURCES
from buildbot.changes.pb import PBChangeSource
c['change_source'] = PBChangeSource()


c['schedulers'] = []
c['builders'] = []

'''
# Change '???' to an additional branch/config name
# Setup the tamarin-???? builders
from ??? import *
c['builders'].extend(???.builders)
c['schedulers'].extend(???.schedulers)
'''

# Setup the tamarin-redux builders
from tamarinredux import *
c['builders'].extend(tamarinredux.builders)
c['schedulers'].extend(tamarinredux.schedulers)

# setup the sandbox builders
from sandbox import *
c['builders'].extend(sandbox.builders)
c['schedulers'].extend(sandbox.schedulers)


####### STATUS TARGETS
c['status'] = []

from buildbot.status import html
c['status'].append(html.WebStatus(WEBPORT_PUB, allowForce=False))
c['status'].append(html.WebStatus(http_port="tcp:%s:interface=%s" % (WEBPORT_INT, MASTER_IP), allowForce=True))

from custom.buildbot_ext.status import custommail
'''
# Change '???' to an additional branch/config name
c['status'].append(custommail.CustomMail(branch=???.BRANCH,
            fromaddr="buildbot@adobe.com",
            extraRecipients=["VMBuildbotNotifications@adobe.com"], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='failing',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [???.compile, ???.smoke, ???.test],
            schedulerGroupsSendFirst = 1
            ))
            
# Also call the custommail MailNotifier when builds pass (mode=all)
# This is done so that any buildsteps were failing but are now passing get cleared
# in the buildinfo.pck file.  There should be NO receipients for this (unless someone wants all build emails)
# With no extraRecipients defined, and sendToInterestedUsers=False, this doesn't actually send
# any mail to anybody.
# TODO: Move this out of the mail code and into its own module
c['status'].append(custommail.CustomMail(branch=???.BRANCH,
            fromaddr="buildbot@adobe.com",
            extraRecipients=[], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='all',
            sendToInterestedUsers=False,
            lookup=""))
'''



c['status'].append(custommail.CustomMail(branch=tamarinredux.BRANCH,
            fromaddr="buildbot@adobe.com",
            extraRecipients=["VMBuildbotNotifications@adobe.com"], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='failing',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [tamarinredux.compile, tamarinredux.smoke, tamarinredux.test],
            schedulerGroupsSendFirst = 1
            ))
            
# Also call the custommail MailNotifier when builds pass (mode=all)
# This is done so that any buildsteps were failing but are now passing get cleared
# in the buildinfo.pck file.  There should be NO receipients for this (unless someone wants all build emails)
# With no extraRecipients defined, and sendToInterestedUsers=False, this doesn't actually send
# any mail to anybody.
# TODO: Move this out of the mail code and into its own module
c['status'].append(custommail.CustomMail(branch=tamarinredux.BRANCH,
            fromaddr="buildbot@adobe.com",
            extraRecipients=[], 
            relayhost='inner-relay-1.corp.adobe.com',
            mode='all',
            sendToInterestedUsers=False,
            lookup=""))


# For sandbox builds only notify user
c['status'].append(custommail.CustomMail(branch=sandbox.BRANCH,
            fromaddr="buildbot@adobe.com",
            relayhost='inner-relay-1.corp.adobe.com',
            mode='failing',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [sandbox.compile, sandbox.smoke, sandbox.test],
            schedulerGroupsSendFirst = 1
            ))

# Send an "all-passed" email for sandbox builds
c['status'].append(custommail.PassedMailNotifier(branch=sandbox.BRANCH,
            fromaddr="buildbot@adobe.com",
            relayhost='inner-relay-1.corp.adobe.com',
            sendToInterestedUsers=True,
            lookup="",
            schedulerGroups = [sandbox.test],
            schedulerGroupsSendFirst = 0
            ))

# For deep builds notify QE
c['status'].append(custommail.CustomMail(branch = "%s-deep" % tamarinredux.BRANCH,
            fromaddr = "buildbot@adobe.com",
            extraRecipients = ["ActionscriptQE@adobe.com"],
            relayhost = 'inner-relay-1.corp.adobe.com',
            mode = 'failing',
            sendToInterestedUsers = False,
            lookup = "",
            schedulerGroups = [tamarinredux.deep],
            schedulerGroupsSendFirst = 1
            ))

# For performance builds notify QE
c['status'].append(custommail.CustomMail(branch = "%s-performance" % tamarinredux.BRANCH,
            fromaddr = "buildbot@adobe.com",
            extraRecipients = ["ActionscriptQE@adobe.com"],
            relayhost = 'inner-relay-1.corp.adobe.com',
            mode = 'failing',
            sendToInterestedUsers = False,
            lookup = "",
            schedulerGroups = [tamarinredux.performance],
            schedulerGroupsSendFirst = 1
            ))

# Notify QE when promote-build fires
c['status'].append(custommail.CustomMail(branch=tamarinredux.BRANCH,
            fromaddr="buildbot@adobe.com",
            extraRecipients=["ActionscriptQE@adobe.com"],
            relayhost='inner-relay-1.corp.adobe.com',
            mode='all',
            sendToInterestedUsers=False,
            lookup="",
            schedulerGroups = [tamarinredux.promote_build],
            schedulerGroupsSendFirst = 1
            ))


# PBListener is used for the jabberbot client
from custom.buildbot_ext.status.client import PBListener
c['status'].append(PBListener(8755,'asteam','asteam', [tamarinredux.deep]))


# PBListener is used for the jabberbot client
from custom.buildbot_ext.status.client import PhaseOneListener

# Setup a listener that will generate change requests for the DEEP phase
#c['status'].append(PhaseOneListener([???.test], changeDir="changes/deep/pending", priority=1))
c['status'].append(PhaseOneListener([tamarinredux.test], changeDir="changes/deep/pending", priority=2))

# Setup a listener that will generate change requests for the PERFORMANCE phase
#c['status'].append(PhaseOneListener([???.test], changeDir="changes/perf/pending", priority=1))
c['status'].append(PhaseOneListener([tamarinredux.test], changeDir="changes/perf/pending", priority=2))

####### PROJECT IDENTITY
c['projectName'] = "Tamarin"
c['projectURL'] = "http://www.mozilla.org/projects/tamarin/"
c['buildbotURL'] = "http://tamarin-builds.mozilla.org/tamarin-redux/"


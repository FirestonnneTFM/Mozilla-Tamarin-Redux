This is the readme for axtam - Active Scripting implemented using Tamarin.
--------------------------------------------------------------------------

We have not yet integrated use of the esc compiler - hence this implementation
is unable to dynamically compile code at runtime - this will be addressed asap.

This is still very early - almost nothing works yet!  The Windows Scripting 
Host is the only host tested so far (we don't yet implement enough methods
to have IE work with us, for example).

The only code that works at the moment is:
"""
import axtam.System
axtam.System.write('Hello!\n')
"""
I'm still trying to work out how to dynamically add new objects to this namespace - 
CActiveScript::AddNamedItem() attempts to do this, but I'm getting a little lost here.

Building
---------

* Load axtam.dsp into Microsoft Visual Studio 2005 - there is no support for 
  earlier versions.

* Build it - a custom build step will also register the engine.  Only debug builds
  work - release builds haven't even been tried.

After this, an engine named 'application/javascript;version=4' is available.
Note that no file extension is currently registered for this engine, so this
engine name will need to be explicitly specified - see below.

Test it
--------

Until we are integrated with a compiler, we take a hacky approach.  You must:

* Use any compiler you like to create a .abc file with your code.
* In the Active Script engine, specify the full path to this .abc file as
  the script code.

For example, if the code you want to execute is stored at c:\temp\hello.abc,
and you are using the Windows Scripting Host, you could create a new file
called 'test.foo' (the extension does not matter), and this file should
contain nothing more than the full path to the .abc file - no extra spaces
and no trailing \n characters etc.  In our example, this means the test file
should be exactly 17 bytes.

You can then execute the command:
  cscript.exe /E:application/javascript;version=4 test.foo

and the code in c:\temp\hello.abc will be executed.

Note that the only way to see output generated by axtam.System.write is to
either execute this under the debugger and look at the Output Window, or to
execute a script host with a valid stdout handle.  cscript.exe is a console
version of the Windows Scripting Host, so does have a valid stdout - hence 
it is recommended for testing.
